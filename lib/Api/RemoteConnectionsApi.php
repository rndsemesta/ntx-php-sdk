<?php
/**
 * RemoteConnectionsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * RemoteConnectionsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RemoteConnectionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'azProxyPost' => [
            'application/json',
        ],
        'fanoutProxyPost' => [
            'application/json',
        ],
        'remoteConnectionsListPost' => [
            'application/json',
        ],
        'remoteConnectionsPost' => [
            'application/json',
        ],
        'remoteConnectionsUuidDelete' => [
            'application/json',
        ],
        'remoteConnectionsUuidGet' => [
            'application/json',
        ],
        'remoteConnectionsUuidPut' => [
            'application/json',
        ],
        'remoteRpcRequestPost' => [
            'application/octet-stream',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation azProxyPost
     *
     * Proxies request to remote AZ
     *
     * @param  string $method HTTP method to call (required)
     * @param  string $url_path URL path to call on remote cluster (required)
     * @param  string $az_name Availability Zone Name (optional)
     * @param  string $content_type content type for the call (optional)
     * @param  array<string,mixed> $az_proxy_body az_proxy_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['azProxyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function azProxyPost($method, $url_path, $az_name = null, $content_type = null, $az_proxy_body = null, string $contentType = self::contentTypes['azProxyPost'][0])
    {
        $this->azProxyPostWithHttpInfo($method, $url_path, $az_name, $content_type, $az_proxy_body, $contentType);
    }

    /**
     * Operation azProxyPostWithHttpInfo
     *
     * Proxies request to remote AZ
     *
     * @param  string $method HTTP method to call (required)
     * @param  string $url_path URL path to call on remote cluster (required)
     * @param  string $az_name Availability Zone Name (optional)
     * @param  string $content_type content type for the call (optional)
     * @param  array<string,mixed> $az_proxy_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['azProxyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function azProxyPostWithHttpInfo($method, $url_path, $az_name = null, $content_type = null, $az_proxy_body = null, string $contentType = self::contentTypes['azProxyPost'][0])
    {
        $request = $this->azProxyPostRequest($method, $url_path, $az_name, $content_type, $az_proxy_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteConnectionStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation azProxyPostAsync
     *
     * Proxies request to remote AZ
     *
     * @param  string $method HTTP method to call (required)
     * @param  string $url_path URL path to call on remote cluster (required)
     * @param  string $az_name Availability Zone Name (optional)
     * @param  string $content_type content type for the call (optional)
     * @param  array<string,mixed> $az_proxy_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['azProxyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function azProxyPostAsync($method, $url_path, $az_name = null, $content_type = null, $az_proxy_body = null, string $contentType = self::contentTypes['azProxyPost'][0])
    {
        return $this->azProxyPostAsyncWithHttpInfo($method, $url_path, $az_name, $content_type, $az_proxy_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation azProxyPostAsyncWithHttpInfo
     *
     * Proxies request to remote AZ
     *
     * @param  string $method HTTP method to call (required)
     * @param  string $url_path URL path to call on remote cluster (required)
     * @param  string $az_name Availability Zone Name (optional)
     * @param  string $content_type content type for the call (optional)
     * @param  array<string,mixed> $az_proxy_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['azProxyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function azProxyPostAsyncWithHttpInfo($method, $url_path, $az_name = null, $content_type = null, $az_proxy_body = null, string $contentType = self::contentTypes['azProxyPost'][0])
    {
        $returnType = '';
        $request = $this->azProxyPostRequest($method, $url_path, $az_name, $content_type, $az_proxy_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'azProxyPost'
     *
     * @param  string $method HTTP method to call (required)
     * @param  string $url_path URL path to call on remote cluster (required)
     * @param  string $az_name Availability Zone Name (optional)
     * @param  string $content_type content type for the call (optional)
     * @param  array<string,mixed> $az_proxy_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['azProxyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function azProxyPostRequest($method, $url_path, $az_name = null, $content_type = null, $az_proxy_body = null, string $contentType = self::contentTypes['azProxyPost'][0])
    {

        // verify the required parameter 'method' is set
        if ($method === null || (is_array($method) && count($method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $method when calling azProxyPost'
            );
        }

        // verify the required parameter 'url_path' is set
        if ($url_path === null || (is_array($url_path) && count($url_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url_path when calling azProxyPost'
            );
        }





        $resourcePath = '/az_proxy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $az_name,
            'az_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $method,
            'method', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $url_path,
            'url_path', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $content_type,
            'content_type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($az_proxy_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($az_proxy_body));
            } else {
                $httpBody = $az_proxy_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fanoutProxyPost
     *
     * Proxies request to remote cluster
     *
     * @param  string $method HTTP method to call (required)
     * @param  string $url_path URL path to call on remote cluster (required)
     * @param  string $az_name One of the availability zones name of Xi portal. (optional)
     * @param  string $az_physical_uuid One of the availability zones uuid of Xi portal. (optional)
     * @param  string $remote_cluster_uuid Cluster uuid of remote PC or PE cluster. (optional)
     * @param  string $content_type content type for the call (optional)
     * @param  string $kind entity kind e.g. vm, network (optional)
     * @param  string $entity_uuid The UUID of the entity. (optional)
     * @param  string $tenant_uuid The UUID of the tenant. (optional)
     * @param  int $timeout_ms Additional timeout in milliseconds for fanout calls. (optional)
     * @param  array<string,mixed> $fanout_proxy_body fanout_proxy_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fanoutProxyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function fanoutProxyPost($method, $url_path, $az_name = null, $az_physical_uuid = null, $remote_cluster_uuid = null, $content_type = null, $kind = null, $entity_uuid = null, $tenant_uuid = null, $timeout_ms = null, $fanout_proxy_body = null, string $contentType = self::contentTypes['fanoutProxyPost'][0])
    {
        $this->fanoutProxyPostWithHttpInfo($method, $url_path, $az_name, $az_physical_uuid, $remote_cluster_uuid, $content_type, $kind, $entity_uuid, $tenant_uuid, $timeout_ms, $fanout_proxy_body, $contentType);
    }

    /**
     * Operation fanoutProxyPostWithHttpInfo
     *
     * Proxies request to remote cluster
     *
     * @param  string $method HTTP method to call (required)
     * @param  string $url_path URL path to call on remote cluster (required)
     * @param  string $az_name One of the availability zones name of Xi portal. (optional)
     * @param  string $az_physical_uuid One of the availability zones uuid of Xi portal. (optional)
     * @param  string $remote_cluster_uuid Cluster uuid of remote PC or PE cluster. (optional)
     * @param  string $content_type content type for the call (optional)
     * @param  string $kind entity kind e.g. vm, network (optional)
     * @param  string $entity_uuid The UUID of the entity. (optional)
     * @param  string $tenant_uuid The UUID of the tenant. (optional)
     * @param  int $timeout_ms Additional timeout in milliseconds for fanout calls. (optional)
     * @param  array<string,mixed> $fanout_proxy_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fanoutProxyPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function fanoutProxyPostWithHttpInfo($method, $url_path, $az_name = null, $az_physical_uuid = null, $remote_cluster_uuid = null, $content_type = null, $kind = null, $entity_uuid = null, $tenant_uuid = null, $timeout_ms = null, $fanout_proxy_body = null, string $contentType = self::contentTypes['fanoutProxyPost'][0])
    {
        $request = $this->fanoutProxyPostRequest($method, $url_path, $az_name, $az_physical_uuid, $remote_cluster_uuid, $content_type, $kind, $entity_uuid, $tenant_uuid, $timeout_ms, $fanout_proxy_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteConnectionStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fanoutProxyPostAsync
     *
     * Proxies request to remote cluster
     *
     * @param  string $method HTTP method to call (required)
     * @param  string $url_path URL path to call on remote cluster (required)
     * @param  string $az_name One of the availability zones name of Xi portal. (optional)
     * @param  string $az_physical_uuid One of the availability zones uuid of Xi portal. (optional)
     * @param  string $remote_cluster_uuid Cluster uuid of remote PC or PE cluster. (optional)
     * @param  string $content_type content type for the call (optional)
     * @param  string $kind entity kind e.g. vm, network (optional)
     * @param  string $entity_uuid The UUID of the entity. (optional)
     * @param  string $tenant_uuid The UUID of the tenant. (optional)
     * @param  int $timeout_ms Additional timeout in milliseconds for fanout calls. (optional)
     * @param  array<string,mixed> $fanout_proxy_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fanoutProxyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fanoutProxyPostAsync($method, $url_path, $az_name = null, $az_physical_uuid = null, $remote_cluster_uuid = null, $content_type = null, $kind = null, $entity_uuid = null, $tenant_uuid = null, $timeout_ms = null, $fanout_proxy_body = null, string $contentType = self::contentTypes['fanoutProxyPost'][0])
    {
        return $this->fanoutProxyPostAsyncWithHttpInfo($method, $url_path, $az_name, $az_physical_uuid, $remote_cluster_uuid, $content_type, $kind, $entity_uuid, $tenant_uuid, $timeout_ms, $fanout_proxy_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fanoutProxyPostAsyncWithHttpInfo
     *
     * Proxies request to remote cluster
     *
     * @param  string $method HTTP method to call (required)
     * @param  string $url_path URL path to call on remote cluster (required)
     * @param  string $az_name One of the availability zones name of Xi portal. (optional)
     * @param  string $az_physical_uuid One of the availability zones uuid of Xi portal. (optional)
     * @param  string $remote_cluster_uuid Cluster uuid of remote PC or PE cluster. (optional)
     * @param  string $content_type content type for the call (optional)
     * @param  string $kind entity kind e.g. vm, network (optional)
     * @param  string $entity_uuid The UUID of the entity. (optional)
     * @param  string $tenant_uuid The UUID of the tenant. (optional)
     * @param  int $timeout_ms Additional timeout in milliseconds for fanout calls. (optional)
     * @param  array<string,mixed> $fanout_proxy_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fanoutProxyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fanoutProxyPostAsyncWithHttpInfo($method, $url_path, $az_name = null, $az_physical_uuid = null, $remote_cluster_uuid = null, $content_type = null, $kind = null, $entity_uuid = null, $tenant_uuid = null, $timeout_ms = null, $fanout_proxy_body = null, string $contentType = self::contentTypes['fanoutProxyPost'][0])
    {
        $returnType = '';
        $request = $this->fanoutProxyPostRequest($method, $url_path, $az_name, $az_physical_uuid, $remote_cluster_uuid, $content_type, $kind, $entity_uuid, $tenant_uuid, $timeout_ms, $fanout_proxy_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fanoutProxyPost'
     *
     * @param  string $method HTTP method to call (required)
     * @param  string $url_path URL path to call on remote cluster (required)
     * @param  string $az_name One of the availability zones name of Xi portal. (optional)
     * @param  string $az_physical_uuid One of the availability zones uuid of Xi portal. (optional)
     * @param  string $remote_cluster_uuid Cluster uuid of remote PC or PE cluster. (optional)
     * @param  string $content_type content type for the call (optional)
     * @param  string $kind entity kind e.g. vm, network (optional)
     * @param  string $entity_uuid The UUID of the entity. (optional)
     * @param  string $tenant_uuid The UUID of the tenant. (optional)
     * @param  int $timeout_ms Additional timeout in milliseconds for fanout calls. (optional)
     * @param  array<string,mixed> $fanout_proxy_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fanoutProxyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fanoutProxyPostRequest($method, $url_path, $az_name = null, $az_physical_uuid = null, $remote_cluster_uuid = null, $content_type = null, $kind = null, $entity_uuid = null, $tenant_uuid = null, $timeout_ms = null, $fanout_proxy_body = null, string $contentType = self::contentTypes['fanoutProxyPost'][0])
    {

        // verify the required parameter 'method' is set
        if ($method === null || (is_array($method) && count($method) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $method when calling fanoutProxyPost'
            );
        }

        // verify the required parameter 'url_path' is set
        if ($url_path === null || (is_array($url_path) && count($url_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url_path when calling fanoutProxyPost'
            );
        }


        if ($az_physical_uuid !== null && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $az_physical_uuid)) {
            throw new \InvalidArgumentException("invalid value for \"az_physical_uuid\" when calling RemoteConnectionsApi.fanoutProxyPost, must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }
        
        if ($remote_cluster_uuid !== null && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $remote_cluster_uuid)) {
            throw new \InvalidArgumentException("invalid value for \"remote_cluster_uuid\" when calling RemoteConnectionsApi.fanoutProxyPost, must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }
        


        if ($entity_uuid !== null && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $entity_uuid)) {
            throw new \InvalidArgumentException("invalid value for \"entity_uuid\" when calling RemoteConnectionsApi.fanoutProxyPost, must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }
        
        if ($tenant_uuid !== null && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $tenant_uuid)) {
            throw new \InvalidArgumentException("invalid value for \"tenant_uuid\" when calling RemoteConnectionsApi.fanoutProxyPost, must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }
        



        $resourcePath = '/fanout_proxy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $az_name,
            'az_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $az_physical_uuid,
            'az_physical_uuid', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $remote_cluster_uuid,
            'remote_cluster_uuid', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $method,
            'method', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $url_path,
            'url_path', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $content_type,
            'content_type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $kind,
            'kind', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entity_uuid,
            'entity_uuid', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant_uuid,
            'tenant_uuid', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timeout_ms,
            'timeout_ms', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($fanout_proxy_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($fanout_proxy_body));
            } else {
                $httpBody = $fanout_proxy_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteConnectionsListPost
     *
     * Get list of remote connections
     *
     * @param  \OpenAPI\Client\Model\RemoteConnectionListMetadata $get_entities_request A remote connection object (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsListPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoteConnectionListIntentResponse|\OpenAPI\Client\Model\RemoteConnectionStatus
     */
    public function remoteConnectionsListPost($get_entities_request = null, string $contentType = self::contentTypes['remoteConnectionsListPost'][0])
    {
        list($response) = $this->remoteConnectionsListPostWithHttpInfo($get_entities_request, $contentType);
        return $response;
    }

    /**
     * Operation remoteConnectionsListPostWithHttpInfo
     *
     * Get list of remote connections
     *
     * @param  \OpenAPI\Client\Model\RemoteConnectionListMetadata $get_entities_request A remote connection object (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsListPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoteConnectionListIntentResponse|\OpenAPI\Client\Model\RemoteConnectionStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteConnectionsListPostWithHttpInfo($get_entities_request = null, string $contentType = self::contentTypes['remoteConnectionsListPost'][0])
    {
        $request = $this->remoteConnectionsListPostRequest($get_entities_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RemoteConnectionListIntentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteConnectionListIntentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteConnectionListIntentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\RemoteConnectionStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteConnectionStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteConnectionStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoteConnectionListIntentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteConnectionListIntentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteConnectionStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation remoteConnectionsListPostAsync
     *
     * Get list of remote connections
     *
     * @param  \OpenAPI\Client\Model\RemoteConnectionListMetadata $get_entities_request A remote connection object (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteConnectionsListPostAsync($get_entities_request = null, string $contentType = self::contentTypes['remoteConnectionsListPost'][0])
    {
        return $this->remoteConnectionsListPostAsyncWithHttpInfo($get_entities_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation remoteConnectionsListPostAsyncWithHttpInfo
     *
     * Get list of remote connections
     *
     * @param  \OpenAPI\Client\Model\RemoteConnectionListMetadata $get_entities_request A remote connection object (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteConnectionsListPostAsyncWithHttpInfo($get_entities_request = null, string $contentType = self::contentTypes['remoteConnectionsListPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RemoteConnectionListIntentResponse';
        $request = $this->remoteConnectionsListPostRequest($get_entities_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'remoteConnectionsListPost'
     *
     * @param  \OpenAPI\Client\Model\RemoteConnectionListMetadata $get_entities_request A remote connection object (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsListPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteConnectionsListPostRequest($get_entities_request = null, string $contentType = self::contentTypes['remoteConnectionsListPost'][0])
    {



        $resourcePath = '/remote_connections/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_entities_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_entities_request));
            } else {
                $httpBody = $get_entities_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteConnectionsPost
     *
     * Creates a remote connection
     *
     * @param  \OpenAPI\Client\Model\RemoteConnectionIntentInput $body Remote connection details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoteConnectionIntentResponse|\OpenAPI\Client\Model\RemoteConnectionStatus
     */
    public function remoteConnectionsPost($body, string $contentType = self::contentTypes['remoteConnectionsPost'][0])
    {
        list($response) = $this->remoteConnectionsPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation remoteConnectionsPostWithHttpInfo
     *
     * Creates a remote connection
     *
     * @param  \OpenAPI\Client\Model\RemoteConnectionIntentInput $body Remote connection details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoteConnectionIntentResponse|\OpenAPI\Client\Model\RemoteConnectionStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteConnectionsPostWithHttpInfo($body, string $contentType = self::contentTypes['remoteConnectionsPost'][0])
    {
        $request = $this->remoteConnectionsPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\OpenAPI\Client\Model\RemoteConnectionIntentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteConnectionIntentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteConnectionIntentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\RemoteConnectionStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteConnectionStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteConnectionStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoteConnectionIntentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteConnectionIntentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteConnectionStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation remoteConnectionsPostAsync
     *
     * Creates a remote connection
     *
     * @param  \OpenAPI\Client\Model\RemoteConnectionIntentInput $body Remote connection details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteConnectionsPostAsync($body, string $contentType = self::contentTypes['remoteConnectionsPost'][0])
    {
        return $this->remoteConnectionsPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation remoteConnectionsPostAsyncWithHttpInfo
     *
     * Creates a remote connection
     *
     * @param  \OpenAPI\Client\Model\RemoteConnectionIntentInput $body Remote connection details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteConnectionsPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['remoteConnectionsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RemoteConnectionIntentResponse';
        $request = $this->remoteConnectionsPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'remoteConnectionsPost'
     *
     * @param  \OpenAPI\Client\Model\RemoteConnectionIntentInput $body Remote connection details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteConnectionsPostRequest($body, string $contentType = self::contentTypes['remoteConnectionsPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling remoteConnectionsPost'
            );
        }


        $resourcePath = '/remote_connections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteConnectionsUuidDelete
     *
     * Delete an existing remote connection
     *
     * @param  string $uuid The UUID of the entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsUuidDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoteConnectionStatus|\OpenAPI\Client\Model\RemoteConnectionIntentResponse|\OpenAPI\Client\Model\RemoteConnectionStatus
     */
    public function remoteConnectionsUuidDelete($uuid, string $contentType = self::contentTypes['remoteConnectionsUuidDelete'][0])
    {
        list($response) = $this->remoteConnectionsUuidDeleteWithHttpInfo($uuid, $contentType);
        return $response;
    }

    /**
     * Operation remoteConnectionsUuidDeleteWithHttpInfo
     *
     * Delete an existing remote connection
     *
     * @param  string $uuid The UUID of the entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsUuidDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoteConnectionStatus|\OpenAPI\Client\Model\RemoteConnectionIntentResponse|\OpenAPI\Client\Model\RemoteConnectionStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteConnectionsUuidDeleteWithHttpInfo($uuid, string $contentType = self::contentTypes['remoteConnectionsUuidDelete'][0])
    {
        $request = $this->remoteConnectionsUuidDeleteRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\RemoteConnectionStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteConnectionStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteConnectionStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\OpenAPI\Client\Model\RemoteConnectionIntentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteConnectionIntentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteConnectionIntentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\RemoteConnectionStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteConnectionStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteConnectionStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoteConnectionIntentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteConnectionStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteConnectionIntentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteConnectionStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation remoteConnectionsUuidDeleteAsync
     *
     * Delete an existing remote connection
     *
     * @param  string $uuid The UUID of the entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsUuidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteConnectionsUuidDeleteAsync($uuid, string $contentType = self::contentTypes['remoteConnectionsUuidDelete'][0])
    {
        return $this->remoteConnectionsUuidDeleteAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation remoteConnectionsUuidDeleteAsyncWithHttpInfo
     *
     * Delete an existing remote connection
     *
     * @param  string $uuid The UUID of the entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsUuidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteConnectionsUuidDeleteAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['remoteConnectionsUuidDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RemoteConnectionIntentResponse';
        $request = $this->remoteConnectionsUuidDeleteRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'remoteConnectionsUuidDelete'
     *
     * @param  string $uuid The UUID of the entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsUuidDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteConnectionsUuidDeleteRequest($uuid, string $contentType = self::contentTypes['remoteConnectionsUuidDelete'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling remoteConnectionsUuidDelete'
            );
        }
        if (!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $uuid)) {
            throw new \InvalidArgumentException("invalid value for \"uuid\" when calling RemoteConnectionsApi.remoteConnectionsUuidDelete, must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }
        

        $resourcePath = '/remote_connections/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteConnectionsUuidGet
     *
     * Used to fetch remote connection details
     *
     * @param  string $uuid The UUID of the entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsUuidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoteConnectionIntentResponse|\OpenAPI\Client\Model\RemoteConnectionStatus|\OpenAPI\Client\Model\RemoteConnectionStatus
     */
    public function remoteConnectionsUuidGet($uuid, string $contentType = self::contentTypes['remoteConnectionsUuidGet'][0])
    {
        list($response) = $this->remoteConnectionsUuidGetWithHttpInfo($uuid, $contentType);
        return $response;
    }

    /**
     * Operation remoteConnectionsUuidGetWithHttpInfo
     *
     * Used to fetch remote connection details
     *
     * @param  string $uuid The UUID of the entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsUuidGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoteConnectionIntentResponse|\OpenAPI\Client\Model\RemoteConnectionStatus|\OpenAPI\Client\Model\RemoteConnectionStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteConnectionsUuidGetWithHttpInfo($uuid, string $contentType = self::contentTypes['remoteConnectionsUuidGet'][0])
    {
        $request = $this->remoteConnectionsUuidGetRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RemoteConnectionIntentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteConnectionIntentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteConnectionIntentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\RemoteConnectionStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteConnectionStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteConnectionStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\RemoteConnectionStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteConnectionStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteConnectionStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoteConnectionIntentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteConnectionIntentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteConnectionStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteConnectionStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation remoteConnectionsUuidGetAsync
     *
     * Used to fetch remote connection details
     *
     * @param  string $uuid The UUID of the entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteConnectionsUuidGetAsync($uuid, string $contentType = self::contentTypes['remoteConnectionsUuidGet'][0])
    {
        return $this->remoteConnectionsUuidGetAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation remoteConnectionsUuidGetAsyncWithHttpInfo
     *
     * Used to fetch remote connection details
     *
     * @param  string $uuid The UUID of the entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteConnectionsUuidGetAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['remoteConnectionsUuidGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RemoteConnectionIntentResponse';
        $request = $this->remoteConnectionsUuidGetRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'remoteConnectionsUuidGet'
     *
     * @param  string $uuid The UUID of the entity. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteConnectionsUuidGetRequest($uuid, string $contentType = self::contentTypes['remoteConnectionsUuidGet'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling remoteConnectionsUuidGet'
            );
        }
        if (!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $uuid)) {
            throw new \InvalidArgumentException("invalid value for \"uuid\" when calling RemoteConnectionsApi.remoteConnectionsUuidGet, must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }
        

        $resourcePath = '/remote_connections/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteConnectionsUuidPut
     *
     * Used to update remote connection details
     *
     * @param  string $uuid The UUID of the entity. (required)
     * @param  \OpenAPI\Client\Model\RemoteConnectionIntentInput $body Remote connection details (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsUuidPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RemoteConnectionStatus|\OpenAPI\Client\Model\RemoteConnectionIntentResponse|\OpenAPI\Client\Model\RemoteConnectionStatus
     */
    public function remoteConnectionsUuidPut($uuid, $body = null, string $contentType = self::contentTypes['remoteConnectionsUuidPut'][0])
    {
        list($response) = $this->remoteConnectionsUuidPutWithHttpInfo($uuid, $body, $contentType);
        return $response;
    }

    /**
     * Operation remoteConnectionsUuidPutWithHttpInfo
     *
     * Used to update remote connection details
     *
     * @param  string $uuid The UUID of the entity. (required)
     * @param  \OpenAPI\Client\Model\RemoteConnectionIntentInput $body Remote connection details (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsUuidPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RemoteConnectionStatus|\OpenAPI\Client\Model\RemoteConnectionIntentResponse|\OpenAPI\Client\Model\RemoteConnectionStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteConnectionsUuidPutWithHttpInfo($uuid, $body = null, string $contentType = self::contentTypes['remoteConnectionsUuidPut'][0])
    {
        $request = $this->remoteConnectionsUuidPutRequest($uuid, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 404:
                    if ('\OpenAPI\Client\Model\RemoteConnectionStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteConnectionStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteConnectionStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 202:
                    if ('\OpenAPI\Client\Model\RemoteConnectionIntentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteConnectionIntentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteConnectionIntentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\RemoteConnectionStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RemoteConnectionStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RemoteConnectionStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RemoteConnectionIntentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteConnectionStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteConnectionIntentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RemoteConnectionStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation remoteConnectionsUuidPutAsync
     *
     * Used to update remote connection details
     *
     * @param  string $uuid The UUID of the entity. (required)
     * @param  \OpenAPI\Client\Model\RemoteConnectionIntentInput $body Remote connection details (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsUuidPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteConnectionsUuidPutAsync($uuid, $body = null, string $contentType = self::contentTypes['remoteConnectionsUuidPut'][0])
    {
        return $this->remoteConnectionsUuidPutAsyncWithHttpInfo($uuid, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation remoteConnectionsUuidPutAsyncWithHttpInfo
     *
     * Used to update remote connection details
     *
     * @param  string $uuid The UUID of the entity. (required)
     * @param  \OpenAPI\Client\Model\RemoteConnectionIntentInput $body Remote connection details (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsUuidPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteConnectionsUuidPutAsyncWithHttpInfo($uuid, $body = null, string $contentType = self::contentTypes['remoteConnectionsUuidPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RemoteConnectionIntentResponse';
        $request = $this->remoteConnectionsUuidPutRequest($uuid, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'remoteConnectionsUuidPut'
     *
     * @param  string $uuid The UUID of the entity. (required)
     * @param  \OpenAPI\Client\Model\RemoteConnectionIntentInput $body Remote connection details (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteConnectionsUuidPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteConnectionsUuidPutRequest($uuid, $body = null, string $contentType = self::contentTypes['remoteConnectionsUuidPut'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling remoteConnectionsUuidPut'
            );
        }
        if (!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $uuid)) {
            throw new \InvalidArgumentException("invalid value for \"uuid\" when calling RemoteConnectionsApi.remoteConnectionsUuidPut, must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }
        


        $resourcePath = '/remote_connections/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteRpcRequestPost
     *
     * Execute Remote RPC
     *
     * @param  string $service_name Name of the service whose RPC needs to be invoked. (required)
     * @param  int $port Port at which the service is running (required)
     * @param  \OpenAPI\Client\Model\RemoteRpcRequestInput $payload RPC payload. (required)
     * @param  int $timeout_ms timeout in milliseconds. (optional)
     * @param  string $base_url base url for rpc call. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteRpcRequestPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function remoteRpcRequestPost($service_name, $port, $payload, $timeout_ms = null, $base_url = null, string $contentType = self::contentTypes['remoteRpcRequestPost'][0])
    {
        $this->remoteRpcRequestPostWithHttpInfo($service_name, $port, $payload, $timeout_ms, $base_url, $contentType);
    }

    /**
     * Operation remoteRpcRequestPostWithHttpInfo
     *
     * Execute Remote RPC
     *
     * @param  string $service_name Name of the service whose RPC needs to be invoked. (required)
     * @param  int $port Port at which the service is running (required)
     * @param  \OpenAPI\Client\Model\RemoteRpcRequestInput $payload RPC payload. (required)
     * @param  int $timeout_ms timeout in milliseconds. (optional)
     * @param  string $base_url base url for rpc call. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteRpcRequestPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteRpcRequestPostWithHttpInfo($service_name, $port, $payload, $timeout_ms = null, $base_url = null, string $contentType = self::contentTypes['remoteRpcRequestPost'][0])
    {
        $request = $this->remoteRpcRequestPostRequest($service_name, $port, $payload, $timeout_ms, $base_url, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation remoteRpcRequestPostAsync
     *
     * Execute Remote RPC
     *
     * @param  string $service_name Name of the service whose RPC needs to be invoked. (required)
     * @param  int $port Port at which the service is running (required)
     * @param  \OpenAPI\Client\Model\RemoteRpcRequestInput $payload RPC payload. (required)
     * @param  int $timeout_ms timeout in milliseconds. (optional)
     * @param  string $base_url base url for rpc call. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteRpcRequestPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteRpcRequestPostAsync($service_name, $port, $payload, $timeout_ms = null, $base_url = null, string $contentType = self::contentTypes['remoteRpcRequestPost'][0])
    {
        return $this->remoteRpcRequestPostAsyncWithHttpInfo($service_name, $port, $payload, $timeout_ms, $base_url, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation remoteRpcRequestPostAsyncWithHttpInfo
     *
     * Execute Remote RPC
     *
     * @param  string $service_name Name of the service whose RPC needs to be invoked. (required)
     * @param  int $port Port at which the service is running (required)
     * @param  \OpenAPI\Client\Model\RemoteRpcRequestInput $payload RPC payload. (required)
     * @param  int $timeout_ms timeout in milliseconds. (optional)
     * @param  string $base_url base url for rpc call. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteRpcRequestPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteRpcRequestPostAsyncWithHttpInfo($service_name, $port, $payload, $timeout_ms = null, $base_url = null, string $contentType = self::contentTypes['remoteRpcRequestPost'][0])
    {
        $returnType = '';
        $request = $this->remoteRpcRequestPostRequest($service_name, $port, $payload, $timeout_ms, $base_url, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'remoteRpcRequestPost'
     *
     * @param  string $service_name Name of the service whose RPC needs to be invoked. (required)
     * @param  int $port Port at which the service is running (required)
     * @param  \OpenAPI\Client\Model\RemoteRpcRequestInput $payload RPC payload. (required)
     * @param  int $timeout_ms timeout in milliseconds. (optional)
     * @param  string $base_url base url for rpc call. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteRpcRequestPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteRpcRequestPostRequest($service_name, $port, $payload, $timeout_ms = null, $base_url = null, string $contentType = self::contentTypes['remoteRpcRequestPost'][0])
    {

        // verify the required parameter 'service_name' is set
        if ($service_name === null || (is_array($service_name) && count($service_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_name when calling remoteRpcRequestPost'
            );
        }

        // verify the required parameter 'port' is set
        if ($port === null || (is_array($port) && count($port) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $port when calling remoteRpcRequestPost'
            );
        }

        // verify the required parameter 'payload' is set
        if ($payload === null || (is_array($payload) && count($payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payload when calling remoteRpcRequestPost'
            );
        }




        $resourcePath = '/remote_rpc_request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $service_name,
            'service_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $port,
            'port', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timeout_ms,
            'timeout_ms', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $base_url,
            'base_url', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payload));
            } else {
                $httpBody = $payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
