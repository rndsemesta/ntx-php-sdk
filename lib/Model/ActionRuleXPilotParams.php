<?php
/**
 * ActionRuleXPilotParams
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ActionRuleXPilotParams Class Doc Comment
 *
 * @category Class
 * @description Parameters required for XPilot enabled rule
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ActionRuleXPilotParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'action_rule_x_pilot_params';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'metric_name' => 'string',
        'entity_type' => 'string',
        'min_threshold' => 'float',
        'monitor_duration_mins' => 'int',
        'entity_info' => 'string',
        'request_approval_after_each_retry' => 'bool',
        'max_threshold' => 'float',
        'max_retry_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'metric_name' => null,
        'entity_type' => null,
        'min_threshold' => 'double',
        'monitor_duration_mins' => 'int64',
        'entity_info' => null,
        'request_approval_after_each_retry' => null,
        'max_threshold' => 'double',
        'max_retry_count' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'metric_name' => false,
        'entity_type' => false,
        'min_threshold' => false,
        'monitor_duration_mins' => false,
        'entity_info' => false,
        'request_approval_after_each_retry' => false,
        'max_threshold' => false,
        'max_retry_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'metric_name' => 'metric_name',
        'entity_type' => 'entity_type',
        'min_threshold' => 'min_threshold',
        'monitor_duration_mins' => 'monitor_duration_mins',
        'entity_info' => 'entity_info',
        'request_approval_after_each_retry' => 'request_approval_after_each_retry',
        'max_threshold' => 'max_threshold',
        'max_retry_count' => 'max_retry_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'metric_name' => 'setMetricName',
        'entity_type' => 'setEntityType',
        'min_threshold' => 'setMinThreshold',
        'monitor_duration_mins' => 'setMonitorDurationMins',
        'entity_info' => 'setEntityInfo',
        'request_approval_after_each_retry' => 'setRequestApprovalAfterEachRetry',
        'max_threshold' => 'setMaxThreshold',
        'max_retry_count' => 'setMaxRetryCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'metric_name' => 'getMetricName',
        'entity_type' => 'getEntityType',
        'min_threshold' => 'getMinThreshold',
        'monitor_duration_mins' => 'getMonitorDurationMins',
        'entity_info' => 'getEntityInfo',
        'request_approval_after_each_retry' => 'getRequestApprovalAfterEachRetry',
        'max_threshold' => 'getMaxThreshold',
        'max_retry_count' => 'getMaxRetryCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('metric_name', $data ?? [], null);
        $this->setIfExists('entity_type', $data ?? [], null);
        $this->setIfExists('min_threshold', $data ?? [], null);
        $this->setIfExists('monitor_duration_mins', $data ?? [], null);
        $this->setIfExists('entity_info', $data ?? [], null);
        $this->setIfExists('request_approval_after_each_retry', $data ?? [], null);
        $this->setIfExists('max_threshold', $data ?? [], null);
        $this->setIfExists('max_retry_count', $data ?? [], 5);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['metric_name'] === null) {
            $invalidProperties[] = "'metric_name' can't be null";
        }
        if ((mb_strlen($this->container['metric_name']) > 128)) {
            $invalidProperties[] = "invalid value for 'metric_name', the character length must be smaller than or equal to 128.";
        }

        if (!preg_match("/^[^&<>'\/\"]*$/", $this->container['metric_name'])) {
            $invalidProperties[] = "invalid value for 'metric_name', must be conform to the pattern /^[^&<>'\/\"]*$/.";
        }

        if ($this->container['entity_type'] === null) {
            $invalidProperties[] = "'entity_type' can't be null";
        }
        if ((mb_strlen($this->container['entity_type']) > 64)) {
            $invalidProperties[] = "invalid value for 'entity_type', the character length must be smaller than or equal to 64.";
        }

        if (!preg_match("/^[^&<>'\/\"]*$/", $this->container['entity_type'])) {
            $invalidProperties[] = "invalid value for 'entity_type', must be conform to the pattern /^[^&<>'\/\"]*$/.";
        }

        if ($this->container['entity_info'] === null) {
            $invalidProperties[] = "'entity_info' can't be null";
        }
        if ((mb_strlen($this->container['entity_info']) > 256)) {
            $invalidProperties[] = "invalid value for 'entity_info', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets metric_name
     *
     * @return string
     */
    public function getMetricName()
    {
        return $this->container['metric_name'];
    }

    /**
     * Sets metric_name
     *
     * @param string $metric_name The name of the KPI that will be monitored
     *
     * @return self
     */
    public function setMetricName($metric_name)
    {
        if (is_null($metric_name)) {
            throw new \InvalidArgumentException('non-nullable metric_name cannot be null');
        }
        if ((mb_strlen($metric_name) > 128)) {
            throw new \InvalidArgumentException('invalid length for $metric_name when calling ActionRuleXPilotParams., must be smaller than or equal to 128.');
        }
        if ((!preg_match("/^[^&<>'\/\"]*$/", ObjectSerializer::toString($metric_name)))) {
            throw new \InvalidArgumentException("invalid value for \$metric_name when calling ActionRuleXPilotParams., must conform to the pattern /^[^&<>'\/\"]*$/.");
        }

        $this->container['metric_name'] = $metric_name;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string $entity_type The Type of the entity whose KPI will be monitored
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        if (is_null($entity_type)) {
            throw new \InvalidArgumentException('non-nullable entity_type cannot be null');
        }
        if ((mb_strlen($entity_type) > 64)) {
            throw new \InvalidArgumentException('invalid length for $entity_type when calling ActionRuleXPilotParams., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[^&<>'\/\"]*$/", ObjectSerializer::toString($entity_type)))) {
            throw new \InvalidArgumentException("invalid value for \$entity_type when calling ActionRuleXPilotParams., must conform to the pattern /^[^&<>'\/\"]*$/.");
        }

        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets min_threshold
     *
     * @return float|null
     */
    public function getMinThreshold()
    {
        return $this->container['min_threshold'];
    }

    /**
     * Sets min_threshold
     *
     * @param float|null $min_threshold Lower Bound for desired KPI value
     *
     * @return self
     */
    public function setMinThreshold($min_threshold)
    {
        if (is_null($min_threshold)) {
            throw new \InvalidArgumentException('non-nullable min_threshold cannot be null');
        }
        $this->container['min_threshold'] = $min_threshold;

        return $this;
    }

    /**
     * Gets monitor_duration_mins
     *
     * @return int|null
     */
    public function getMonitorDurationMins()
    {
        return $this->container['monitor_duration_mins'];
    }

    /**
     * Sets monitor_duration_mins
     *
     * @param int|null $monitor_duration_mins Duration(minutes) for which the playbook will be monitored
     *
     * @return self
     */
    public function setMonitorDurationMins($monitor_duration_mins)
    {
        if (is_null($monitor_duration_mins)) {
            throw new \InvalidArgumentException('non-nullable monitor_duration_mins cannot be null');
        }
        $this->container['monitor_duration_mins'] = $monitor_duration_mins;

        return $this;
    }

    /**
     * Gets entity_info
     *
     * @return string
     */
    public function getEntityInfo()
    {
        return $this->container['entity_info'];
    }

    /**
     * Sets entity_info
     *
     * @param string $entity_info The Entity Info of the entity whose KPI will be monitored
     *
     * @return self
     */
    public function setEntityInfo($entity_info)
    {
        if (is_null($entity_info)) {
            throw new \InvalidArgumentException('non-nullable entity_info cannot be null');
        }
        if ((mb_strlen($entity_info) > 256)) {
            throw new \InvalidArgumentException('invalid length for $entity_info when calling ActionRuleXPilotParams., must be smaller than or equal to 256.');
        }

        $this->container['entity_info'] = $entity_info;

        return $this;
    }

    /**
     * Gets request_approval_after_each_retry
     *
     * @return bool|null
     */
    public function getRequestApprovalAfterEachRetry()
    {
        return $this->container['request_approval_after_each_retry'];
    }

    /**
     * Sets request_approval_after_each_retry
     *
     * @param bool|null $request_approval_after_each_retry Should XPilot play wait for approval after every retry.
     *
     * @return self
     */
    public function setRequestApprovalAfterEachRetry($request_approval_after_each_retry)
    {
        if (is_null($request_approval_after_each_retry)) {
            throw new \InvalidArgumentException('non-nullable request_approval_after_each_retry cannot be null');
        }
        $this->container['request_approval_after_each_retry'] = $request_approval_after_each_retry;

        return $this;
    }

    /**
     * Gets max_threshold
     *
     * @return float|null
     */
    public function getMaxThreshold()
    {
        return $this->container['max_threshold'];
    }

    /**
     * Sets max_threshold
     *
     * @param float|null $max_threshold Upper Bound for desired KPI value
     *
     * @return self
     */
    public function setMaxThreshold($max_threshold)
    {
        if (is_null($max_threshold)) {
            throw new \InvalidArgumentException('non-nullable max_threshold cannot be null');
        }
        $this->container['max_threshold'] = $max_threshold;

        return $this;
    }

    /**
     * Gets max_retry_count
     *
     * @return int|null
     */
    public function getMaxRetryCount()
    {
        return $this->container['max_retry_count'];
    }

    /**
     * Sets max_retry_count
     *
     * @param int|null $max_retry_count Count of number of times rule can be rerun in case of positive feedback
     *
     * @return self
     */
    public function setMaxRetryCount($max_retry_count)
    {
        if (is_null($max_retry_count)) {
            throw new \InvalidArgumentException('non-nullable max_retry_count cannot be null');
        }
        $this->container['max_retry_count'] = $max_retry_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


