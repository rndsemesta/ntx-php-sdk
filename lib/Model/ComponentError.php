<?php
/**
 * ComponentError
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComponentError Class Doc Comment
 *
 * @category Class
 * @description validation errors in action rule.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComponentError implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'component_error';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'instance_uuid' => 'string',
        'error_object_list' => '\OpenAPI\Client\Model\ErrorMessageObject[]',
        'parameter_error_list' => '\OpenAPI\Client\Model\ParameterError[]',
        'component_type' => 'string',
        'component_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'instance_uuid' => 'UUID',
        'error_object_list' => null,
        'parameter_error_list' => null,
        'component_type' => null,
        'component_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'instance_uuid' => false,
        'error_object_list' => false,
        'parameter_error_list' => false,
        'component_type' => false,
        'component_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'instance_uuid' => 'instance_uuid',
        'error_object_list' => 'error_object_list',
        'parameter_error_list' => 'parameter_error_list',
        'component_type' => 'component_type',
        'component_name' => 'component_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'instance_uuid' => 'setInstanceUuid',
        'error_object_list' => 'setErrorObjectList',
        'parameter_error_list' => 'setParameterErrorList',
        'component_type' => 'setComponentType',
        'component_name' => 'setComponentName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'instance_uuid' => 'getInstanceUuid',
        'error_object_list' => 'getErrorObjectList',
        'parameter_error_list' => 'getParameterErrorList',
        'component_type' => 'getComponentType',
        'component_name' => 'getComponentName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('instance_uuid', $data ?? [], null);
        $this->setIfExists('error_object_list', $data ?? [], null);
        $this->setIfExists('parameter_error_list', $data ?? [], null);
        $this->setIfExists('component_type', $data ?? [], null);
        $this->setIfExists('component_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['instance_uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['instance_uuid'])) {
            $invalidProperties[] = "invalid value for 'instance_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        if (!is_null($this->container['component_type']) && (mb_strlen($this->container['component_type']) > 64)) {
            $invalidProperties[] = "invalid value for 'component_type', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['component_type']) && !preg_match("/^[^&<>'\/\"]*$/", $this->container['component_type'])) {
            $invalidProperties[] = "invalid value for 'component_type', must be conform to the pattern /^[^&<>'\/\"]*$/.";
        }

        if (!is_null($this->container['component_name']) && (mb_strlen($this->container['component_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'component_name', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['component_name']) && !preg_match("/^[^&<>'\/\"]*$/", $this->container['component_name'])) {
            $invalidProperties[] = "invalid value for 'component_name', must be conform to the pattern /^[^&<>'\/\"]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets instance_uuid
     *
     * @return string|null
     */
    public function getInstanceUuid()
    {
        return $this->container['instance_uuid'];
    }

    /**
     * Sets instance_uuid
     *
     * @param string|null $instance_uuid Id to uniquely identify action/trigger in instance list.
     *
     * @return self
     */
    public function setInstanceUuid($instance_uuid)
    {
        if (is_null($instance_uuid)) {
            throw new \InvalidArgumentException('non-nullable instance_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($instance_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$instance_uuid when calling ComponentError., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['instance_uuid'] = $instance_uuid;

        return $this;
    }

    /**
     * Gets error_object_list
     *
     * @return \OpenAPI\Client\Model\ErrorMessageObject[]|null
     */
    public function getErrorObjectList()
    {
        return $this->container['error_object_list'];
    }

    /**
     * Sets error_object_list
     *
     * @param \OpenAPI\Client\Model\ErrorMessageObject[]|null $error_object_list list of error message objects.
     *
     * @return self
     */
    public function setErrorObjectList($error_object_list)
    {
        if (is_null($error_object_list)) {
            throw new \InvalidArgumentException('non-nullable error_object_list cannot be null');
        }
        $this->container['error_object_list'] = $error_object_list;

        return $this;
    }

    /**
     * Gets parameter_error_list
     *
     * @return \OpenAPI\Client\Model\ParameterError[]|null
     */
    public function getParameterErrorList()
    {
        return $this->container['parameter_error_list'];
    }

    /**
     * Sets parameter_error_list
     *
     * @param \OpenAPI\Client\Model\ParameterError[]|null $parameter_error_list list of parameter error messages.
     *
     * @return self
     */
    public function setParameterErrorList($parameter_error_list)
    {
        if (is_null($parameter_error_list)) {
            throw new \InvalidArgumentException('non-nullable parameter_error_list cannot be null');
        }
        $this->container['parameter_error_list'] = $parameter_error_list;

        return $this;
    }

    /**
     * Gets component_type
     *
     * @return string|null
     */
    public function getComponentType()
    {
        return $this->container['component_type'];
    }

    /**
     * Sets component_type
     *
     * @param string|null $component_type component type like action or trigger.
     *
     * @return self
     */
    public function setComponentType($component_type)
    {
        if (is_null($component_type)) {
            throw new \InvalidArgumentException('non-nullable component_type cannot be null');
        }
        if ((mb_strlen($component_type) > 64)) {
            throw new \InvalidArgumentException('invalid length for $component_type when calling ComponentError., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[^&<>'\/\"]*$/", ObjectSerializer::toString($component_type)))) {
            throw new \InvalidArgumentException("invalid value for \$component_type when calling ComponentError., must conform to the pattern /^[^&<>'\/\"]*$/.");
        }

        $this->container['component_type'] = $component_type;

        return $this;
    }

    /**
     * Gets component_name
     *
     * @return string|null
     */
    public function getComponentName()
    {
        return $this->container['component_name'];
    }

    /**
     * Sets component_name
     *
     * @param string|null $component_name name of the component.
     *
     * @return self
     */
    public function setComponentName($component_name)
    {
        if (is_null($component_name)) {
            throw new \InvalidArgumentException('non-nullable component_name cannot be null');
        }
        if ((mb_strlen($component_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $component_name when calling ComponentError., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[^&<>'\/\"]*$/", ObjectSerializer::toString($component_name)))) {
            throw new \InvalidArgumentException("invalid value for \$component_name when calling ComponentError., must conform to the pattern /^[^&<>'\/\"]*$/.");
        }

        $this->container['component_name'] = $component_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


