<?php
/**
 * AppResourcesDefStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AppResourcesDefStatus Class Doc Comment
 *
 * @category Class
 * @description Status for Application.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AppResourcesDefStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'app_resources_def_status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'app_state' => 'string',
        'action_list' => '\OpenAPI\Client\Model\AppActionResponse[]',
        'source_marketplace_name' => 'string',
        'credential_list' => '\OpenAPI\Client\Model\AppCredentialResponse[]',
        'app_blueprint_config_reference' => '\OpenAPI\Client\Model\BlueprintReference',
        'app_blueprint_reference' => '\OpenAPI\Client\Model\BlueprintReference',
        'app_profile_config_reference' => '\OpenAPI\Client\Model\AppProfileReference',
        'source_marketplace_version' => 'string',
        'client_attrs' => 'array<string,mixed>',
        'dependency_list' => '\OpenAPI\Client\Model\BlueprintDependencyList[]',
        'variable_list' => '\OpenAPI\Client\Model\AppVariableResponse[]',
        'deployment_list' => '\OpenAPI\Client\Model\AppDeploymentResponse[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'app_state' => null,
        'action_list' => null,
        'source_marketplace_name' => null,
        'credential_list' => null,
        'app_blueprint_config_reference' => null,
        'app_blueprint_reference' => null,
        'app_profile_config_reference' => null,
        'source_marketplace_version' => null,
        'client_attrs' => null,
        'dependency_list' => null,
        'variable_list' => null,
        'deployment_list' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'app_state' => false,
        'action_list' => false,
        'source_marketplace_name' => false,
        'credential_list' => false,
        'app_blueprint_config_reference' => false,
        'app_blueprint_reference' => false,
        'app_profile_config_reference' => false,
        'source_marketplace_version' => false,
        'client_attrs' => false,
        'dependency_list' => false,
        'variable_list' => false,
        'deployment_list' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_state' => 'app_state',
        'action_list' => 'action_list',
        'source_marketplace_name' => 'source_marketplace_name',
        'credential_list' => 'credential_list',
        'app_blueprint_config_reference' => 'app_blueprint_config_reference',
        'app_blueprint_reference' => 'app_blueprint_reference',
        'app_profile_config_reference' => 'app_profile_config_reference',
        'source_marketplace_version' => 'source_marketplace_version',
        'client_attrs' => 'client_attrs',
        'dependency_list' => 'dependency_list',
        'variable_list' => 'variable_list',
        'deployment_list' => 'deployment_list'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_state' => 'setAppState',
        'action_list' => 'setActionList',
        'source_marketplace_name' => 'setSourceMarketplaceName',
        'credential_list' => 'setCredentialList',
        'app_blueprint_config_reference' => 'setAppBlueprintConfigReference',
        'app_blueprint_reference' => 'setAppBlueprintReference',
        'app_profile_config_reference' => 'setAppProfileConfigReference',
        'source_marketplace_version' => 'setSourceMarketplaceVersion',
        'client_attrs' => 'setClientAttrs',
        'dependency_list' => 'setDependencyList',
        'variable_list' => 'setVariableList',
        'deployment_list' => 'setDeploymentList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_state' => 'getAppState',
        'action_list' => 'getActionList',
        'source_marketplace_name' => 'getSourceMarketplaceName',
        'credential_list' => 'getCredentialList',
        'app_blueprint_config_reference' => 'getAppBlueprintConfigReference',
        'app_blueprint_reference' => 'getAppBlueprintReference',
        'app_profile_config_reference' => 'getAppProfileConfigReference',
        'source_marketplace_version' => 'getSourceMarketplaceVersion',
        'client_attrs' => 'getClientAttrs',
        'dependency_list' => 'getDependencyList',
        'variable_list' => 'getVariableList',
        'deployment_list' => 'getDeploymentList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('app_state', $data ?? [], null);
        $this->setIfExists('action_list', $data ?? [], null);
        $this->setIfExists('source_marketplace_name', $data ?? [], null);
        $this->setIfExists('credential_list', $data ?? [], null);
        $this->setIfExists('app_blueprint_config_reference', $data ?? [], null);
        $this->setIfExists('app_blueprint_reference', $data ?? [], null);
        $this->setIfExists('app_profile_config_reference', $data ?? [], null);
        $this->setIfExists('source_marketplace_version', $data ?? [], null);
        $this->setIfExists('client_attrs', $data ?? [], null);
        $this->setIfExists('dependency_list', $data ?? [], null);
        $this->setIfExists('variable_list', $data ?? [], null);
        $this->setIfExists('deployment_list', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['app_state'] === null) {
            $invalidProperties[] = "'app_state' can't be null";
        }
        if ($this->container['action_list'] === null) {
            $invalidProperties[] = "'action_list' can't be null";
        }
        if ($this->container['credential_list'] === null) {
            $invalidProperties[] = "'credential_list' can't be null";
        }
        if ($this->container['app_blueprint_reference'] === null) {
            $invalidProperties[] = "'app_blueprint_reference' can't be null";
        }
        if ($this->container['variable_list'] === null) {
            $invalidProperties[] = "'variable_list' can't be null";
        }
        if ($this->container['deployment_list'] === null) {
            $invalidProperties[] = "'deployment_list' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_state
     *
     * @return string
     */
    public function getAppState()
    {
        return $this->container['app_state'];
    }

    /**
     * Sets app_state
     *
     * @param string $app_state app_state
     *
     * @return self
     */
    public function setAppState($app_state)
    {
        if (is_null($app_state)) {
            throw new \InvalidArgumentException('non-nullable app_state cannot be null');
        }
        $this->container['app_state'] = $app_state;

        return $this;
    }

    /**
     * Gets action_list
     *
     * @return \OpenAPI\Client\Model\AppActionResponse[]
     */
    public function getActionList()
    {
        return $this->container['action_list'];
    }

    /**
     * Sets action_list
     *
     * @param \OpenAPI\Client\Model\AppActionResponse[] $action_list List of Action for Application.
     *
     * @return self
     */
    public function setActionList($action_list)
    {
        if (is_null($action_list)) {
            throw new \InvalidArgumentException('non-nullable action_list cannot be null');
        }
        $this->container['action_list'] = $action_list;

        return $this;
    }

    /**
     * Gets source_marketplace_name
     *
     * @return string|null
     */
    public function getSourceMarketplaceName()
    {
        return $this->container['source_marketplace_name'];
    }

    /**
     * Sets source_marketplace_name
     *
     * @param string|null $source_marketplace_name Name of the marketplace item used to create this app
     *
     * @return self
     */
    public function setSourceMarketplaceName($source_marketplace_name)
    {
        if (is_null($source_marketplace_name)) {
            throw new \InvalidArgumentException('non-nullable source_marketplace_name cannot be null');
        }
        $this->container['source_marketplace_name'] = $source_marketplace_name;

        return $this;
    }

    /**
     * Gets credential_list
     *
     * @return \OpenAPI\Client\Model\AppCredentialResponse[]
     */
    public function getCredentialList()
    {
        return $this->container['credential_list'];
    }

    /**
     * Sets credential_list
     *
     * @param \OpenAPI\Client\Model\AppCredentialResponse[] $credential_list Credential list for appspec
     *
     * @return self
     */
    public function setCredentialList($credential_list)
    {
        if (is_null($credential_list)) {
            throw new \InvalidArgumentException('non-nullable credential_list cannot be null');
        }
        $this->container['credential_list'] = $credential_list;

        return $this;
    }

    /**
     * Gets app_blueprint_config_reference
     *
     * @return \OpenAPI\Client\Model\BlueprintReference|null
     */
    public function getAppBlueprintConfigReference()
    {
        return $this->container['app_blueprint_config_reference'];
    }

    /**
     * Sets app_blueprint_config_reference
     *
     * @param \OpenAPI\Client\Model\BlueprintReference|null $app_blueprint_config_reference app_blueprint_config_reference
     *
     * @return self
     */
    public function setAppBlueprintConfigReference($app_blueprint_config_reference)
    {
        if (is_null($app_blueprint_config_reference)) {
            throw new \InvalidArgumentException('non-nullable app_blueprint_config_reference cannot be null');
        }
        $this->container['app_blueprint_config_reference'] = $app_blueprint_config_reference;

        return $this;
    }

    /**
     * Gets app_blueprint_reference
     *
     * @return \OpenAPI\Client\Model\BlueprintReference
     */
    public function getAppBlueprintReference()
    {
        return $this->container['app_blueprint_reference'];
    }

    /**
     * Sets app_blueprint_reference
     *
     * @param \OpenAPI\Client\Model\BlueprintReference $app_blueprint_reference app_blueprint_reference
     *
     * @return self
     */
    public function setAppBlueprintReference($app_blueprint_reference)
    {
        if (is_null($app_blueprint_reference)) {
            throw new \InvalidArgumentException('non-nullable app_blueprint_reference cannot be null');
        }
        $this->container['app_blueprint_reference'] = $app_blueprint_reference;

        return $this;
    }

    /**
     * Gets app_profile_config_reference
     *
     * @return \OpenAPI\Client\Model\AppProfileReference|null
     */
    public function getAppProfileConfigReference()
    {
        return $this->container['app_profile_config_reference'];
    }

    /**
     * Sets app_profile_config_reference
     *
     * @param \OpenAPI\Client\Model\AppProfileReference|null $app_profile_config_reference app_profile_config_reference
     *
     * @return self
     */
    public function setAppProfileConfigReference($app_profile_config_reference)
    {
        if (is_null($app_profile_config_reference)) {
            throw new \InvalidArgumentException('non-nullable app_profile_config_reference cannot be null');
        }
        $this->container['app_profile_config_reference'] = $app_profile_config_reference;

        return $this;
    }

    /**
     * Gets source_marketplace_version
     *
     * @return string|null
     */
    public function getSourceMarketplaceVersion()
    {
        return $this->container['source_marketplace_version'];
    }

    /**
     * Sets source_marketplace_version
     *
     * @param string|null $source_marketplace_version Version of the marketplace item used to create this app
     *
     * @return self
     */
    public function setSourceMarketplaceVersion($source_marketplace_version)
    {
        if (is_null($source_marketplace_version)) {
            throw new \InvalidArgumentException('non-nullable source_marketplace_version cannot be null');
        }
        $this->container['source_marketplace_version'] = $source_marketplace_version;

        return $this;
    }

    /**
     * Gets client_attrs
     *
     * @return array<string,mixed>|null
     */
    public function getClientAttrs()
    {
        return $this->container['client_attrs'];
    }

    /**
     * Sets client_attrs
     *
     * @param array<string,mixed>|null $client_attrs Data needed for clients.
     *
     * @return self
     */
    public function setClientAttrs($client_attrs)
    {
        if (is_null($client_attrs)) {
            throw new \InvalidArgumentException('non-nullable client_attrs cannot be null');
        }
        $this->container['client_attrs'] = $client_attrs;

        return $this;
    }

    /**
     * Gets dependency_list
     *
     * @return \OpenAPI\Client\Model\BlueprintDependencyList[]|null
     */
    public function getDependencyList()
    {
        return $this->container['dependency_list'];
    }

    /**
     * Sets dependency_list
     *
     * @param \OpenAPI\Client\Model\BlueprintDependencyList[]|null $dependency_list Dependencies or edges between callrunbook tasks formed by usage of macros in child tasks
     *
     * @return self
     */
    public function setDependencyList($dependency_list)
    {
        if (is_null($dependency_list)) {
            throw new \InvalidArgumentException('non-nullable dependency_list cannot be null');
        }
        $this->container['dependency_list'] = $dependency_list;

        return $this;
    }

    /**
     * Gets variable_list
     *
     * @return \OpenAPI\Client\Model\AppVariableResponse[]
     */
    public function getVariableList()
    {
        return $this->container['variable_list'];
    }

    /**
     * Sets variable_list
     *
     * @param \OpenAPI\Client\Model\AppVariableResponse[] $variable_list List of variables
     *
     * @return self
     */
    public function setVariableList($variable_list)
    {
        if (is_null($variable_list)) {
            throw new \InvalidArgumentException('non-nullable variable_list cannot be null');
        }
        $this->container['variable_list'] = $variable_list;

        return $this;
    }

    /**
     * Gets deployment_list
     *
     * @return \OpenAPI\Client\Model\AppDeploymentResponse[]
     */
    public function getDeploymentList()
    {
        return $this->container['deployment_list'];
    }

    /**
     * Sets deployment_list
     *
     * @param \OpenAPI\Client\Model\AppDeploymentResponse[] $deployment_list List of Deployment Spec for Application.
     *
     * @return self
     */
    public function setDeploymentList($deployment_list)
    {
        if (is_null($deployment_list)) {
            throw new \InvalidArgumentException('non-nullable deployment_list cannot be null');
        }
        $this->container['deployment_list'] = $deployment_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


