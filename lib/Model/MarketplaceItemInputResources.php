<?php
/**
 * MarketplaceItemInputResources
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MarketplaceItemInputResources Class Doc Comment
 *
 * @category Class
 * @description Description of the marketplace item
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MarketplaceItemInputResources implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'marketplace_item_input_resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'app_blueprint_template' => '\OpenAPI\Client\Model\MarketplaceItemInputResourcesAppBlueprintTemplate',
        'app_state' => 'string',
        'author' => 'string',
        'project_reference_list' => '\OpenAPI\Client\Model\ProjectReference[]',
        'icon_reference_list' => '\OpenAPI\Client\Model\MarketplaceIcon[]',
        'app_group_uuid' => 'string',
        'change_log' => 'string',
        'version' => 'string',
        'app_attribute_list' => 'string[]',
        'app_source' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'app_blueprint_template' => null,
        'app_state' => null,
        'author' => null,
        'project_reference_list' => null,
        'icon_reference_list' => null,
        'app_group_uuid' => 'UUID',
        'change_log' => null,
        'version' => null,
        'app_attribute_list' => null,
        'app_source' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'app_blueprint_template' => false,
        'app_state' => false,
        'author' => false,
        'project_reference_list' => false,
        'icon_reference_list' => false,
        'app_group_uuid' => false,
        'change_log' => false,
        'version' => false,
        'app_attribute_list' => false,
        'app_source' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_blueprint_template' => 'app_blueprint_template',
        'app_state' => 'app_state',
        'author' => 'author',
        'project_reference_list' => 'project_reference_list',
        'icon_reference_list' => 'icon_reference_list',
        'app_group_uuid' => 'app_group_uuid',
        'change_log' => 'change_log',
        'version' => 'version',
        'app_attribute_list' => 'app_attribute_list',
        'app_source' => 'app_source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_blueprint_template' => 'setAppBlueprintTemplate',
        'app_state' => 'setAppState',
        'author' => 'setAuthor',
        'project_reference_list' => 'setProjectReferenceList',
        'icon_reference_list' => 'setIconReferenceList',
        'app_group_uuid' => 'setAppGroupUuid',
        'change_log' => 'setChangeLog',
        'version' => 'setVersion',
        'app_attribute_list' => 'setAppAttributeList',
        'app_source' => 'setAppSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_blueprint_template' => 'getAppBlueprintTemplate',
        'app_state' => 'getAppState',
        'author' => 'getAuthor',
        'project_reference_list' => 'getProjectReferenceList',
        'icon_reference_list' => 'getIconReferenceList',
        'app_group_uuid' => 'getAppGroupUuid',
        'change_log' => 'getChangeLog',
        'version' => 'getVersion',
        'app_attribute_list' => 'getAppAttributeList',
        'app_source' => 'getAppSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('app_blueprint_template', $data ?? [], null);
        $this->setIfExists('app_state', $data ?? [], 'PENDING');
        $this->setIfExists('author', $data ?? [], null);
        $this->setIfExists('project_reference_list', $data ?? [], null);
        $this->setIfExists('icon_reference_list', $data ?? [], null);
        $this->setIfExists('app_group_uuid', $data ?? [], null);
        $this->setIfExists('change_log', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('app_attribute_list', $data ?? [], null);
        $this->setIfExists('app_source', $data ?? [], 'LOCAL');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['app_blueprint_template'] === null) {
            $invalidProperties[] = "'app_blueprint_template' can't be null";
        }
        if ($this->container['author'] === null) {
            $invalidProperties[] = "'author' can't be null";
        }
        if ((mb_strlen($this->container['author']) > 64)) {
            $invalidProperties[] = "invalid value for 'author', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['app_group_uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['app_group_uuid'])) {
            $invalidProperties[] = "invalid value for 'app_group_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        if (!is_null($this->container['change_log']) && (mb_strlen($this->container['change_log']) > 5000)) {
            $invalidProperties[] = "invalid value for 'change_log', the character length must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['version']) && (mb_strlen($this->container['version']) > 64)) {
            $invalidProperties[] = "invalid value for 'version', the character length must be smaller than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_blueprint_template
     *
     * @return \OpenAPI\Client\Model\MarketplaceItemInputResourcesAppBlueprintTemplate
     */
    public function getAppBlueprintTemplate()
    {
        return $this->container['app_blueprint_template'];
    }

    /**
     * Sets app_blueprint_template
     *
     * @param \OpenAPI\Client\Model\MarketplaceItemInputResourcesAppBlueprintTemplate $app_blueprint_template app_blueprint_template
     *
     * @return self
     */
    public function setAppBlueprintTemplate($app_blueprint_template)
    {
        if (is_null($app_blueprint_template)) {
            throw new \InvalidArgumentException('non-nullable app_blueprint_template cannot be null');
        }
        $this->container['app_blueprint_template'] = $app_blueprint_template;

        return $this;
    }

    /**
     * Gets app_state
     *
     * @return string|null
     */
    public function getAppState()
    {
        return $this->container['app_state'];
    }

    /**
     * Sets app_state
     *
     * @param string|null $app_state State indicating if marketplace item is approved, pending or rejected
     *
     * @return self
     */
    public function setAppState($app_state)
    {
        if (is_null($app_state)) {
            throw new \InvalidArgumentException('non-nullable app_state cannot be null');
        }
        $this->container['app_state'] = $app_state;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author Person or company which developed the app
     *
     * @return self
     */
    public function setAuthor($author)
    {
        if (is_null($author)) {
            throw new \InvalidArgumentException('non-nullable author cannot be null');
        }
        if ((mb_strlen($author) > 64)) {
            throw new \InvalidArgumentException('invalid length for $author when calling MarketplaceItemInputResources., must be smaller than or equal to 64.');
        }

        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets project_reference_list
     *
     * @return \OpenAPI\Client\Model\ProjectReference[]|null
     */
    public function getProjectReferenceList()
    {
        return $this->container['project_reference_list'];
    }

    /**
     * Sets project_reference_list
     *
     * @param \OpenAPI\Client\Model\ProjectReference[]|null $project_reference_list The projects this marketplace item has been assigned to
     *
     * @return self
     */
    public function setProjectReferenceList($project_reference_list)
    {
        if (is_null($project_reference_list)) {
            throw new \InvalidArgumentException('non-nullable project_reference_list cannot be null');
        }
        $this->container['project_reference_list'] = $project_reference_list;

        return $this;
    }

    /**
     * Gets icon_reference_list
     *
     * @return \OpenAPI\Client\Model\MarketplaceIcon[]|null
     */
    public function getIconReferenceList()
    {
        return $this->container['icon_reference_list'];
    }

    /**
     * Sets icon_reference_list
     *
     * @param \OpenAPI\Client\Model\MarketplaceIcon[]|null $icon_reference_list icon_reference_list
     *
     * @return self
     */
    public function setIconReferenceList($icon_reference_list)
    {
        if (is_null($icon_reference_list)) {
            throw new \InvalidArgumentException('non-nullable icon_reference_list cannot be null');
        }
        $this->container['icon_reference_list'] = $icon_reference_list;

        return $this;
    }

    /**
     * Gets app_group_uuid
     *
     * @return string|null
     */
    public function getAppGroupUuid()
    {
        return $this->container['app_group_uuid'];
    }

    /**
     * Sets app_group_uuid
     *
     * @param string|null $app_group_uuid UUID for the group of MPIs which are versions of the same App
     *
     * @return self
     */
    public function setAppGroupUuid($app_group_uuid)
    {
        if (is_null($app_group_uuid)) {
            throw new \InvalidArgumentException('non-nullable app_group_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($app_group_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$app_group_uuid when calling MarketplaceItemInputResources., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['app_group_uuid'] = $app_group_uuid;

        return $this;
    }

    /**
     * Gets change_log
     *
     * @return string|null
     */
    public function getChangeLog()
    {
        return $this->container['change_log'];
    }

    /**
     * Sets change_log
     *
     * @param string|null $change_log Change log for this version of the app
     *
     * @return self
     */
    public function setChangeLog($change_log)
    {
        if (is_null($change_log)) {
            throw new \InvalidArgumentException('non-nullable change_log cannot be null');
        }
        if ((mb_strlen($change_log) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $change_log when calling MarketplaceItemInputResources., must be smaller than or equal to 5000.');
        }

        $this->container['change_log'] = $change_log;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Indicates version of the App that this marketplace item represents
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        if ((mb_strlen($version) > 64)) {
            throw new \InvalidArgumentException('invalid length for $version when calling MarketplaceItemInputResources., must be smaller than or equal to 64.');
        }

        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets app_attribute_list
     *
     * @return string[]|null
     */
    public function getAppAttributeList()
    {
        return $this->container['app_attribute_list'];
    }

    /**
     * Sets app_attribute_list
     *
     * @param string[]|null $app_attribute_list Attributes of this app.
     *
     * @return self
     */
    public function setAppAttributeList($app_attribute_list)
    {
        if (is_null($app_attribute_list)) {
            throw new \InvalidArgumentException('non-nullable app_attribute_list cannot be null');
        }
        $this->container['app_attribute_list'] = $app_attribute_list;

        return $this;
    }

    /**
     * Gets app_source
     *
     * @return string|null
     */
    public function getAppSource()
    {
        return $this->container['app_source'];
    }

    /**
     * Sets app_source
     *
     * @param string|null $app_source Indicates whether the app is Global(Marketplace item) or Local(User created)
     *
     * @return self
     */
    public function setAppSource($app_source)
    {
        if (is_null($app_source)) {
            throw new \InvalidArgumentException('non-nullable app_source cannot be null');
        }
        $this->container['app_source'] = $app_source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


