<?php
/**
 * VolumeGroupResourcesOutput
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VolumeGroupResourcesOutput Class Doc Comment
 *
 * @category Class
 * @description Volume group resources.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VolumeGroupResourcesOutput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'volume_group_resources_output';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'flash_mode' => 'string',
        'iscsi_target_name' => 'string',
        'enabled_authentications' => 'string',
        'attachment_list' => '\OpenAPI\Client\Model\AttachmentReferenceOutput[]',
        'created_by' => 'string',
        'parent_reference' => '\OpenAPI\Client\Model\Reference',
        'sharing_status' => 'string',
        'disk_list' => '\OpenAPI\Client\Model\VolumeDiskResourceOutput[]',
        'size_bytes' => 'int',
        'usage_type' => 'string',
        'load_balance_vm_attachments' => 'bool',
        'is_hidden' => 'bool',
        'size_mib' => 'int',
        'iscsi_target_prefix' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'flash_mode' => null,
        'iscsi_target_name' => null,
        'enabled_authentications' => null,
        'attachment_list' => null,
        'created_by' => null,
        'parent_reference' => null,
        'sharing_status' => null,
        'disk_list' => null,
        'size_bytes' => 'int64',
        'usage_type' => null,
        'load_balance_vm_attachments' => null,
        'is_hidden' => null,
        'size_mib' => 'int64',
        'iscsi_target_prefix' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'flash_mode' => false,
        'iscsi_target_name' => false,
        'enabled_authentications' => false,
        'attachment_list' => false,
        'created_by' => false,
        'parent_reference' => false,
        'sharing_status' => false,
        'disk_list' => false,
        'size_bytes' => false,
        'usage_type' => false,
        'load_balance_vm_attachments' => false,
        'is_hidden' => false,
        'size_mib' => false,
        'iscsi_target_prefix' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'flash_mode' => 'flash_mode',
        'iscsi_target_name' => 'iscsi_target_name',
        'enabled_authentications' => 'enabled_authentications',
        'attachment_list' => 'attachment_list',
        'created_by' => 'created_by',
        'parent_reference' => 'parent_reference',
        'sharing_status' => 'sharing_status',
        'disk_list' => 'disk_list',
        'size_bytes' => 'size_bytes',
        'usage_type' => 'usage_type',
        'load_balance_vm_attachments' => 'load_balance_vm_attachments',
        'is_hidden' => 'is_hidden',
        'size_mib' => 'size_mib',
        'iscsi_target_prefix' => 'iscsi_target_prefix'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'flash_mode' => 'setFlashMode',
        'iscsi_target_name' => 'setIscsiTargetName',
        'enabled_authentications' => 'setEnabledAuthentications',
        'attachment_list' => 'setAttachmentList',
        'created_by' => 'setCreatedBy',
        'parent_reference' => 'setParentReference',
        'sharing_status' => 'setSharingStatus',
        'disk_list' => 'setDiskList',
        'size_bytes' => 'setSizeBytes',
        'usage_type' => 'setUsageType',
        'load_balance_vm_attachments' => 'setLoadBalanceVmAttachments',
        'is_hidden' => 'setIsHidden',
        'size_mib' => 'setSizeMib',
        'iscsi_target_prefix' => 'setIscsiTargetPrefix'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'flash_mode' => 'getFlashMode',
        'iscsi_target_name' => 'getIscsiTargetName',
        'enabled_authentications' => 'getEnabledAuthentications',
        'attachment_list' => 'getAttachmentList',
        'created_by' => 'getCreatedBy',
        'parent_reference' => 'getParentReference',
        'sharing_status' => 'getSharingStatus',
        'disk_list' => 'getDiskList',
        'size_bytes' => 'getSizeBytes',
        'usage_type' => 'getUsageType',
        'load_balance_vm_attachments' => 'getLoadBalanceVmAttachments',
        'is_hidden' => 'getIsHidden',
        'size_mib' => 'getSizeMib',
        'iscsi_target_prefix' => 'getIscsiTargetPrefix'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('flash_mode', $data ?? [], null);
        $this->setIfExists('iscsi_target_name', $data ?? [], null);
        $this->setIfExists('enabled_authentications', $data ?? [], null);
        $this->setIfExists('attachment_list', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('parent_reference', $data ?? [], null);
        $this->setIfExists('sharing_status', $data ?? [], null);
        $this->setIfExists('disk_list', $data ?? [], null);
        $this->setIfExists('size_bytes', $data ?? [], null);
        $this->setIfExists('usage_type', $data ?? [], null);
        $this->setIfExists('load_balance_vm_attachments', $data ?? [], null);
        $this->setIfExists('is_hidden', $data ?? [], null);
        $this->setIfExists('size_mib', $data ?? [], null);
        $this->setIfExists('iscsi_target_prefix', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets flash_mode
     *
     * @return string|null
     */
    public function getFlashMode()
    {
        return $this->container['flash_mode'];
    }

    /**
     * Sets flash_mode
     *
     * @param string|null $flash_mode Flash Mode, if enabled all volume disks of the VG will be pinned to SSD tier.
     *
     * @return self
     */
    public function setFlashMode($flash_mode)
    {
        if (is_null($flash_mode)) {
            throw new \InvalidArgumentException('non-nullable flash_mode cannot be null');
        }
        $this->container['flash_mode'] = $flash_mode;

        return $this;
    }

    /**
     * Gets iscsi_target_name
     *
     * @return string|null
     */
    public function getIscsiTargetName()
    {
        return $this->container['iscsi_target_name'];
    }

    /**
     * Sets iscsi_target_name
     *
     * @param string|null $iscsi_target_name iSCSI target full name
     *
     * @return self
     */
    public function setIscsiTargetName($iscsi_target_name)
    {
        if (is_null($iscsi_target_name)) {
            throw new \InvalidArgumentException('non-nullable iscsi_target_name cannot be null');
        }
        $this->container['iscsi_target_name'] = $iscsi_target_name;

        return $this;
    }

    /**
     * Gets enabled_authentications
     *
     * @return string|null
     */
    public function getEnabledAuthentications()
    {
        return $this->container['enabled_authentications'];
    }

    /**
     * Sets enabled_authentications
     *
     * @param string|null $enabled_authentications Which authentication is enabled for VG.
     *
     * @return self
     */
    public function setEnabledAuthentications($enabled_authentications)
    {
        if (is_null($enabled_authentications)) {
            throw new \InvalidArgumentException('non-nullable enabled_authentications cannot be null');
        }
        $this->container['enabled_authentications'] = $enabled_authentications;

        return $this;
    }

    /**
     * Gets attachment_list
     *
     * @return \OpenAPI\Client\Model\AttachmentReferenceOutput[]|null
     */
    public function getAttachmentList()
    {
        return $this->container['attachment_list'];
    }

    /**
     * Sets attachment_list
     *
     * @param \OpenAPI\Client\Model\AttachmentReferenceOutput[]|null $attachment_list VMs attached to volume group.
     *
     * @return self
     */
    public function setAttachmentList($attachment_list)
    {
        if (is_null($attachment_list)) {
            throw new \InvalidArgumentException('non-nullable attachment_list cannot be null');
        }
        $this->container['attachment_list'] = $attachment_list;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by Service/user who created this Volume Group.
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets parent_reference
     *
     * @return \OpenAPI\Client\Model\Reference|null
     */
    public function getParentReference()
    {
        return $this->container['parent_reference'];
    }

    /**
     * Sets parent_reference
     *
     * @param \OpenAPI\Client\Model\Reference|null $parent_reference parent_reference
     *
     * @return self
     */
    public function setParentReference($parent_reference)
    {
        if (is_null($parent_reference)) {
            throw new \InvalidArgumentException('non-nullable parent_reference cannot be null');
        }
        $this->container['parent_reference'] = $parent_reference;

        return $this;
    }

    /**
     * Gets sharing_status
     *
     * @return string|null
     */
    public function getSharingStatus()
    {
        return $this->container['sharing_status'];
    }

    /**
     * Sets sharing_status
     *
     * @param string|null $sharing_status Whether the volume group can be shared across multiple iSCSI initiators.
     *
     * @return self
     */
    public function setSharingStatus($sharing_status)
    {
        if (is_null($sharing_status)) {
            throw new \InvalidArgumentException('non-nullable sharing_status cannot be null');
        }
        $this->container['sharing_status'] = $sharing_status;

        return $this;
    }

    /**
     * Gets disk_list
     *
     * @return \OpenAPI\Client\Model\VolumeDiskResourceOutput[]|null
     */
    public function getDiskList()
    {
        return $this->container['disk_list'];
    }

    /**
     * Sets disk_list
     *
     * @param \OpenAPI\Client\Model\VolumeDiskResourceOutput[]|null $disk_list Volume group disk specification.
     *
     * @return self
     */
    public function setDiskList($disk_list)
    {
        if (is_null($disk_list)) {
            throw new \InvalidArgumentException('non-nullable disk_list cannot be null');
        }
        $this->container['disk_list'] = $disk_list;

        return $this;
    }

    /**
     * Gets size_bytes
     *
     * @return int|null
     */
    public function getSizeBytes()
    {
        return $this->container['size_bytes'];
    }

    /**
     * Sets size_bytes
     *
     * @param int|null $size_bytes The total size of the Volume Group in bytes
     *
     * @return self
     */
    public function setSizeBytes($size_bytes)
    {
        if (is_null($size_bytes)) {
            throw new \InvalidArgumentException('non-nullable size_bytes cannot be null');
        }
        $this->container['size_bytes'] = $size_bytes;

        return $this;
    }

    /**
     * Gets usage_type
     *
     * @return string|null
     */
    public function getUsageType()
    {
        return $this->container['usage_type'];
    }

    /**
     * Sets usage_type
     *
     * @param string|null $usage_type Expected usage type for the volume group.
     *
     * @return self
     */
    public function setUsageType($usage_type)
    {
        if (is_null($usage_type)) {
            throw new \InvalidArgumentException('non-nullable usage_type cannot be null');
        }
        $this->container['usage_type'] = $usage_type;

        return $this;
    }

    /**
     * Gets load_balance_vm_attachments
     *
     * @return bool|null
     */
    public function getLoadBalanceVmAttachments()
    {
        return $this->container['load_balance_vm_attachments'];
    }

    /**
     * Sets load_balance_vm_attachments
     *
     * @param bool|null $load_balance_vm_attachments Whether volume group load balancing is enabled.
     *
     * @return self
     */
    public function setLoadBalanceVmAttachments($load_balance_vm_attachments)
    {
        if (is_null($load_balance_vm_attachments)) {
            throw new \InvalidArgumentException('non-nullable load_balance_vm_attachments cannot be null');
        }
        $this->container['load_balance_vm_attachments'] = $load_balance_vm_attachments;

        return $this;
    }

    /**
     * Gets is_hidden
     *
     * @return bool|null
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     *
     * @param bool|null $is_hidden Whether the VG is meant to be hidden or not.
     *
     * @return self
     */
    public function setIsHidden($is_hidden)
    {
        if (is_null($is_hidden)) {
            throw new \InvalidArgumentException('non-nullable is_hidden cannot be null');
        }
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets size_mib
     *
     * @return int|null
     */
    public function getSizeMib()
    {
        return $this->container['size_mib'];
    }

    /**
     * Sets size_mib
     *
     * @param int|null $size_mib The total size of the Volume Group in mib
     *
     * @return self
     */
    public function setSizeMib($size_mib)
    {
        if (is_null($size_mib)) {
            throw new \InvalidArgumentException('non-nullable size_mib cannot be null');
        }
        $this->container['size_mib'] = $size_mib;

        return $this;
    }

    /**
     * Gets iscsi_target_prefix
     *
     * @return string|null
     */
    public function getIscsiTargetPrefix()
    {
        return $this->container['iscsi_target_prefix'];
    }

    /**
     * Sets iscsi_target_prefix
     *
     * @param string|null $iscsi_target_prefix iSCSI target prefix-name.
     *
     * @return self
     */
    public function setIscsiTargetPrefix($iscsi_target_prefix)
    {
        if (is_null($iscsi_target_prefix)) {
            throw new \InvalidArgumentException('non-nullable iscsi_target_prefix cannot be null');
        }
        $this->container['iscsi_target_prefix'] = $iscsi_target_prefix;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


