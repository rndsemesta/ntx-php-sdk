<?php
/**
 * ProjectResources
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProjectResources Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProjectResources implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Project_Resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'resource_domain' => '\OpenAPI\Client\Model\ResourceDomainSpec',
        'account_reference_list' => '\OpenAPI\Client\Model\AccountReference[]',
        'environment_reference_list' => '\OpenAPI\Client\Model\EnvironmentReference[]',
        'default_subnet_reference' => '\OpenAPI\Client\Model\SubnetReference',
        'user_reference_list' => '\OpenAPI\Client\Model\UserReference[]',
        'tunnel_reference_list' => '\OpenAPI\Client\Model\TunnelReference[]',
        'external_user_group_reference_list' => '\OpenAPI\Client\Model\UserGroupReference[]',
        'cluster_reference_list' => '\OpenAPI\Client\Model\ClusterReference[]',
        'subnet_reference_list' => '\OpenAPI\Client\Model\SubnetReference[]',
        'vpc_reference_list' => '\OpenAPI\Client\Model\VpcReference[]',
        'external_network_list' => '\OpenAPI\Client\Model\ExternalNetwork[]',
        'default_environment_reference' => '\OpenAPI\Client\Model\EnvironmentReference'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'resource_domain' => null,
        'account_reference_list' => null,
        'environment_reference_list' => null,
        'default_subnet_reference' => null,
        'user_reference_list' => null,
        'tunnel_reference_list' => null,
        'external_user_group_reference_list' => null,
        'cluster_reference_list' => null,
        'subnet_reference_list' => null,
        'vpc_reference_list' => null,
        'external_network_list' => null,
        'default_environment_reference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'resource_domain' => false,
        'account_reference_list' => false,
        'environment_reference_list' => false,
        'default_subnet_reference' => false,
        'user_reference_list' => false,
        'tunnel_reference_list' => false,
        'external_user_group_reference_list' => false,
        'cluster_reference_list' => false,
        'subnet_reference_list' => false,
        'vpc_reference_list' => false,
        'external_network_list' => false,
        'default_environment_reference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'resource_domain' => 'resource_domain',
        'account_reference_list' => 'account_reference_list',
        'environment_reference_list' => 'environment_reference_list',
        'default_subnet_reference' => 'default_subnet_reference',
        'user_reference_list' => 'user_reference_list',
        'tunnel_reference_list' => 'tunnel_reference_list',
        'external_user_group_reference_list' => 'external_user_group_reference_list',
        'cluster_reference_list' => 'cluster_reference_list',
        'subnet_reference_list' => 'subnet_reference_list',
        'vpc_reference_list' => 'vpc_reference_list',
        'external_network_list' => 'external_network_list',
        'default_environment_reference' => 'default_environment_reference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'resource_domain' => 'setResourceDomain',
        'account_reference_list' => 'setAccountReferenceList',
        'environment_reference_list' => 'setEnvironmentReferenceList',
        'default_subnet_reference' => 'setDefaultSubnetReference',
        'user_reference_list' => 'setUserReferenceList',
        'tunnel_reference_list' => 'setTunnelReferenceList',
        'external_user_group_reference_list' => 'setExternalUserGroupReferenceList',
        'cluster_reference_list' => 'setClusterReferenceList',
        'subnet_reference_list' => 'setSubnetReferenceList',
        'vpc_reference_list' => 'setVpcReferenceList',
        'external_network_list' => 'setExternalNetworkList',
        'default_environment_reference' => 'setDefaultEnvironmentReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'resource_domain' => 'getResourceDomain',
        'account_reference_list' => 'getAccountReferenceList',
        'environment_reference_list' => 'getEnvironmentReferenceList',
        'default_subnet_reference' => 'getDefaultSubnetReference',
        'user_reference_list' => 'getUserReferenceList',
        'tunnel_reference_list' => 'getTunnelReferenceList',
        'external_user_group_reference_list' => 'getExternalUserGroupReferenceList',
        'cluster_reference_list' => 'getClusterReferenceList',
        'subnet_reference_list' => 'getSubnetReferenceList',
        'vpc_reference_list' => 'getVpcReferenceList',
        'external_network_list' => 'getExternalNetworkList',
        'default_environment_reference' => 'getDefaultEnvironmentReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('resource_domain', $data ?? [], null);
        $this->setIfExists('account_reference_list', $data ?? [], null);
        $this->setIfExists('environment_reference_list', $data ?? [], null);
        $this->setIfExists('default_subnet_reference', $data ?? [], null);
        $this->setIfExists('user_reference_list', $data ?? [], null);
        $this->setIfExists('tunnel_reference_list', $data ?? [], null);
        $this->setIfExists('external_user_group_reference_list', $data ?? [], null);
        $this->setIfExists('cluster_reference_list', $data ?? [], null);
        $this->setIfExists('subnet_reference_list', $data ?? [], null);
        $this->setIfExists('vpc_reference_list', $data ?? [], null);
        $this->setIfExists('external_network_list', $data ?? [], null);
        $this->setIfExists('default_environment_reference', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets resource_domain
     *
     * @return \OpenAPI\Client\Model\ResourceDomainSpec|null
     */
    public function getResourceDomain()
    {
        return $this->container['resource_domain'];
    }

    /**
     * Sets resource_domain
     *
     * @param \OpenAPI\Client\Model\ResourceDomainSpec|null $resource_domain resource_domain
     *
     * @return self
     */
    public function setResourceDomain($resource_domain)
    {
        if (is_null($resource_domain)) {
            throw new \InvalidArgumentException('non-nullable resource_domain cannot be null');
        }
        $this->container['resource_domain'] = $resource_domain;

        return $this;
    }

    /**
     * Gets account_reference_list
     *
     * @return \OpenAPI\Client\Model\AccountReference[]|null
     */
    public function getAccountReferenceList()
    {
        return $this->container['account_reference_list'];
    }

    /**
     * Sets account_reference_list
     *
     * @param \OpenAPI\Client\Model\AccountReference[]|null $account_reference_list List of accounts associated with the project.
     *
     * @return self
     */
    public function setAccountReferenceList($account_reference_list)
    {
        if (is_null($account_reference_list)) {
            throw new \InvalidArgumentException('non-nullable account_reference_list cannot be null');
        }
        $this->container['account_reference_list'] = $account_reference_list;

        return $this;
    }

    /**
     * Gets environment_reference_list
     *
     * @return \OpenAPI\Client\Model\EnvironmentReference[]|null
     */
    public function getEnvironmentReferenceList()
    {
        return $this->container['environment_reference_list'];
    }

    /**
     * Sets environment_reference_list
     *
     * @param \OpenAPI\Client\Model\EnvironmentReference[]|null $environment_reference_list List of environments associated with the project.
     *
     * @return self
     */
    public function setEnvironmentReferenceList($environment_reference_list)
    {
        if (is_null($environment_reference_list)) {
            throw new \InvalidArgumentException('non-nullable environment_reference_list cannot be null');
        }
        $this->container['environment_reference_list'] = $environment_reference_list;

        return $this;
    }

    /**
     * Gets default_subnet_reference
     *
     * @return \OpenAPI\Client\Model\SubnetReference|null
     */
    public function getDefaultSubnetReference()
    {
        return $this->container['default_subnet_reference'];
    }

    /**
     * Sets default_subnet_reference
     *
     * @param \OpenAPI\Client\Model\SubnetReference|null $default_subnet_reference default_subnet_reference
     *
     * @return self
     */
    public function setDefaultSubnetReference($default_subnet_reference)
    {
        if (is_null($default_subnet_reference)) {
            throw new \InvalidArgumentException('non-nullable default_subnet_reference cannot be null');
        }
        $this->container['default_subnet_reference'] = $default_subnet_reference;

        return $this;
    }

    /**
     * Gets user_reference_list
     *
     * @return \OpenAPI\Client\Model\UserReference[]|null
     */
    public function getUserReferenceList()
    {
        return $this->container['user_reference_list'];
    }

    /**
     * Sets user_reference_list
     *
     * @param \OpenAPI\Client\Model\UserReference[]|null $user_reference_list List of users in the project.
     *
     * @return self
     */
    public function setUserReferenceList($user_reference_list)
    {
        if (is_null($user_reference_list)) {
            throw new \InvalidArgumentException('non-nullable user_reference_list cannot be null');
        }
        $this->container['user_reference_list'] = $user_reference_list;

        return $this;
    }

    /**
     * Gets tunnel_reference_list
     *
     * @return \OpenAPI\Client\Model\TunnelReference[]|null
     */
    public function getTunnelReferenceList()
    {
        return $this->container['tunnel_reference_list'];
    }

    /**
     * Sets tunnel_reference_list
     *
     * @param \OpenAPI\Client\Model\TunnelReference[]|null $tunnel_reference_list List of tunnels associated with the project.
     *
     * @return self
     */
    public function setTunnelReferenceList($tunnel_reference_list)
    {
        if (is_null($tunnel_reference_list)) {
            throw new \InvalidArgumentException('non-nullable tunnel_reference_list cannot be null');
        }
        $this->container['tunnel_reference_list'] = $tunnel_reference_list;

        return $this;
    }

    /**
     * Gets external_user_group_reference_list
     *
     * @return \OpenAPI\Client\Model\UserGroupReference[]|null
     */
    public function getExternalUserGroupReferenceList()
    {
        return $this->container['external_user_group_reference_list'];
    }

    /**
     * Sets external_user_group_reference_list
     *
     * @param \OpenAPI\Client\Model\UserGroupReference[]|null $external_user_group_reference_list List of directory service user groups. These groups are not managed by Nutanix.
     *
     * @return self
     */
    public function setExternalUserGroupReferenceList($external_user_group_reference_list)
    {
        if (is_null($external_user_group_reference_list)) {
            throw new \InvalidArgumentException('non-nullable external_user_group_reference_list cannot be null');
        }
        $this->container['external_user_group_reference_list'] = $external_user_group_reference_list;

        return $this;
    }

    /**
     * Gets cluster_reference_list
     *
     * @return \OpenAPI\Client\Model\ClusterReference[]|null
     */
    public function getClusterReferenceList()
    {
        return $this->container['cluster_reference_list'];
    }

    /**
     * Sets cluster_reference_list
     *
     * @param \OpenAPI\Client\Model\ClusterReference[]|null $cluster_reference_list List of clusters associated with the project.
     *
     * @return self
     */
    public function setClusterReferenceList($cluster_reference_list)
    {
        if (is_null($cluster_reference_list)) {
            throw new \InvalidArgumentException('non-nullable cluster_reference_list cannot be null');
        }
        $this->container['cluster_reference_list'] = $cluster_reference_list;

        return $this;
    }

    /**
     * Gets subnet_reference_list
     *
     * @return \OpenAPI\Client\Model\SubnetReference[]|null
     */
    public function getSubnetReferenceList()
    {
        return $this->container['subnet_reference_list'];
    }

    /**
     * Sets subnet_reference_list
     *
     * @param \OpenAPI\Client\Model\SubnetReference[]|null $subnet_reference_list List of subnets for the project.
     *
     * @return self
     */
    public function setSubnetReferenceList($subnet_reference_list)
    {
        if (is_null($subnet_reference_list)) {
            throw new \InvalidArgumentException('non-nullable subnet_reference_list cannot be null');
        }
        $this->container['subnet_reference_list'] = $subnet_reference_list;

        return $this;
    }

    /**
     * Gets vpc_reference_list
     *
     * @return \OpenAPI\Client\Model\VpcReference[]|null
     */
    public function getVpcReferenceList()
    {
        return $this->container['vpc_reference_list'];
    }

    /**
     * Sets vpc_reference_list
     *
     * @param \OpenAPI\Client\Model\VpcReference[]|null $vpc_reference_list List of VPCs associated with the project.
     *
     * @return self
     */
    public function setVpcReferenceList($vpc_reference_list)
    {
        if (is_null($vpc_reference_list)) {
            throw new \InvalidArgumentException('non-nullable vpc_reference_list cannot be null');
        }
        $this->container['vpc_reference_list'] = $vpc_reference_list;

        return $this;
    }

    /**
     * Gets external_network_list
     *
     * @return \OpenAPI\Client\Model\ExternalNetwork[]|null
     */
    public function getExternalNetworkList()
    {
        return $this->container['external_network_list'];
    }

    /**
     * Sets external_network_list
     *
     * @param \OpenAPI\Client\Model\ExternalNetwork[]|null $external_network_list List of external networks associated with the project.
     *
     * @return self
     */
    public function setExternalNetworkList($external_network_list)
    {
        if (is_null($external_network_list)) {
            throw new \InvalidArgumentException('non-nullable external_network_list cannot be null');
        }
        $this->container['external_network_list'] = $external_network_list;

        return $this;
    }

    /**
     * Gets default_environment_reference
     *
     * @return \OpenAPI\Client\Model\EnvironmentReference|null
     */
    public function getDefaultEnvironmentReference()
    {
        return $this->container['default_environment_reference'];
    }

    /**
     * Sets default_environment_reference
     *
     * @param \OpenAPI\Client\Model\EnvironmentReference|null $default_environment_reference default_environment_reference
     *
     * @return self
     */
    public function setDefaultEnvironmentReference($default_environment_reference)
    {
        if (is_null($default_environment_reference)) {
            throw new \InvalidArgumentException('non-nullable default_environment_reference cannot be null');
        }
        $this->container['default_environment_reference'] = $default_environment_reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


