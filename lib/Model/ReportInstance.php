<?php
/**
 * ReportInstance
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ReportInstance Class Doc Comment
 *
 * @category Class
 * @description Report instance resources.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReportInstance implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Report_Instance_';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'recipient_list' => '\OpenAPI\Client\Model\Recipient[]',
        'data_start_time' => '\DateTime',
        'generation_format' => 'string[]',
        'recipient_format' => 'string[]',
        'save_instance' => 'bool',
        'data_end_time' => '\DateTime',
        'timezone' => 'string',
        'runtime_key_values' => 'array<string,string>',
        'report_config_reference' => '\OpenAPI\Client\Model\ReportConfigReference'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'recipient_list' => null,
        'data_start_time' => 'date-time',
        'generation_format' => null,
        'recipient_format' => null,
        'save_instance' => null,
        'data_end_time' => 'date-time',
        'timezone' => null,
        'runtime_key_values' => null,
        'report_config_reference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'recipient_list' => false,
        'data_start_time' => false,
        'generation_format' => false,
        'recipient_format' => false,
        'save_instance' => false,
        'data_end_time' => false,
        'timezone' => false,
        'runtime_key_values' => false,
        'report_config_reference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'recipient_list' => 'recipient_list',
        'data_start_time' => 'data_start_time',
        'generation_format' => 'generation_format',
        'recipient_format' => 'recipient_format',
        'save_instance' => 'save_instance',
        'data_end_time' => 'data_end_time',
        'timezone' => 'timezone',
        'runtime_key_values' => 'runtime_key_values',
        'report_config_reference' => 'report_config_reference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'recipient_list' => 'setRecipientList',
        'data_start_time' => 'setDataStartTime',
        'generation_format' => 'setGenerationFormat',
        'recipient_format' => 'setRecipientFormat',
        'save_instance' => 'setSaveInstance',
        'data_end_time' => 'setDataEndTime',
        'timezone' => 'setTimezone',
        'runtime_key_values' => 'setRuntimeKeyValues',
        'report_config_reference' => 'setReportConfigReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'recipient_list' => 'getRecipientList',
        'data_start_time' => 'getDataStartTime',
        'generation_format' => 'getGenerationFormat',
        'recipient_format' => 'getRecipientFormat',
        'save_instance' => 'getSaveInstance',
        'data_end_time' => 'getDataEndTime',
        'timezone' => 'getTimezone',
        'runtime_key_values' => 'getRuntimeKeyValues',
        'report_config_reference' => 'getReportConfigReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('recipient_list', $data ?? [], null);
        $this->setIfExists('data_start_time', $data ?? [], null);
        $this->setIfExists('generation_format', $data ?? [], null);
        $this->setIfExists('recipient_format', $data ?? [], null);
        $this->setIfExists('save_instance', $data ?? [], null);
        $this->setIfExists('data_end_time', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('runtime_key_values', $data ?? [], null);
        $this->setIfExists('report_config_reference', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 1000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['recipient_list']) && (count($this->container['recipient_list']) > 100)) {
            $invalidProperties[] = "invalid value for 'recipient_list', number of items must be less than or equal to 100.";
        }

        if ($this->container['report_config_reference'] === null) {
            $invalidProperties[] = "'report_config_reference' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the report. This will be part of generated report.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ReportInstance., must be smaller than or equal to 1000.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets recipient_list
     *
     * @return \OpenAPI\Client\Model\Recipient[]|null
     */
    public function getRecipientList()
    {
        return $this->container['recipient_list'];
    }

    /**
     * Sets recipient_list
     *
     * @param \OpenAPI\Client\Model\Recipient[]|null $recipient_list Recipients in addition to specified on the report config.
     *
     * @return self
     */
    public function setRecipientList($recipient_list)
    {
        if (is_null($recipient_list)) {
            throw new \InvalidArgumentException('non-nullable recipient_list cannot be null');
        }

        if ((count($recipient_list) > 100)) {
            throw new \InvalidArgumentException('invalid value for $recipient_list when calling ReportInstance., number of items must be less than or equal to 100.');
        }
        $this->container['recipient_list'] = $recipient_list;

        return $this;
    }

    /**
     * Gets data_start_time
     *
     * @return \DateTime|null
     */
    public function getDataStartTime()
    {
        return $this->container['data_start_time'];
    }

    /**
     * Sets data_start_time
     *
     * @param \DateTime|null $data_start_time UTC date and time in \"%Y-%m-%d %H:%M:%S\" format for data collection start point.
     *
     * @return self
     */
    public function setDataStartTime($data_start_time)
    {
        if (is_null($data_start_time)) {
            throw new \InvalidArgumentException('non-nullable data_start_time cannot be null');
        }
        $this->container['data_start_time'] = $data_start_time;

        return $this;
    }

    /**
     * Gets generation_format
     *
     * @return string[]|null
     */
    public function getGenerationFormat()
    {
        return $this->container['generation_format'];
    }

    /**
     * Sets generation_format
     *
     * @param string[]|null $generation_format List specifying the formats in which report is to be created.
     *
     * @return self
     */
    public function setGenerationFormat($generation_format)
    {
        if (is_null($generation_format)) {
            throw new \InvalidArgumentException('non-nullable generation_format cannot be null');
        }
        $this->container['generation_format'] = $generation_format;

        return $this;
    }

    /**
     * Gets recipient_format
     *
     * @return string[]|null
     */
    public function getRecipientFormat()
    {
        return $this->container['recipient_format'];
    }

    /**
     * Sets recipient_format
     *
     * @param string[]|null $recipient_format List specifying the formats in which report is to be sent.
     *
     * @return self
     */
    public function setRecipientFormat($recipient_format)
    {
        if (is_null($recipient_format)) {
            throw new \InvalidArgumentException('non-nullable recipient_format cannot be null');
        }
        $this->container['recipient_format'] = $recipient_format;

        return $this;
    }

    /**
     * Gets save_instance
     *
     * @return bool|null
     */
    public function getSaveInstance()
    {
        return $this->container['save_instance'];
    }

    /**
     * Sets save_instance
     *
     * @param bool|null $save_instance Generated instance saved or not.
     *
     * @return self
     */
    public function setSaveInstance($save_instance)
    {
        if (is_null($save_instance)) {
            throw new \InvalidArgumentException('non-nullable save_instance cannot be null');
        }
        $this->container['save_instance'] = $save_instance;

        return $this;
    }

    /**
     * Gets data_end_time
     *
     * @return \DateTime|null
     */
    public function getDataEndTime()
    {
        return $this->container['data_end_time'];
    }

    /**
     * Sets data_end_time
     *
     * @param \DateTime|null $data_end_time UTC date and time in \"%Y-%m-%d %H:%M:%S\" format for data collection end point.
     *
     * @return self
     */
    public function setDataEndTime($data_end_time)
    {
        if (is_null($data_end_time)) {
            throw new \InvalidArgumentException('non-nullable data_end_time cannot be null');
        }
        $this->container['data_end_time'] = $data_end_time;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone Timezone in which report is to be generated. This is the list supported by pytz.all_timezones. For more info, check http://pytz.sourceforge.net
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets runtime_key_values
     *
     * @return array<string,string>|null
     */
    public function getRuntimeKeyValues()
    {
        return $this->container['runtime_key_values'];
    }

    /**
     * Sets runtime_key_values
     *
     * @param array<string,string>|null $runtime_key_values Generic key value pair used for custom attributes.
     *
     * @return self
     */
    public function setRuntimeKeyValues($runtime_key_values)
    {
        if (is_null($runtime_key_values)) {
            throw new \InvalidArgumentException('non-nullable runtime_key_values cannot be null');
        }
        $this->container['runtime_key_values'] = $runtime_key_values;

        return $this;
    }

    /**
     * Gets report_config_reference
     *
     * @return \OpenAPI\Client\Model\ReportConfigReference
     */
    public function getReportConfigReference()
    {
        return $this->container['report_config_reference'];
    }

    /**
     * Sets report_config_reference
     *
     * @param \OpenAPI\Client\Model\ReportConfigReference $report_config_reference report_config_reference
     *
     * @return self
     */
    public function setReportConfigReference($report_config_reference)
    {
        if (is_null($report_config_reference)) {
            throw new \InvalidArgumentException('non-nullable report_config_reference cannot be null');
        }
        $this->container['report_config_reference'] = $report_config_reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


