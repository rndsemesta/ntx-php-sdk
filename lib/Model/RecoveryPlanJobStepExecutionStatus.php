<?php
/**
 * RecoveryPlanJobStepExecutionStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RecoveryPlanJobStepExecutionStatus Class Doc Comment
 *
 * @category Class
 * @description A step executes an action and can have sub-steps required to perfom the action. Each step has its own UUID, parent UUID and status of the action it is/was performing.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecoveryPlanJobStepExecutionStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'recovery_plan_job_step_execution_status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'error_detail' => 'string',
        'any_entity_reference_list' => '\OpenAPI\Client\Model\Reference[]',
        'start_time' => '\DateTime',
        'recovered_entity_info_list' => '\OpenAPI\Client\Model\RecoveredEntityInformation[]',
        'percentage_complete' => 'int',
        'step_sequence_number' => 'int',
        'end_time' => '\DateTime',
        'operation_type' => 'string',
        'parent_step_uuid' => 'string',
        'message' => 'string',
        'error_code' => 'string',
        'step_uuid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'error_detail' => null,
        'any_entity_reference_list' => null,
        'start_time' => 'date-time',
        'recovered_entity_info_list' => null,
        'percentage_complete' => 'int32',
        'step_sequence_number' => 'int64',
        'end_time' => 'date-time',
        'operation_type' => null,
        'parent_step_uuid' => 'UUID',
        'message' => null,
        'error_code' => null,
        'step_uuid' => 'UUID'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'status' => false,
        'error_detail' => false,
        'any_entity_reference_list' => false,
        'start_time' => false,
        'recovered_entity_info_list' => false,
        'percentage_complete' => false,
        'step_sequence_number' => false,
        'end_time' => false,
        'operation_type' => false,
        'parent_step_uuid' => false,
        'message' => false,
        'error_code' => false,
        'step_uuid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'error_detail' => 'error_detail',
        'any_entity_reference_list' => 'any_entity_reference_list',
        'start_time' => 'start_time',
        'recovered_entity_info_list' => 'recovered_entity_info_list',
        'percentage_complete' => 'percentage_complete',
        'step_sequence_number' => 'step_sequence_number',
        'end_time' => 'end_time',
        'operation_type' => 'operation_type',
        'parent_step_uuid' => 'parent_step_uuid',
        'message' => 'message',
        'error_code' => 'error_code',
        'step_uuid' => 'step_uuid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'error_detail' => 'setErrorDetail',
        'any_entity_reference_list' => 'setAnyEntityReferenceList',
        'start_time' => 'setStartTime',
        'recovered_entity_info_list' => 'setRecoveredEntityInfoList',
        'percentage_complete' => 'setPercentageComplete',
        'step_sequence_number' => 'setStepSequenceNumber',
        'end_time' => 'setEndTime',
        'operation_type' => 'setOperationType',
        'parent_step_uuid' => 'setParentStepUuid',
        'message' => 'setMessage',
        'error_code' => 'setErrorCode',
        'step_uuid' => 'setStepUuid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'error_detail' => 'getErrorDetail',
        'any_entity_reference_list' => 'getAnyEntityReferenceList',
        'start_time' => 'getStartTime',
        'recovered_entity_info_list' => 'getRecoveredEntityInfoList',
        'percentage_complete' => 'getPercentageComplete',
        'step_sequence_number' => 'getStepSequenceNumber',
        'end_time' => 'getEndTime',
        'operation_type' => 'getOperationType',
        'parent_step_uuid' => 'getParentStepUuid',
        'message' => 'getMessage',
        'error_code' => 'getErrorCode',
        'step_uuid' => 'getStepUuid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('error_detail', $data ?? [], null);
        $this->setIfExists('any_entity_reference_list', $data ?? [], null);
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('recovered_entity_info_list', $data ?? [], null);
        $this->setIfExists('percentage_complete', $data ?? [], null);
        $this->setIfExists('step_sequence_number', $data ?? [], null);
        $this->setIfExists('end_time', $data ?? [], null);
        $this->setIfExists('operation_type', $data ?? [], null);
        $this->setIfExists('parent_step_uuid', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('error_code', $data ?? [], null);
        $this->setIfExists('step_uuid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['operation_type'] === null) {
            $invalidProperties[] = "'operation_type' can't be null";
        }
        if (!is_null($this->container['parent_step_uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['parent_step_uuid'])) {
            $invalidProperties[] = "invalid value for 'parent_step_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        if ($this->container['step_uuid'] === null) {
            $invalidProperties[] = "'step_uuid' can't be null";
        }
        if (!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['step_uuid'])) {
            $invalidProperties[] = "invalid value for 'step_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of this step.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets error_detail
     *
     * @return string|null
     */
    public function getErrorDetail()
    {
        return $this->container['error_detail'];
    }

    /**
     * Sets error_detail
     *
     * @param string|null $error_detail The error detail for the step failure.
     *
     * @return self
     */
    public function setErrorDetail($error_detail)
    {
        if (is_null($error_detail)) {
            throw new \InvalidArgumentException('non-nullable error_detail cannot be null');
        }
        $this->container['error_detail'] = $error_detail;

        return $this;
    }

    /**
     * Gets any_entity_reference_list
     *
     * @return \OpenAPI\Client\Model\Reference[]|null
     */
    public function getAnyEntityReferenceList()
    {
        return $this->container['any_entity_reference_list'];
    }

    /**
     * Sets any_entity_reference_list
     *
     * @param \OpenAPI\Client\Model\Reference[]|null $any_entity_reference_list Reference to the list of the entities on which the step is performing action.
     *
     * @return self
     */
    public function setAnyEntityReferenceList($any_entity_reference_list)
    {
        if (is_null($any_entity_reference_list)) {
            throw new \InvalidArgumentException('non-nullable any_entity_reference_list cannot be null');
        }
        $this->container['any_entity_reference_list'] = $any_entity_reference_list;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime|null $start_time Time when this step started.
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            throw new \InvalidArgumentException('non-nullable start_time cannot be null');
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets recovered_entity_info_list
     *
     * @return \OpenAPI\Client\Model\RecoveredEntityInformation[]|null
     */
    public function getRecoveredEntityInfoList()
    {
        return $this->container['recovered_entity_info_list'];
    }

    /**
     * Sets recovered_entity_info_list
     *
     * @param \OpenAPI\Client\Model\RecoveredEntityInformation[]|null $recovered_entity_info_list List containing the details about the recovered entities.
     *
     * @return self
     */
    public function setRecoveredEntityInfoList($recovered_entity_info_list)
    {
        if (is_null($recovered_entity_info_list)) {
            throw new \InvalidArgumentException('non-nullable recovered_entity_info_list cannot be null');
        }
        $this->container['recovered_entity_info_list'] = $recovered_entity_info_list;

        return $this;
    }

    /**
     * Gets percentage_complete
     *
     * @return int|null
     */
    public function getPercentageComplete()
    {
        return $this->container['percentage_complete'];
    }

    /**
     * Sets percentage_complete
     *
     * @param int|null $percentage_complete Percentage of step completed.
     *
     * @return self
     */
    public function setPercentageComplete($percentage_complete)
    {
        if (is_null($percentage_complete)) {
            throw new \InvalidArgumentException('non-nullable percentage_complete cannot be null');
        }
        $this->container['percentage_complete'] = $percentage_complete;

        return $this;
    }

    /**
     * Gets step_sequence_number
     *
     * @return int|null
     */
    public function getStepSequenceNumber()
    {
        return $this->container['step_sequence_number'];
    }

    /**
     * Sets step_sequence_number
     *
     * @param int|null $step_sequence_number Sequence number of the step among its siblings. This can be used for ordering the sub-steps for a step.
     *
     * @return self
     */
    public function setStepSequenceNumber($step_sequence_number)
    {
        if (is_null($step_sequence_number)) {
            throw new \InvalidArgumentException('non-nullable step_sequence_number cannot be null');
        }
        $this->container['step_sequence_number'] = $step_sequence_number;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime|null $end_time Time when this step ended.
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        if (is_null($end_time)) {
            throw new \InvalidArgumentException('non-nullable end_time cannot be null');
        }
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets operation_type
     *
     * @return string
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     *
     * @param string $operation_type Type of operation being performed.
     *
     * @return self
     */
    public function setOperationType($operation_type)
    {
        if (is_null($operation_type)) {
            throw new \InvalidArgumentException('non-nullable operation_type cannot be null');
        }
        $this->container['operation_type'] = $operation_type;

        return $this;
    }

    /**
     * Gets parent_step_uuid
     *
     * @return string|null
     */
    public function getParentStepUuid()
    {
        return $this->container['parent_step_uuid'];
    }

    /**
     * Sets parent_step_uuid
     *
     * @param string|null $parent_step_uuid UUID of the parent step.
     *
     * @return self
     */
    public function setParentStepUuid($parent_step_uuid)
    {
        if (is_null($parent_step_uuid)) {
            throw new \InvalidArgumentException('non-nullable parent_step_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($parent_step_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$parent_step_uuid when calling RecoveryPlanJobStepExecutionStatus., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['parent_step_uuid'] = $parent_step_uuid;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message User readable message for the action being done for the step.
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return string|null
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string|null $error_code The error code for the step failure.
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        if (is_null($error_code)) {
            throw new \InvalidArgumentException('non-nullable error_code cannot be null');
        }
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets step_uuid
     *
     * @return string
     */
    public function getStepUuid()
    {
        return $this->container['step_uuid'];
    }

    /**
     * Sets step_uuid
     *
     * @param string $step_uuid UUID of a step.
     *
     * @return self
     */
    public function setStepUuid($step_uuid)
    {
        if (is_null($step_uuid)) {
            throw new \InvalidArgumentException('non-nullable step_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($step_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$step_uuid when calling RecoveryPlanJobStepExecutionStatus., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['step_uuid'] = $step_uuid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


