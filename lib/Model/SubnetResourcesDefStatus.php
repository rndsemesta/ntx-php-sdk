<?php
/**
 * SubnetResourcesDefStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SubnetResourcesDefStatus Class Doc Comment
 *
 * @category Class
 * @description Subnet creation/modification status.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubnetResourcesDefStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'subnet_resources_def_status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subnet_type' => 'string',
        'vpc_reference' => '\OpenAPI\Client\Model\VpcReference',
        'virtual_switch_uuid' => 'string',
        'is_external' => 'bool',
        'vswitch_name' => 'string',
        'network_function_chain_reference' => '\OpenAPI\Client\Model\NetworkFunctionChainReference',
        'reserved_ip_address_list' => 'string[]',
        'availability_zone_reference_list' => '\OpenAPI\Client\Model\AvailabilityZoneReference[]',
        'ip_config' => '\OpenAPI\Client\Model\IpConfig',
        'ip_usage_stats' => '\OpenAPI\Client\Model\IpUsageStats',
        'enable_nat' => 'bool',
        'external_connectivity_state' => 'string',
        'vlan_id' => 'int',
        'virtual_network_reference' => '\OpenAPI\Client\Model\VirtualNetworkReference'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'subnet_type' => null,
        'vpc_reference' => null,
        'virtual_switch_uuid' => 'UUID',
        'is_external' => null,
        'vswitch_name' => null,
        'network_function_chain_reference' => null,
        'reserved_ip_address_list' => null,
        'availability_zone_reference_list' => null,
        'ip_config' => null,
        'ip_usage_stats' => null,
        'enable_nat' => null,
        'external_connectivity_state' => null,
        'vlan_id' => 'int32',
        'virtual_network_reference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'subnet_type' => false,
        'vpc_reference' => false,
        'virtual_switch_uuid' => false,
        'is_external' => false,
        'vswitch_name' => false,
        'network_function_chain_reference' => false,
        'reserved_ip_address_list' => false,
        'availability_zone_reference_list' => false,
        'ip_config' => false,
        'ip_usage_stats' => false,
        'enable_nat' => false,
        'external_connectivity_state' => false,
        'vlan_id' => false,
        'virtual_network_reference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subnet_type' => 'subnet_type',
        'vpc_reference' => 'vpc_reference',
        'virtual_switch_uuid' => 'virtual_switch_uuid',
        'is_external' => 'is_external',
        'vswitch_name' => 'vswitch_name',
        'network_function_chain_reference' => 'network_function_chain_reference',
        'reserved_ip_address_list' => 'reserved_ip_address_list',
        'availability_zone_reference_list' => 'availability_zone_reference_list',
        'ip_config' => 'ip_config',
        'ip_usage_stats' => 'ip_usage_stats',
        'enable_nat' => 'enable_nat',
        'external_connectivity_state' => 'external_connectivity_state',
        'vlan_id' => 'vlan_id',
        'virtual_network_reference' => 'virtual_network_reference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subnet_type' => 'setSubnetType',
        'vpc_reference' => 'setVpcReference',
        'virtual_switch_uuid' => 'setVirtualSwitchUuid',
        'is_external' => 'setIsExternal',
        'vswitch_name' => 'setVswitchName',
        'network_function_chain_reference' => 'setNetworkFunctionChainReference',
        'reserved_ip_address_list' => 'setReservedIpAddressList',
        'availability_zone_reference_list' => 'setAvailabilityZoneReferenceList',
        'ip_config' => 'setIpConfig',
        'ip_usage_stats' => 'setIpUsageStats',
        'enable_nat' => 'setEnableNat',
        'external_connectivity_state' => 'setExternalConnectivityState',
        'vlan_id' => 'setVlanId',
        'virtual_network_reference' => 'setVirtualNetworkReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subnet_type' => 'getSubnetType',
        'vpc_reference' => 'getVpcReference',
        'virtual_switch_uuid' => 'getVirtualSwitchUuid',
        'is_external' => 'getIsExternal',
        'vswitch_name' => 'getVswitchName',
        'network_function_chain_reference' => 'getNetworkFunctionChainReference',
        'reserved_ip_address_list' => 'getReservedIpAddressList',
        'availability_zone_reference_list' => 'getAvailabilityZoneReferenceList',
        'ip_config' => 'getIpConfig',
        'ip_usage_stats' => 'getIpUsageStats',
        'enable_nat' => 'getEnableNat',
        'external_connectivity_state' => 'getExternalConnectivityState',
        'vlan_id' => 'getVlanId',
        'virtual_network_reference' => 'getVirtualNetworkReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('subnet_type', $data ?? [], null);
        $this->setIfExists('vpc_reference', $data ?? [], null);
        $this->setIfExists('virtual_switch_uuid', $data ?? [], null);
        $this->setIfExists('is_external', $data ?? [], null);
        $this->setIfExists('vswitch_name', $data ?? [], null);
        $this->setIfExists('network_function_chain_reference', $data ?? [], null);
        $this->setIfExists('reserved_ip_address_list', $data ?? [], null);
        $this->setIfExists('availability_zone_reference_list', $data ?? [], null);
        $this->setIfExists('ip_config', $data ?? [], null);
        $this->setIfExists('ip_usage_stats', $data ?? [], null);
        $this->setIfExists('enable_nat', $data ?? [], null);
        $this->setIfExists('external_connectivity_state', $data ?? [], null);
        $this->setIfExists('vlan_id', $data ?? [], null);
        $this->setIfExists('virtual_network_reference', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['virtual_switch_uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['virtual_switch_uuid'])) {
            $invalidProperties[] = "invalid value for 'virtual_switch_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subnet_type
     *
     * @return string|null
     */
    public function getSubnetType()
    {
        return $this->container['subnet_type'];
    }

    /**
     * Sets subnet_type
     *
     * @param string|null $subnet_type subnet_type
     *
     * @return self
     */
    public function setSubnetType($subnet_type)
    {
        if (is_null($subnet_type)) {
            throw new \InvalidArgumentException('non-nullable subnet_type cannot be null');
        }
        $this->container['subnet_type'] = $subnet_type;

        return $this;
    }

    /**
     * Gets vpc_reference
     *
     * @return \OpenAPI\Client\Model\VpcReference|null
     */
    public function getVpcReference()
    {
        return $this->container['vpc_reference'];
    }

    /**
     * Sets vpc_reference
     *
     * @param \OpenAPI\Client\Model\VpcReference|null $vpc_reference vpc_reference
     *
     * @return self
     */
    public function setVpcReference($vpc_reference)
    {
        if (is_null($vpc_reference)) {
            throw new \InvalidArgumentException('non-nullable vpc_reference cannot be null');
        }
        $this->container['vpc_reference'] = $vpc_reference;

        return $this;
    }

    /**
     * Gets virtual_switch_uuid
     *
     * @return string|null
     */
    public function getVirtualSwitchUuid()
    {
        return $this->container['virtual_switch_uuid'];
    }

    /**
     * Sets virtual_switch_uuid
     *
     * @param string|null $virtual_switch_uuid Reference to virtual switch
     *
     * @return self
     */
    public function setVirtualSwitchUuid($virtual_switch_uuid)
    {
        if (is_null($virtual_switch_uuid)) {
            throw new \InvalidArgumentException('non-nullable virtual_switch_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($virtual_switch_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$virtual_switch_uuid when calling SubnetResourcesDefStatus., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['virtual_switch_uuid'] = $virtual_switch_uuid;

        return $this;
    }

    /**
     * Gets is_external
     *
     * @return bool|null
     */
    public function getIsExternal()
    {
        return $this->container['is_external'];
    }

    /**
     * Sets is_external
     *
     * @param bool|null $is_external Whether the subnet is external subnet or not.
     *
     * @return self
     */
    public function setIsExternal($is_external)
    {
        if (is_null($is_external)) {
            throw new \InvalidArgumentException('non-nullable is_external cannot be null');
        }
        $this->container['is_external'] = $is_external;

        return $this;
    }

    /**
     * Gets vswitch_name
     *
     * @return string|null
     */
    public function getVswitchName()
    {
        return $this->container['vswitch_name'];
    }

    /**
     * Sets vswitch_name
     *
     * @param string|null $vswitch_name vswitch_name
     *
     * @return self
     */
    public function setVswitchName($vswitch_name)
    {
        if (is_null($vswitch_name)) {
            throw new \InvalidArgumentException('non-nullable vswitch_name cannot be null');
        }
        $this->container['vswitch_name'] = $vswitch_name;

        return $this;
    }

    /**
     * Gets network_function_chain_reference
     *
     * @return \OpenAPI\Client\Model\NetworkFunctionChainReference|null
     */
    public function getNetworkFunctionChainReference()
    {
        return $this->container['network_function_chain_reference'];
    }

    /**
     * Sets network_function_chain_reference
     *
     * @param \OpenAPI\Client\Model\NetworkFunctionChainReference|null $network_function_chain_reference network_function_chain_reference
     *
     * @return self
     */
    public function setNetworkFunctionChainReference($network_function_chain_reference)
    {
        if (is_null($network_function_chain_reference)) {
            throw new \InvalidArgumentException('non-nullable network_function_chain_reference cannot be null');
        }
        $this->container['network_function_chain_reference'] = $network_function_chain_reference;

        return $this;
    }

    /**
     * Gets reserved_ip_address_list
     *
     * @return string[]|null
     */
    public function getReservedIpAddressList()
    {
        return $this->container['reserved_ip_address_list'];
    }

    /**
     * Sets reserved_ip_address_list
     *
     * @param string[]|null $reserved_ip_address_list List of IPs that are not considered while allocating IP addresses to Atlas ports.
     *
     * @return self
     */
    public function setReservedIpAddressList($reserved_ip_address_list)
    {
        if (is_null($reserved_ip_address_list)) {
            throw new \InvalidArgumentException('non-nullable reserved_ip_address_list cannot be null');
        }
        $this->container['reserved_ip_address_list'] = $reserved_ip_address_list;

        return $this;
    }

    /**
     * Gets availability_zone_reference_list
     *
     * @return \OpenAPI\Client\Model\AvailabilityZoneReference[]|null
     */
    public function getAvailabilityZoneReferenceList()
    {
        return $this->container['availability_zone_reference_list'];
    }

    /**
     * Sets availability_zone_reference_list
     *
     * @param \OpenAPI\Client\Model\AvailabilityZoneReference[]|null $availability_zone_reference_list List of availability zones from which resources are derived (Only supported on Xi).
     *
     * @return self
     */
    public function setAvailabilityZoneReferenceList($availability_zone_reference_list)
    {
        if (is_null($availability_zone_reference_list)) {
            throw new \InvalidArgumentException('non-nullable availability_zone_reference_list cannot be null');
        }
        $this->container['availability_zone_reference_list'] = $availability_zone_reference_list;

        return $this;
    }

    /**
     * Gets ip_config
     *
     * @return \OpenAPI\Client\Model\IpConfig|null
     */
    public function getIpConfig()
    {
        return $this->container['ip_config'];
    }

    /**
     * Sets ip_config
     *
     * @param \OpenAPI\Client\Model\IpConfig|null $ip_config ip_config
     *
     * @return self
     */
    public function setIpConfig($ip_config)
    {
        if (is_null($ip_config)) {
            throw new \InvalidArgumentException('non-nullable ip_config cannot be null');
        }
        $this->container['ip_config'] = $ip_config;

        return $this;
    }

    /**
     * Gets ip_usage_stats
     *
     * @return \OpenAPI\Client\Model\IpUsageStats|null
     */
    public function getIpUsageStats()
    {
        return $this->container['ip_usage_stats'];
    }

    /**
     * Sets ip_usage_stats
     *
     * @param \OpenAPI\Client\Model\IpUsageStats|null $ip_usage_stats ip_usage_stats
     *
     * @return self
     */
    public function setIpUsageStats($ip_usage_stats)
    {
        if (is_null($ip_usage_stats)) {
            throw new \InvalidArgumentException('non-nullable ip_usage_stats cannot be null');
        }
        $this->container['ip_usage_stats'] = $ip_usage_stats;

        return $this;
    }

    /**
     * Gets enable_nat
     *
     * @return bool|null
     */
    public function getEnableNat()
    {
        return $this->container['enable_nat'];
    }

    /**
     * Sets enable_nat
     *
     * @param bool|null $enable_nat Whether NAT should be performed for VPCs attaching to the subnet. This field is supported only for external subnets. NAT is enabled by default on external subnets.
     *
     * @return self
     */
    public function setEnableNat($enable_nat)
    {
        if (is_null($enable_nat)) {
            throw new \InvalidArgumentException('non-nullable enable_nat cannot be null');
        }
        $this->container['enable_nat'] = $enable_nat;

        return $this;
    }

    /**
     * Gets external_connectivity_state
     *
     * @return string|null
     */
    public function getExternalConnectivityState()
    {
        return $this->container['external_connectivity_state'];
    }

    /**
     * Sets external_connectivity_state
     *
     * @param string|null $external_connectivity_state External connectivity state (Only supported on Xi)
     *
     * @return self
     */
    public function setExternalConnectivityState($external_connectivity_state)
    {
        if (is_null($external_connectivity_state)) {
            throw new \InvalidArgumentException('non-nullable external_connectivity_state cannot be null');
        }
        $this->container['external_connectivity_state'] = $external_connectivity_state;

        return $this;
    }

    /**
     * Gets vlan_id
     *
     * @return int|null
     */
    public function getVlanId()
    {
        return $this->container['vlan_id'];
    }

    /**
     * Sets vlan_id
     *
     * @param int|null $vlan_id vlan_id
     *
     * @return self
     */
    public function setVlanId($vlan_id)
    {
        if (is_null($vlan_id)) {
            throw new \InvalidArgumentException('non-nullable vlan_id cannot be null');
        }
        $this->container['vlan_id'] = $vlan_id;

        return $this;
    }

    /**
     * Gets virtual_network_reference
     *
     * @return \OpenAPI\Client\Model\VirtualNetworkReference|null
     */
    public function getVirtualNetworkReference()
    {
        return $this->container['virtual_network_reference'];
    }

    /**
     * Sets virtual_network_reference
     *
     * @param \OpenAPI\Client\Model\VirtualNetworkReference|null $virtual_network_reference virtual_network_reference
     *
     * @return self
     */
    public function setVirtualNetworkReference($virtual_network_reference)
    {
        if (is_null($virtual_network_reference)) {
            throw new \InvalidArgumentException('non-nullable virtual_network_reference cannot be null');
        }
        $this->container['virtual_network_reference'] = $virtual_network_reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


