<?php
/**
 * NetworkSecurityRuleResourcesStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NetworkSecurityRuleResourcesStatus Class Doc Comment
 *
 * @category Class
 * @description Network security rule resources
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NetworkSecurityRuleResourcesStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'network_security_rule_resources_status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_ipv6_traffic' => 'bool',
        'is_policy_hitlog_enabled' => 'bool',
        'quarantine_rule' => '\OpenAPI\Client\Model\QuarantineRule',
        'isolation_rule' => '\OpenAPI\Client\Model\IsolationRule',
        'app_rule' => '\OpenAPI\Client\Model\AppRule',
        'ad_rule' => '\OpenAPI\Client\Model\ADRule'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_ipv6_traffic' => null,
        'is_policy_hitlog_enabled' => null,
        'quarantine_rule' => null,
        'isolation_rule' => null,
        'app_rule' => null,
        'ad_rule' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allow_ipv6_traffic' => false,
        'is_policy_hitlog_enabled' => false,
        'quarantine_rule' => false,
        'isolation_rule' => false,
        'app_rule' => false,
        'ad_rule' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_ipv6_traffic' => 'allow_ipv6_traffic',
        'is_policy_hitlog_enabled' => 'is_policy_hitlog_enabled',
        'quarantine_rule' => 'quarantine_rule',
        'isolation_rule' => 'isolation_rule',
        'app_rule' => 'app_rule',
        'ad_rule' => 'ad_rule'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_ipv6_traffic' => 'setAllowIpv6Traffic',
        'is_policy_hitlog_enabled' => 'setIsPolicyHitlogEnabled',
        'quarantine_rule' => 'setQuarantineRule',
        'isolation_rule' => 'setIsolationRule',
        'app_rule' => 'setAppRule',
        'ad_rule' => 'setAdRule'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_ipv6_traffic' => 'getAllowIpv6Traffic',
        'is_policy_hitlog_enabled' => 'getIsPolicyHitlogEnabled',
        'quarantine_rule' => 'getQuarantineRule',
        'isolation_rule' => 'getIsolationRule',
        'app_rule' => 'getAppRule',
        'ad_rule' => 'getAdRule'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allow_ipv6_traffic', $data ?? [], null);
        $this->setIfExists('is_policy_hitlog_enabled', $data ?? [], null);
        $this->setIfExists('quarantine_rule', $data ?? [], null);
        $this->setIfExists('isolation_rule', $data ?? [], null);
        $this->setIfExists('app_rule', $data ?? [], null);
        $this->setIfExists('ad_rule', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_ipv6_traffic
     *
     * @return bool|null
     */
    public function getAllowIpv6Traffic()
    {
        return $this->container['allow_ipv6_traffic'];
    }

    /**
     * Sets allow_ipv6_traffic
     *
     * @param bool|null $allow_ipv6_traffic allow_ipv6_traffic
     *
     * @return self
     */
    public function setAllowIpv6Traffic($allow_ipv6_traffic)
    {
        if (is_null($allow_ipv6_traffic)) {
            throw new \InvalidArgumentException('non-nullable allow_ipv6_traffic cannot be null');
        }
        $this->container['allow_ipv6_traffic'] = $allow_ipv6_traffic;

        return $this;
    }

    /**
     * Gets is_policy_hitlog_enabled
     *
     * @return bool|null
     */
    public function getIsPolicyHitlogEnabled()
    {
        return $this->container['is_policy_hitlog_enabled'];
    }

    /**
     * Sets is_policy_hitlog_enabled
     *
     * @param bool|null $is_policy_hitlog_enabled is_policy_hitlog_enabled
     *
     * @return self
     */
    public function setIsPolicyHitlogEnabled($is_policy_hitlog_enabled)
    {
        if (is_null($is_policy_hitlog_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_policy_hitlog_enabled cannot be null');
        }
        $this->container['is_policy_hitlog_enabled'] = $is_policy_hitlog_enabled;

        return $this;
    }

    /**
     * Gets quarantine_rule
     *
     * @return \OpenAPI\Client\Model\QuarantineRule|null
     */
    public function getQuarantineRule()
    {
        return $this->container['quarantine_rule'];
    }

    /**
     * Sets quarantine_rule
     *
     * @param \OpenAPI\Client\Model\QuarantineRule|null $quarantine_rule quarantine_rule
     *
     * @return self
     */
    public function setQuarantineRule($quarantine_rule)
    {
        if (is_null($quarantine_rule)) {
            throw new \InvalidArgumentException('non-nullable quarantine_rule cannot be null');
        }
        $this->container['quarantine_rule'] = $quarantine_rule;

        return $this;
    }

    /**
     * Gets isolation_rule
     *
     * @return \OpenAPI\Client\Model\IsolationRule|null
     */
    public function getIsolationRule()
    {
        return $this->container['isolation_rule'];
    }

    /**
     * Sets isolation_rule
     *
     * @param \OpenAPI\Client\Model\IsolationRule|null $isolation_rule isolation_rule
     *
     * @return self
     */
    public function setIsolationRule($isolation_rule)
    {
        if (is_null($isolation_rule)) {
            throw new \InvalidArgumentException('non-nullable isolation_rule cannot be null');
        }
        $this->container['isolation_rule'] = $isolation_rule;

        return $this;
    }

    /**
     * Gets app_rule
     *
     * @return \OpenAPI\Client\Model\AppRule|null
     */
    public function getAppRule()
    {
        return $this->container['app_rule'];
    }

    /**
     * Sets app_rule
     *
     * @param \OpenAPI\Client\Model\AppRule|null $app_rule app_rule
     *
     * @return self
     */
    public function setAppRule($app_rule)
    {
        if (is_null($app_rule)) {
            throw new \InvalidArgumentException('non-nullable app_rule cannot be null');
        }
        $this->container['app_rule'] = $app_rule;

        return $this;
    }

    /**
     * Gets ad_rule
     *
     * @return \OpenAPI\Client\Model\ADRule|null
     */
    public function getAdRule()
    {
        return $this->container['ad_rule'];
    }

    /**
     * Sets ad_rule
     *
     * @param \OpenAPI\Client\Model\ADRule|null $ad_rule ad_rule
     *
     * @return self
     */
    public function setAdRule($ad_rule)
    {
        if (is_null($ad_rule)) {
            throw new \InvalidArgumentException('non-nullable ad_rule cannot be null');
        }
        $this->container['ad_rule'] = $ad_rule;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


