<?php
/**
 * DiskDefStatusResources
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DiskDefStatusResources Class Doc Comment
 *
 * @category Class
 * @description Disk resources.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DiskDefStatusResources implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'disk_def_status_resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'host_reference' => '\OpenAPI\Client\Model\Reference',
        'enabled_features_list' => 'string[]',
        'vendor' => 'string',
        'mount_path' => 'string',
        'storage_pool_uuid' => 'string',
        'state_list' => 'string[]',
        'storage_tier_type' => 'string',
        'size_bytes' => 'int',
        'slot_number' => 'int',
        'serial_number' => 'string',
        'model' => 'string',
        'firmware_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'host_reference' => null,
        'enabled_features_list' => null,
        'vendor' => null,
        'mount_path' => null,
        'storage_pool_uuid' => 'UUID',
        'state_list' => null,
        'storage_tier_type' => null,
        'size_bytes' => 'int64',
        'slot_number' => 'int32',
        'serial_number' => null,
        'model' => null,
        'firmware_version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'host_reference' => false,
        'enabled_features_list' => false,
        'vendor' => false,
        'mount_path' => false,
        'storage_pool_uuid' => false,
        'state_list' => false,
        'storage_tier_type' => false,
        'size_bytes' => false,
        'slot_number' => false,
        'serial_number' => false,
        'model' => false,
        'firmware_version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'host_reference' => 'host_reference',
        'enabled_features_list' => 'enabled_features_list',
        'vendor' => 'vendor',
        'mount_path' => 'mount_path',
        'storage_pool_uuid' => 'storage_pool_uuid',
        'state_list' => 'state_list',
        'storage_tier_type' => 'storage_tier_type',
        'size_bytes' => 'size_bytes',
        'slot_number' => 'slot_number',
        'serial_number' => 'serial_number',
        'model' => 'model',
        'firmware_version' => 'firmware_version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'host_reference' => 'setHostReference',
        'enabled_features_list' => 'setEnabledFeaturesList',
        'vendor' => 'setVendor',
        'mount_path' => 'setMountPath',
        'storage_pool_uuid' => 'setStoragePoolUuid',
        'state_list' => 'setStateList',
        'storage_tier_type' => 'setStorageTierType',
        'size_bytes' => 'setSizeBytes',
        'slot_number' => 'setSlotNumber',
        'serial_number' => 'setSerialNumber',
        'model' => 'setModel',
        'firmware_version' => 'setFirmwareVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'host_reference' => 'getHostReference',
        'enabled_features_list' => 'getEnabledFeaturesList',
        'vendor' => 'getVendor',
        'mount_path' => 'getMountPath',
        'storage_pool_uuid' => 'getStoragePoolUuid',
        'state_list' => 'getStateList',
        'storage_tier_type' => 'getStorageTierType',
        'size_bytes' => 'getSizeBytes',
        'slot_number' => 'getSlotNumber',
        'serial_number' => 'getSerialNumber',
        'model' => 'getModel',
        'firmware_version' => 'getFirmwareVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('host_reference', $data ?? [], null);
        $this->setIfExists('enabled_features_list', $data ?? [], null);
        $this->setIfExists('vendor', $data ?? [], null);
        $this->setIfExists('mount_path', $data ?? [], null);
        $this->setIfExists('storage_pool_uuid', $data ?? [], null);
        $this->setIfExists('state_list', $data ?? [], null);
        $this->setIfExists('storage_tier_type', $data ?? [], null);
        $this->setIfExists('size_bytes', $data ?? [], null);
        $this->setIfExists('slot_number', $data ?? [], null);
        $this->setIfExists('serial_number', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('firmware_version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['storage_pool_uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['storage_pool_uuid'])) {
            $invalidProperties[] = "invalid value for 'storage_pool_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets host_reference
     *
     * @return \OpenAPI\Client\Model\Reference|null
     */
    public function getHostReference()
    {
        return $this->container['host_reference'];
    }

    /**
     * Sets host_reference
     *
     * @param \OpenAPI\Client\Model\Reference|null $host_reference host_reference
     *
     * @return self
     */
    public function setHostReference($host_reference)
    {
        if (is_null($host_reference)) {
            throw new \InvalidArgumentException('non-nullable host_reference cannot be null');
        }
        $this->container['host_reference'] = $host_reference;

        return $this;
    }

    /**
     * Gets enabled_features_list
     *
     * @return string[]|null
     */
    public function getEnabledFeaturesList()
    {
        return $this->container['enabled_features_list'];
    }

    /**
     * Sets enabled_features_list
     *
     * @param string[]|null $enabled_features_list Disk feature flags - 'CanAddAsNewDisk': Flag to indicate if this disk can be added as    new disk. - 'CanAddAsOldDisk': Flag to indicate if the disk can be added as    old disk. - 'BootDisk': Flag to indicate if its a boot disk. - 'OnlyBootDisk': Flag to indicate if the disk is boot only and    no disk operation to be run on it. - 'SelfEncryptingEnabled': Flag to indicate if the disk has self    encryption enabled. - 'PasswordProtected': Flag to indicate if the disk is password    protected. - 'SelfManagedNvme': Flag to indicate if the NVMe disk is self   managed and no host/CVM reboot required.
     *
     * @return self
     */
    public function setEnabledFeaturesList($enabled_features_list)
    {
        if (is_null($enabled_features_list)) {
            throw new \InvalidArgumentException('non-nullable enabled_features_list cannot be null');
        }
        $this->container['enabled_features_list'] = $enabled_features_list;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string|null
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string|null $vendor Disk vendor.
     *
     * @return self
     */
    public function setVendor($vendor)
    {
        if (is_null($vendor)) {
            throw new \InvalidArgumentException('non-nullable vendor cannot be null');
        }
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets mount_path
     *
     * @return string|null
     */
    public function getMountPath()
    {
        return $this->container['mount_path'];
    }

    /**
     * Sets mount_path
     *
     * @param string|null $mount_path Mount path.
     *
     * @return self
     */
    public function setMountPath($mount_path)
    {
        if (is_null($mount_path)) {
            throw new \InvalidArgumentException('non-nullable mount_path cannot be null');
        }
        $this->container['mount_path'] = $mount_path;

        return $this;
    }

    /**
     * Gets storage_pool_uuid
     *
     * @return string|null
     */
    public function getStoragePoolUuid()
    {
        return $this->container['storage_pool_uuid'];
    }

    /**
     * Sets storage_pool_uuid
     *
     * @param string|null $storage_pool_uuid Storage pool uuid.
     *
     * @return self
     */
    public function setStoragePoolUuid($storage_pool_uuid)
    {
        if (is_null($storage_pool_uuid)) {
            throw new \InvalidArgumentException('non-nullable storage_pool_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($storage_pool_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$storage_pool_uuid when calling DiskDefStatusResources., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['storage_pool_uuid'] = $storage_pool_uuid;

        return $this;
    }

    /**
     * Gets state_list
     *
     * @return string[]|null
     */
    public function getStateList()
    {
        return $this->container['state_list'];
    }

    /**
     * Sets state_list
     *
     * @param string[]|null $state_list Array of disk states - 'DataMigrationInitiated': Data Migration Initiated. - 'MarkedForRemovalButNotDetachable': Marked for removal, data    migration is in progress. - 'ReadyToDetach': Flag to indicate the disk is detachable. - 'DataMigrated': Flag to indicate if data migration is completed for    this disk. - 'MarkedForRemoval': Flag to indicate if the disk is marked for    removal. - 'Online': Flag to indicate if the disk is online. - 'Bad': Flag to indicate if the disk is bad. - 'Mounted': Flag to indicate if the disk is mounted. - 'UnderDiagnosis': Flag to indicate if the disk is under diagnosis.
     *
     * @return self
     */
    public function setStateList($state_list)
    {
        if (is_null($state_list)) {
            throw new \InvalidArgumentException('non-nullable state_list cannot be null');
        }
        $this->container['state_list'] = $state_list;

        return $this;
    }

    /**
     * Gets storage_tier_type
     *
     * @return string|null
     */
    public function getStorageTierType()
    {
        return $this->container['storage_tier_type'];
    }

    /**
     * Sets storage_tier_type
     *
     * @param string|null $storage_tier_type Storage tier type.
     *
     * @return self
     */
    public function setStorageTierType($storage_tier_type)
    {
        if (is_null($storage_tier_type)) {
            throw new \InvalidArgumentException('non-nullable storage_tier_type cannot be null');
        }
        $this->container['storage_tier_type'] = $storage_tier_type;

        return $this;
    }

    /**
     * Gets size_bytes
     *
     * @return int|null
     */
    public function getSizeBytes()
    {
        return $this->container['size_bytes'];
    }

    /**
     * Sets size_bytes
     *
     * @param int|null $size_bytes Disk size in bytes.
     *
     * @return self
     */
    public function setSizeBytes($size_bytes)
    {
        if (is_null($size_bytes)) {
            throw new \InvalidArgumentException('non-nullable size_bytes cannot be null');
        }
        $this->container['size_bytes'] = $size_bytes;

        return $this;
    }

    /**
     * Gets slot_number
     *
     * @return int|null
     */
    public function getSlotNumber()
    {
        return $this->container['slot_number'];
    }

    /**
     * Sets slot_number
     *
     * @param int|null $slot_number Disk location in a node.
     *
     * @return self
     */
    public function setSlotNumber($slot_number)
    {
        if (is_null($slot_number)) {
            throw new \InvalidArgumentException('non-nullable slot_number cannot be null');
        }
        $this->container['slot_number'] = $slot_number;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number Disk serial number.
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        if (is_null($serial_number)) {
            throw new \InvalidArgumentException('non-nullable serial_number cannot be null');
        }
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model Disk model.
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets firmware_version
     *
     * @return string|null
     */
    public function getFirmwareVersion()
    {
        return $this->container['firmware_version'];
    }

    /**
     * Sets firmware_version
     *
     * @param string|null $firmware_version Firmware version.
     *
     * @return self
     */
    public function setFirmwareVersion($firmware_version)
    {
        if (is_null($firmware_version)) {
            throw new \InvalidArgumentException('non-nullable firmware_version cannot be null');
        }
        $this->container['firmware_version'] = $firmware_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


