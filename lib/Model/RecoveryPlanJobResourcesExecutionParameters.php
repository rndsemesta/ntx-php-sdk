<?php
/**
 * RecoveryPlanJobResourcesExecutionParameters
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RecoveryPlanJobResourcesExecutionParameters Class Doc Comment
 *
 * @category Class
 * @description Parameters for execution of the Recovery Plan Job.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecoveryPlanJobResourcesExecutionParameters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'recovery_plan_job_resources_execution_parameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'recovery_availability_zone_list' => '\OpenAPI\Client\Model\AvailabilityZoneInformation[]',
        'failed_availability_zone_list' => '\OpenAPI\Client\Model\AvailabilityZoneInformation[]',
        'recovery_reference_time' => '\DateTime',
        'action_type' => 'string',
        'should_continue_on_validation_failure' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'recovery_availability_zone_list' => null,
        'failed_availability_zone_list' => null,
        'recovery_reference_time' => 'date-time',
        'action_type' => null,
        'should_continue_on_validation_failure' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'recovery_availability_zone_list' => false,
        'failed_availability_zone_list' => false,
        'recovery_reference_time' => false,
        'action_type' => false,
        'should_continue_on_validation_failure' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recovery_availability_zone_list' => 'recovery_availability_zone_list',
        'failed_availability_zone_list' => 'failed_availability_zone_list',
        'recovery_reference_time' => 'recovery_reference_time',
        'action_type' => 'action_type',
        'should_continue_on_validation_failure' => 'should_continue_on_validation_failure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recovery_availability_zone_list' => 'setRecoveryAvailabilityZoneList',
        'failed_availability_zone_list' => 'setFailedAvailabilityZoneList',
        'recovery_reference_time' => 'setRecoveryReferenceTime',
        'action_type' => 'setActionType',
        'should_continue_on_validation_failure' => 'setShouldContinueOnValidationFailure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recovery_availability_zone_list' => 'getRecoveryAvailabilityZoneList',
        'failed_availability_zone_list' => 'getFailedAvailabilityZoneList',
        'recovery_reference_time' => 'getRecoveryReferenceTime',
        'action_type' => 'getActionType',
        'should_continue_on_validation_failure' => 'getShouldContinueOnValidationFailure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('recovery_availability_zone_list', $data ?? [], null);
        $this->setIfExists('failed_availability_zone_list', $data ?? [], null);
        $this->setIfExists('recovery_reference_time', $data ?? [], null);
        $this->setIfExists('action_type', $data ?? [], null);
        $this->setIfExists('should_continue_on_validation_failure', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recovery_availability_zone_list'] === null) {
            $invalidProperties[] = "'recovery_availability_zone_list' can't be null";
        }
        if ($this->container['failed_availability_zone_list'] === null) {
            $invalidProperties[] = "'failed_availability_zone_list' can't be null";
        }
        if ($this->container['action_type'] === null) {
            $invalidProperties[] = "'action_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recovery_availability_zone_list
     *
     * @return \OpenAPI\Client\Model\AvailabilityZoneInformation[]
     */
    public function getRecoveryAvailabilityZoneList()
    {
        return $this->container['recovery_availability_zone_list'];
    }

    /**
     * Sets recovery_availability_zone_list
     *
     * @param \OpenAPI\Client\Model\AvailabilityZoneInformation[] $recovery_availability_zone_list Availability Zones wherein entities need to be recovered.
     *
     * @return self
     */
    public function setRecoveryAvailabilityZoneList($recovery_availability_zone_list)
    {
        if (is_null($recovery_availability_zone_list)) {
            throw new \InvalidArgumentException('non-nullable recovery_availability_zone_list cannot be null');
        }
        $this->container['recovery_availability_zone_list'] = $recovery_availability_zone_list;

        return $this;
    }

    /**
     * Gets failed_availability_zone_list
     *
     * @return \OpenAPI\Client\Model\AvailabilityZoneInformation[]
     */
    public function getFailedAvailabilityZoneList()
    {
        return $this->container['failed_availability_zone_list'];
    }

    /**
     * Sets failed_availability_zone_list
     *
     * @param \OpenAPI\Client\Model\AvailabilityZoneInformation[] $failed_availability_zone_list Availability Zones that have failed.
     *
     * @return self
     */
    public function setFailedAvailabilityZoneList($failed_availability_zone_list)
    {
        if (is_null($failed_availability_zone_list)) {
            throw new \InvalidArgumentException('non-nullable failed_availability_zone_list cannot be null');
        }
        $this->container['failed_availability_zone_list'] = $failed_availability_zone_list;

        return $this;
    }

    /**
     * Gets recovery_reference_time
     *
     * @return \DateTime|null
     */
    public function getRecoveryReferenceTime()
    {
        return $this->container['recovery_reference_time'];
    }

    /**
     * Sets recovery_reference_time
     *
     * @param \DateTime|null $recovery_reference_time Time with respect to which Recovery Plan Job has to be executed. This time will be used as reference time with respect to which latest snapshot will have to be restored in case of failover. For example, if failover is required to be done using snapshot created on or before yesterday '2:00' PM, then recovery_reference_time will be set to this time.
     *
     * @return self
     */
    public function setRecoveryReferenceTime($recovery_reference_time)
    {
        if (is_null($recovery_reference_time)) {
            throw new \InvalidArgumentException('non-nullable recovery_reference_time cannot be null');
        }
        $this->container['recovery_reference_time'] = $recovery_reference_time;

        return $this;
    }

    /**
     * Gets action_type
     *
     * @return string
     */
    public function getActionType()
    {
        return $this->container['action_type'];
    }

    /**
     * Sets action_type
     *
     * @param string $action_type Type of action performed by the Recovery Plan Job. VALIDATE - Performs the validation of the Recovery Plan.            The validation includes checks for the presence of            entities, networks, categories etc. referenced in the            Recovery Plan. MIGRATE - VM would be powered off on the sourece before migrating           it to the recovery Availability Zone. FAILOVER - Restore the entity from the recovery points on the            recovery Availability Zone. TEST_FAILOVER - Same as FAILOVER but on a test network. LIVE_MIGRATE - Migrate without powering off the VM.
     *
     * @return self
     */
    public function setActionType($action_type)
    {
        if (is_null($action_type)) {
            throw new \InvalidArgumentException('non-nullable action_type cannot be null');
        }
        $this->container['action_type'] = $action_type;

        return $this;
    }

    /**
     * Gets should_continue_on_validation_failure
     *
     * @return bool|null
     */
    public function getShouldContinueOnValidationFailure()
    {
        return $this->container['should_continue_on_validation_failure'];
    }

    /**
     * Sets should_continue_on_validation_failure
     *
     * @param bool|null $should_continue_on_validation_failure Whether to ignore the validation failures(e.g. Network mapping is missing for some networks on failed Availability Zone, Virtual network missing.) for the Recovery Plan actions MIGRATE, FAILOVER, TEST_FAILOVER and execute the Recovery Plan.
     *
     * @return self
     */
    public function setShouldContinueOnValidationFailure($should_continue_on_validation_failure)
    {
        if (is_null($should_continue_on_validation_failure)) {
            throw new \InvalidArgumentException('non-nullable should_continue_on_validation_failure cannot be null');
        }
        $this->container['should_continue_on_validation_failure'] = $should_continue_on_validation_failure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


