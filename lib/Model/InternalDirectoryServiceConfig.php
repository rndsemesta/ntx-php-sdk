<?php
/**
 * InternalDirectoryServiceConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InternalDirectoryServiceConfig Class Doc Comment
 *
 * @category Class
 * @description Internal directory service config
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InternalDirectoryServiceConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'internal_directory_service_config';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'openldap_config' => '\OpenAPI\Client\Model\InternalOpenLdapConfig',
        'uuid' => 'string',
        'url' => 'string',
        'directory_type' => 'string',
        'domain_name' => 'string',
        'service_account_config' => '\OpenAPI\Client\Model\InternalServiceAccountConfig',
        'recursive_group_search' => 'bool',
        'domain_display_name' => 'string',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'openldap_config' => null,
        'uuid' => 'UUID',
        'url' => null,
        'directory_type' => null,
        'domain_name' => null,
        'service_account_config' => null,
        'recursive_group_search' => null,
        'domain_display_name' => null,
        'name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'openldap_config' => false,
        'uuid' => false,
        'url' => false,
        'directory_type' => false,
        'domain_name' => false,
        'service_account_config' => false,
        'recursive_group_search' => false,
        'domain_display_name' => false,
        'name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'openldap_config' => 'openldap_config',
        'uuid' => 'uuid',
        'url' => 'url',
        'directory_type' => 'directory_type',
        'domain_name' => 'domain_name',
        'service_account_config' => 'service_account_config',
        'recursive_group_search' => 'recursive_group_search',
        'domain_display_name' => 'domain_display_name',
        'name' => 'name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'openldap_config' => 'setOpenldapConfig',
        'uuid' => 'setUuid',
        'url' => 'setUrl',
        'directory_type' => 'setDirectoryType',
        'domain_name' => 'setDomainName',
        'service_account_config' => 'setServiceAccountConfig',
        'recursive_group_search' => 'setRecursiveGroupSearch',
        'domain_display_name' => 'setDomainDisplayName',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'openldap_config' => 'getOpenldapConfig',
        'uuid' => 'getUuid',
        'url' => 'getUrl',
        'directory_type' => 'getDirectoryType',
        'domain_name' => 'getDomainName',
        'service_account_config' => 'getServiceAccountConfig',
        'recursive_group_search' => 'getRecursiveGroupSearch',
        'domain_display_name' => 'getDomainDisplayName',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('openldap_config', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('directory_type', $data ?? [], null);
        $this->setIfExists('domain_name', $data ?? [], null);
        $this->setIfExists('service_account_config', $data ?? [], null);
        $this->setIfExists('recursive_group_search', $data ?? [], null);
        $this->setIfExists('domain_display_name', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['uuid'])) {
            $invalidProperties[] = "invalid value for 'uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets openldap_config
     *
     * @return \OpenAPI\Client\Model\InternalOpenLdapConfig|null
     */
    public function getOpenldapConfig()
    {
        return $this->container['openldap_config'];
    }

    /**
     * Sets openldap_config
     *
     * @param \OpenAPI\Client\Model\InternalOpenLdapConfig|null $openldap_config openldap_config
     *
     * @return self
     */
    public function setOpenldapConfig($openldap_config)
    {
        if (is_null($openldap_config)) {
            throw new \InvalidArgumentException('non-nullable openldap_config cannot be null');
        }
        $this->container['openldap_config'] = $openldap_config;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$uuid when calling InternalDirectoryServiceConfig., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url URL of the directory.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets directory_type
     *
     * @return string|null
     */
    public function getDirectoryType()
    {
        return $this->container['directory_type'];
    }

    /**
     * Sets directory_type
     *
     * @param string|null $directory_type Type of the directory service.
     *
     * @return self
     */
    public function setDirectoryType($directory_type)
    {
        if (is_null($directory_type)) {
            throw new \InvalidArgumentException('non-nullable directory_type cannot be null');
        }
        $this->container['directory_type'] = $directory_type;

        return $this;
    }

    /**
     * Gets domain_name
     *
     * @return string|null
     */
    public function getDomainName()
    {
        return $this->container['domain_name'];
    }

    /**
     * Sets domain_name
     *
     * @param string|null $domain_name The domain name of the directory service.
     *
     * @return self
     */
    public function setDomainName($domain_name)
    {
        if (is_null($domain_name)) {
            throw new \InvalidArgumentException('non-nullable domain_name cannot be null');
        }
        $this->container['domain_name'] = $domain_name;

        return $this;
    }

    /**
     * Gets service_account_config
     *
     * @return \OpenAPI\Client\Model\InternalServiceAccountConfig|null
     */
    public function getServiceAccountConfig()
    {
        return $this->container['service_account_config'];
    }

    /**
     * Sets service_account_config
     *
     * @param \OpenAPI\Client\Model\InternalServiceAccountConfig|null $service_account_config service_account_config
     *
     * @return self
     */
    public function setServiceAccountConfig($service_account_config)
    {
        if (is_null($service_account_config)) {
            throw new \InvalidArgumentException('non-nullable service_account_config cannot be null');
        }
        $this->container['service_account_config'] = $service_account_config;

        return $this;
    }

    /**
     * Gets recursive_group_search
     *
     * @return bool|null
     */
    public function getRecursiveGroupSearch()
    {
        return $this->container['recursive_group_search'];
    }

    /**
     * Sets recursive_group_search
     *
     * @param bool|null $recursive_group_search Search group recursively
     *
     * @return self
     */
    public function setRecursiveGroupSearch($recursive_group_search)
    {
        if (is_null($recursive_group_search)) {
            throw new \InvalidArgumentException('non-nullable recursive_group_search cannot be null');
        }
        $this->container['recursive_group_search'] = $recursive_group_search;

        return $this;
    }

    /**
     * Gets domain_display_name
     *
     * @return string|null
     */
    public function getDomainDisplayName()
    {
        return $this->container['domain_display_name'];
    }

    /**
     * Sets domain_display_name
     *
     * @param string|null $domain_display_name Domain display name
     *
     * @return self
     */
    public function setDomainDisplayName($domain_display_name)
    {
        if (is_null($domain_display_name)) {
            throw new \InvalidArgumentException('non-nullable domain_display_name cannot be null');
        }
        $this->container['domain_display_name'] = $domain_display_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the directory service configuration.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


