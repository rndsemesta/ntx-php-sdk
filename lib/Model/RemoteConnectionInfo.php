<?php
/**
 * RemoteConnectionInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RemoteConnectionInfo Class Doc Comment
 *
 * @category Class
 * @description Connection information
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RemoteConnectionInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'remote_connection_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'public_key' => 'string',
        'cluster_fqdn' => 'string',
        'peer_remote_connection_uuid' => 'string',
        'additional_capabilities' => 'string[]',
        'node_address_list' => '\OpenAPI\Client\Model\Address[]',
        'token' => '\OpenAPI\Client\Model\RemoteConnectionToken',
        'cluster_uuid' => 'string',
        'cluster_function' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'public_key' => null,
        'cluster_fqdn' => null,
        'peer_remote_connection_uuid' => 'UUID',
        'additional_capabilities' => null,
        'node_address_list' => null,
        'token' => null,
        'cluster_uuid' => 'UUID',
        'cluster_function' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'public_key' => false,
        'cluster_fqdn' => false,
        'peer_remote_connection_uuid' => false,
        'additional_capabilities' => false,
        'node_address_list' => false,
        'token' => false,
        'cluster_uuid' => false,
        'cluster_function' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'public_key' => 'public_key',
        'cluster_fqdn' => 'cluster_fqdn',
        'peer_remote_connection_uuid' => 'peer_remote_connection_uuid',
        'additional_capabilities' => 'additional_capabilities',
        'node_address_list' => 'node_address_list',
        'token' => 'token',
        'cluster_uuid' => 'cluster_uuid',
        'cluster_function' => 'cluster_function'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'public_key' => 'setPublicKey',
        'cluster_fqdn' => 'setClusterFqdn',
        'peer_remote_connection_uuid' => 'setPeerRemoteConnectionUuid',
        'additional_capabilities' => 'setAdditionalCapabilities',
        'node_address_list' => 'setNodeAddressList',
        'token' => 'setToken',
        'cluster_uuid' => 'setClusterUuid',
        'cluster_function' => 'setClusterFunction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'public_key' => 'getPublicKey',
        'cluster_fqdn' => 'getClusterFqdn',
        'peer_remote_connection_uuid' => 'getPeerRemoteConnectionUuid',
        'additional_capabilities' => 'getAdditionalCapabilities',
        'node_address_list' => 'getNodeAddressList',
        'token' => 'getToken',
        'cluster_uuid' => 'getClusterUuid',
        'cluster_function' => 'getClusterFunction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('public_key', $data ?? [], null);
        $this->setIfExists('cluster_fqdn', $data ?? [], null);
        $this->setIfExists('peer_remote_connection_uuid', $data ?? [], null);
        $this->setIfExists('additional_capabilities', $data ?? [], null);
        $this->setIfExists('node_address_list', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('cluster_uuid', $data ?? [], null);
        $this->setIfExists('cluster_function', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['cluster_fqdn']) && (mb_strlen($this->container['cluster_fqdn']) > 255)) {
            $invalidProperties[] = "invalid value for 'cluster_fqdn', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['peer_remote_connection_uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['peer_remote_connection_uuid'])) {
            $invalidProperties[] = "invalid value for 'peer_remote_connection_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        if (!is_null($this->container['cluster_uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['cluster_uuid'])) {
            $invalidProperties[] = "invalid value for 'cluster_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets public_key
     *
     * @return string|null
     */
    public function getPublicKey()
    {
        return $this->container['public_key'];
    }

    /**
     * Sets public_key
     *
     * @param string|null $public_key public key
     *
     * @return self
     */
    public function setPublicKey($public_key)
    {
        if (is_null($public_key)) {
            throw new \InvalidArgumentException('non-nullable public_key cannot be null');
        }
        $this->container['public_key'] = $public_key;

        return $this;
    }

    /**
     * Gets cluster_fqdn
     *
     * @return string|null
     */
    public function getClusterFqdn()
    {
        return $this->container['cluster_fqdn'];
    }

    /**
     * Sets cluster_fqdn
     *
     * @param string|null $cluster_fqdn Cluster Fully Qualified Domain Name
     *
     * @return self
     */
    public function setClusterFqdn($cluster_fqdn)
    {
        if (is_null($cluster_fqdn)) {
            throw new \InvalidArgumentException('non-nullable cluster_fqdn cannot be null');
        }
        if ((mb_strlen($cluster_fqdn) > 255)) {
            throw new \InvalidArgumentException('invalid length for $cluster_fqdn when calling RemoteConnectionInfo., must be smaller than or equal to 255.');
        }

        $this->container['cluster_fqdn'] = $cluster_fqdn;

        return $this;
    }

    /**
     * Gets peer_remote_connection_uuid
     *
     * @return string|null
     */
    public function getPeerRemoteConnectionUuid()
    {
        return $this->container['peer_remote_connection_uuid'];
    }

    /**
     * Sets peer_remote_connection_uuid
     *
     * @param string|null $peer_remote_connection_uuid Connection uuid for remote Peer
     *
     * @return self
     */
    public function setPeerRemoteConnectionUuid($peer_remote_connection_uuid)
    {
        if (is_null($peer_remote_connection_uuid)) {
            throw new \InvalidArgumentException('non-nullable peer_remote_connection_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($peer_remote_connection_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$peer_remote_connection_uuid when calling RemoteConnectionInfo., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['peer_remote_connection_uuid'] = $peer_remote_connection_uuid;

        return $this;
    }

    /**
     * Gets additional_capabilities
     *
     * @return string[]|null
     */
    public function getAdditionalCapabilities()
    {
        return $this->container['additional_capabilities'];
    }

    /**
     * Sets additional_capabilities
     *
     * @param string[]|null $additional_capabilities additional_capabilities
     *
     * @return self
     */
    public function setAdditionalCapabilities($additional_capabilities)
    {
        if (is_null($additional_capabilities)) {
            throw new \InvalidArgumentException('non-nullable additional_capabilities cannot be null');
        }
        $this->container['additional_capabilities'] = $additional_capabilities;

        return $this;
    }

    /**
     * Gets node_address_list
     *
     * @return \OpenAPI\Client\Model\Address[]|null
     */
    public function getNodeAddressList()
    {
        return $this->container['node_address_list'];
    }

    /**
     * Sets node_address_list
     *
     * @param \OpenAPI\Client\Model\Address[]|null $node_address_list node_address_list
     *
     * @return self
     */
    public function setNodeAddressList($node_address_list)
    {
        if (is_null($node_address_list)) {
            throw new \InvalidArgumentException('non-nullable node_address_list cannot be null');
        }
        $this->container['node_address_list'] = $node_address_list;

        return $this;
    }

    /**
     * Gets token
     *
     * @return \OpenAPI\Client\Model\RemoteConnectionToken|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param \OpenAPI\Client\Model\RemoteConnectionToken|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets cluster_uuid
     *
     * @return string|null
     */
    public function getClusterUuid()
    {
        return $this->container['cluster_uuid'];
    }

    /**
     * Sets cluster_uuid
     *
     * @param string|null $cluster_uuid UUID of cluster
     *
     * @return self
     */
    public function setClusterUuid($cluster_uuid)
    {
        if (is_null($cluster_uuid)) {
            throw new \InvalidArgumentException('non-nullable cluster_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($cluster_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$cluster_uuid when calling RemoteConnectionInfo., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['cluster_uuid'] = $cluster_uuid;

        return $this;
    }

    /**
     * Gets cluster_function
     *
     * @return string|null
     */
    public function getClusterFunction()
    {
        return $this->container['cluster_function'];
    }

    /**
     * Sets cluster_function
     *
     * @param string|null $cluster_function cluster function string
     *
     * @return self
     */
    public function setClusterFunction($cluster_function)
    {
        if (is_null($cluster_function)) {
            throw new \InvalidArgumentException('non-nullable cluster_function cannot be null');
        }
        $this->container['cluster_function'] = $cluster_function;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


