<?php
/**
 * ActionRuleResultResources
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ActionRuleResultResources Class Doc Comment
 *
 * @category Class
 * @description Action rule result entity definition
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ActionRuleResultResources implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'action_rule_result_resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'action_result_list' => '\OpenAPI\Client\Model\ActionResult[]',
        'execution_plan' => '\OpenAPI\Client\Model\RuleExecutionPlan',
        'execution_status' => 'string',
        'action_rule_reference' => '\OpenAPI\Client\Model\ActionRuleReference',
        'rule_parameter_values' => 'array<string,string>',
        'execution_messages' => 'string[]',
        'execution_start_time' => '\DateTime',
        'trigger_info_list' => '\OpenAPI\Client\Model\TriggerInfo[]',
        'execution_end_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'action_result_list' => null,
        'execution_plan' => null,
        'execution_status' => null,
        'action_rule_reference' => null,
        'rule_parameter_values' => null,
        'execution_messages' => null,
        'execution_start_time' => 'date-time',
        'trigger_info_list' => null,
        'execution_end_time' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'action_result_list' => false,
        'execution_plan' => false,
        'execution_status' => false,
        'action_rule_reference' => false,
        'rule_parameter_values' => false,
        'execution_messages' => false,
        'execution_start_time' => false,
        'trigger_info_list' => false,
        'execution_end_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action_result_list' => 'action_result_list',
        'execution_plan' => 'execution_plan',
        'execution_status' => 'execution_status',
        'action_rule_reference' => 'action_rule_reference',
        'rule_parameter_values' => 'rule_parameter_values',
        'execution_messages' => 'execution_messages',
        'execution_start_time' => 'execution_start_time',
        'trigger_info_list' => 'trigger_info_list',
        'execution_end_time' => 'execution_end_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action_result_list' => 'setActionResultList',
        'execution_plan' => 'setExecutionPlan',
        'execution_status' => 'setExecutionStatus',
        'action_rule_reference' => 'setActionRuleReference',
        'rule_parameter_values' => 'setRuleParameterValues',
        'execution_messages' => 'setExecutionMessages',
        'execution_start_time' => 'setExecutionStartTime',
        'trigger_info_list' => 'setTriggerInfoList',
        'execution_end_time' => 'setExecutionEndTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action_result_list' => 'getActionResultList',
        'execution_plan' => 'getExecutionPlan',
        'execution_status' => 'getExecutionStatus',
        'action_rule_reference' => 'getActionRuleReference',
        'rule_parameter_values' => 'getRuleParameterValues',
        'execution_messages' => 'getExecutionMessages',
        'execution_start_time' => 'getExecutionStartTime',
        'trigger_info_list' => 'getTriggerInfoList',
        'execution_end_time' => 'getExecutionEndTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('action_result_list', $data ?? [], null);
        $this->setIfExists('execution_plan', $data ?? [], null);
        $this->setIfExists('execution_status', $data ?? [], null);
        $this->setIfExists('action_rule_reference', $data ?? [], null);
        $this->setIfExists('rule_parameter_values', $data ?? [], null);
        $this->setIfExists('execution_messages', $data ?? [], null);
        $this->setIfExists('execution_start_time', $data ?? [], null);
        $this->setIfExists('trigger_info_list', $data ?? [], null);
        $this->setIfExists('execution_end_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['action_result_list'] === null) {
            $invalidProperties[] = "'action_result_list' can't be null";
        }
        if ($this->container['execution_plan'] === null) {
            $invalidProperties[] = "'execution_plan' can't be null";
        }
        if ($this->container['execution_status'] === null) {
            $invalidProperties[] = "'execution_status' can't be null";
        }
        if ($this->container['action_rule_reference'] === null) {
            $invalidProperties[] = "'action_rule_reference' can't be null";
        }
        if ($this->container['trigger_info_list'] === null) {
            $invalidProperties[] = "'trigger_info_list' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action_result_list
     *
     * @return \OpenAPI\Client\Model\ActionResult[]
     */
    public function getActionResultList()
    {
        return $this->container['action_result_list'];
    }

    /**
     * Sets action_result_list
     *
     * @param \OpenAPI\Client\Model\ActionResult[] $action_result_list Ordered list of action execution results.
     *
     * @return self
     */
    public function setActionResultList($action_result_list)
    {
        if (is_null($action_result_list)) {
            throw new \InvalidArgumentException('non-nullable action_result_list cannot be null');
        }
        $this->container['action_result_list'] = $action_result_list;

        return $this;
    }

    /**
     * Gets execution_plan
     *
     * @return \OpenAPI\Client\Model\RuleExecutionPlan
     */
    public function getExecutionPlan()
    {
        return $this->container['execution_plan'];
    }

    /**
     * Sets execution_plan
     *
     * @param \OpenAPI\Client\Model\RuleExecutionPlan $execution_plan execution_plan
     *
     * @return self
     */
    public function setExecutionPlan($execution_plan)
    {
        if (is_null($execution_plan)) {
            throw new \InvalidArgumentException('non-nullable execution_plan cannot be null');
        }
        $this->container['execution_plan'] = $execution_plan;

        return $this;
    }

    /**
     * Gets execution_status
     *
     * @return string
     */
    public function getExecutionStatus()
    {
        return $this->container['execution_status'];
    }

    /**
     * Sets execution_status
     *
     * @param string $execution_status The execution status of an action or an action rule.
     *
     * @return self
     */
    public function setExecutionStatus($execution_status)
    {
        if (is_null($execution_status)) {
            throw new \InvalidArgumentException('non-nullable execution_status cannot be null');
        }
        $this->container['execution_status'] = $execution_status;

        return $this;
    }

    /**
     * Gets action_rule_reference
     *
     * @return \OpenAPI\Client\Model\ActionRuleReference
     */
    public function getActionRuleReference()
    {
        return $this->container['action_rule_reference'];
    }

    /**
     * Sets action_rule_reference
     *
     * @param \OpenAPI\Client\Model\ActionRuleReference $action_rule_reference action_rule_reference
     *
     * @return self
     */
    public function setActionRuleReference($action_rule_reference)
    {
        if (is_null($action_rule_reference)) {
            throw new \InvalidArgumentException('non-nullable action_rule_reference cannot be null');
        }
        $this->container['action_rule_reference'] = $action_rule_reference;

        return $this;
    }

    /**
     * Gets rule_parameter_values
     *
     * @return array<string,string>|null
     */
    public function getRuleParameterValues()
    {
        return $this->container['rule_parameter_values'];
    }

    /**
     * Sets rule_parameter_values
     *
     * @param array<string,string>|null $rule_parameter_values The trigger or action required input parameter value map, or the output parameters.
     *
     * @return self
     */
    public function setRuleParameterValues($rule_parameter_values)
    {
        if (is_null($rule_parameter_values)) {
            throw new \InvalidArgumentException('non-nullable rule_parameter_values cannot be null');
        }
        $this->container['rule_parameter_values'] = $rule_parameter_values;

        return $this;
    }

    /**
     * Gets execution_messages
     *
     * @return string[]|null
     */
    public function getExecutionMessages()
    {
        return $this->container['execution_messages'];
    }

    /**
     * Sets execution_messages
     *
     * @param string[]|null $execution_messages List of messages associated with rule execution.
     *
     * @return self
     */
    public function setExecutionMessages($execution_messages)
    {
        if (is_null($execution_messages)) {
            throw new \InvalidArgumentException('non-nullable execution_messages cannot be null');
        }
        $this->container['execution_messages'] = $execution_messages;

        return $this;
    }

    /**
     * Gets execution_start_time
     *
     * @return \DateTime|null
     */
    public function getExecutionStartTime()
    {
        return $this->container['execution_start_time'];
    }

    /**
     * Sets execution_start_time
     *
     * @param \DateTime|null $execution_start_time The time the first action started execution.
     *
     * @return self
     */
    public function setExecutionStartTime($execution_start_time)
    {
        if (is_null($execution_start_time)) {
            throw new \InvalidArgumentException('non-nullable execution_start_time cannot be null');
        }
        $this->container['execution_start_time'] = $execution_start_time;

        return $this;
    }

    /**
     * Gets trigger_info_list
     *
     * @return \OpenAPI\Client\Model\TriggerInfo[]
     */
    public function getTriggerInfoList()
    {
        return $this->container['trigger_info_list'];
    }

    /**
     * Sets trigger_info_list
     *
     * @param \OpenAPI\Client\Model\TriggerInfo[] $trigger_info_list The information about the triggers.
     *
     * @return self
     */
    public function setTriggerInfoList($trigger_info_list)
    {
        if (is_null($trigger_info_list)) {
            throw new \InvalidArgumentException('non-nullable trigger_info_list cannot be null');
        }
        $this->container['trigger_info_list'] = $trigger_info_list;

        return $this;
    }

    /**
     * Gets execution_end_time
     *
     * @return \DateTime|null
     */
    public function getExecutionEndTime()
    {
        return $this->container['execution_end_time'];
    }

    /**
     * Sets execution_end_time
     *
     * @param \DateTime|null $execution_end_time The time the last action finished execution.
     *
     * @return self
     */
    public function setExecutionEndTime($execution_end_time)
    {
        if (is_null($execution_end_time)) {
            throw new \InvalidArgumentException('non-nullable execution_end_time cannot be null');
        }
        $this->container['execution_end_time'] = $execution_end_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


