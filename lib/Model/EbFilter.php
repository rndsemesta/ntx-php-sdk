<?php
/**
 * EbFilter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EbFilter Class Doc Comment
 *
 * @category Class
 * @description Entitybrowser filter object definition.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EbFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'eb_filter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'rhs' => 'string',
        'alias_for_lhs' => 'string',
        'display_for_operator' => 'string',
        'lhs' => 'string',
        'display_for_rhs' => 'string',
        'filter_name' => 'string',
        'operator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'rhs' => null,
        'alias_for_lhs' => null,
        'display_for_operator' => null,
        'lhs' => null,
        'display_for_rhs' => null,
        'filter_name' => null,
        'operator' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'rhs' => false,
        'alias_for_lhs' => false,
        'display_for_operator' => false,
        'lhs' => false,
        'display_for_rhs' => false,
        'filter_name' => false,
        'operator' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rhs' => 'rhs',
        'alias_for_lhs' => 'alias_for_lhs',
        'display_for_operator' => 'display_for_operator',
        'lhs' => 'lhs',
        'display_for_rhs' => 'display_for_rhs',
        'filter_name' => 'filter_name',
        'operator' => 'operator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rhs' => 'setRhs',
        'alias_for_lhs' => 'setAliasForLhs',
        'display_for_operator' => 'setDisplayForOperator',
        'lhs' => 'setLhs',
        'display_for_rhs' => 'setDisplayForRhs',
        'filter_name' => 'setFilterName',
        'operator' => 'setOperator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rhs' => 'getRhs',
        'alias_for_lhs' => 'getAliasForLhs',
        'display_for_operator' => 'getDisplayForOperator',
        'lhs' => 'getLhs',
        'display_for_rhs' => 'getDisplayForRhs',
        'filter_name' => 'getFilterName',
        'operator' => 'getOperator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('rhs', $data ?? [], null);
        $this->setIfExists('alias_for_lhs', $data ?? [], null);
        $this->setIfExists('display_for_operator', $data ?? [], null);
        $this->setIfExists('lhs', $data ?? [], null);
        $this->setIfExists('display_for_rhs', $data ?? [], null);
        $this->setIfExists('filter_name', $data ?? [], null);
        $this->setIfExists('operator', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rhs
     *
     * @return string|null
     */
    public function getRhs()
    {
        return $this->container['rhs'];
    }

    /**
     * Sets rhs
     *
     * @param string|null $rhs Right hand side of the filter expression.
     *
     * @return self
     */
    public function setRhs($rhs)
    {
        if (is_null($rhs)) {
            throw new \InvalidArgumentException('non-nullable rhs cannot be null');
        }
        $this->container['rhs'] = $rhs;

        return $this;
    }

    /**
     * Gets alias_for_lhs
     *
     * @return string|null
     */
    public function getAliasForLhs()
    {
        return $this->container['alias_for_lhs'];
    }

    /**
     * Sets alias_for_lhs
     *
     * @param string|null $alias_for_lhs Alias for LHS of the filter expression. Used for Backend to tell UI if the filter name UI use to do group does not equal to actual one showing search bar and filter panel.
     *
     * @return self
     */
    public function setAliasForLhs($alias_for_lhs)
    {
        if (is_null($alias_for_lhs)) {
            throw new \InvalidArgumentException('non-nullable alias_for_lhs cannot be null');
        }
        $this->container['alias_for_lhs'] = $alias_for_lhs;

        return $this;
    }

    /**
     * Gets display_for_operator
     *
     * @return string|null
     */
    public function getDisplayForOperator()
    {
        return $this->container['display_for_operator'];
    }

    /**
     * Sets display_for_operator
     *
     * @param string|null $display_for_operator Display string for the operator.
     *
     * @return self
     */
    public function setDisplayForOperator($display_for_operator)
    {
        if (is_null($display_for_operator)) {
            throw new \InvalidArgumentException('non-nullable display_for_operator cannot be null');
        }
        $this->container['display_for_operator'] = $display_for_operator;

        return $this;
    }

    /**
     * Gets lhs
     *
     * @return string|null
     */
    public function getLhs()
    {
        return $this->container['lhs'];
    }

    /**
     * Sets lhs
     *
     * @param string|null $lhs Left hand side of the filter expression.
     *
     * @return self
     */
    public function setLhs($lhs)
    {
        if (is_null($lhs)) {
            throw new \InvalidArgumentException('non-nullable lhs cannot be null');
        }
        $this->container['lhs'] = $lhs;

        return $this;
    }

    /**
     * Gets display_for_rhs
     *
     * @return string|null
     */
    public function getDisplayForRhs()
    {
        return $this->container['display_for_rhs'];
    }

    /**
     * Sets display_for_rhs
     *
     * @param string|null $display_for_rhs Display for RHS value of the filter expression.
     *
     * @return self
     */
    public function setDisplayForRhs($display_for_rhs)
    {
        if (is_null($display_for_rhs)) {
            throw new \InvalidArgumentException('non-nullable display_for_rhs cannot be null');
        }
        $this->container['display_for_rhs'] = $display_for_rhs;

        return $this;
    }

    /**
     * Gets filter_name
     *
     * @return string|null
     */
    public function getFilterName()
    {
        return $this->container['filter_name'];
    }

    /**
     * Sets filter_name
     *
     * @param string|null $filter_name Filter Display name.
     *
     * @return self
     */
    public function setFilterName($filter_name)
    {
        if (is_null($filter_name)) {
            throw new \InvalidArgumentException('non-nullable filter_name cannot be null');
        }
        $this->container['filter_name'] = $filter_name;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string|null
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string|null $operator Operator that is being used in filter.
     *
     * @return self
     */
    public function setOperator($operator)
    {
        if (is_null($operator)) {
            throw new \InvalidArgumentException('non-nullable operator cannot be null');
        }
        $this->container['operator'] = $operator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


