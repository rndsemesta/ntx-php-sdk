<?php
/**
 * WhatifScenario
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WhatifScenario Class Doc Comment
 *
 * @category Class
 * @description Scenario Object.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WhatifScenario implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'whatif_scenario';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'new_cluster' => 'bool',
        'cluster_entity_type' => 'string',
        'uuid' => 'string',
        'vendor_list' => 'string[]',
        'workload_list' => '\OpenAPI\Client\Model\Workload[]',
        'recommended_runway' => '\OpenAPI\Client\Model\Runway',
        'updated_time_sec' => 'int',
        'cluster_uuid' => 'string',
        'target_runway_days' => 'int',
        'cluster_spec' => '\OpenAPI\Client\Model\ClusterSpec',
        'runway' => '\OpenAPI\Client\Model\Runway',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'new_cluster' => null,
        'cluster_entity_type' => null,
        'uuid' => 'UUID',
        'vendor_list' => null,
        'workload_list' => null,
        'recommended_runway' => null,
        'updated_time_sec' => null,
        'cluster_uuid' => 'UUID',
        'target_runway_days' => null,
        'cluster_spec' => null,
        'runway' => null,
        'name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'new_cluster' => false,
        'cluster_entity_type' => false,
        'uuid' => false,
        'vendor_list' => false,
        'workload_list' => false,
        'recommended_runway' => false,
        'updated_time_sec' => false,
        'cluster_uuid' => false,
        'target_runway_days' => false,
        'cluster_spec' => false,
        'runway' => false,
        'name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'new_cluster' => 'new_cluster',
        'cluster_entity_type' => 'cluster_entity_type',
        'uuid' => 'uuid',
        'vendor_list' => 'vendor_list',
        'workload_list' => 'workload_list',
        'recommended_runway' => 'recommended_runway',
        'updated_time_sec' => 'updated_time_sec',
        'cluster_uuid' => 'cluster_uuid',
        'target_runway_days' => 'target_runway_days',
        'cluster_spec' => 'cluster_spec',
        'runway' => 'runway',
        'name' => 'name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'new_cluster' => 'setNewCluster',
        'cluster_entity_type' => 'setClusterEntityType',
        'uuid' => 'setUuid',
        'vendor_list' => 'setVendorList',
        'workload_list' => 'setWorkloadList',
        'recommended_runway' => 'setRecommendedRunway',
        'updated_time_sec' => 'setUpdatedTimeSec',
        'cluster_uuid' => 'setClusterUuid',
        'target_runway_days' => 'setTargetRunwayDays',
        'cluster_spec' => 'setClusterSpec',
        'runway' => 'setRunway',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'new_cluster' => 'getNewCluster',
        'cluster_entity_type' => 'getClusterEntityType',
        'uuid' => 'getUuid',
        'vendor_list' => 'getVendorList',
        'workload_list' => 'getWorkloadList',
        'recommended_runway' => 'getRecommendedRunway',
        'updated_time_sec' => 'getUpdatedTimeSec',
        'cluster_uuid' => 'getClusterUuid',
        'target_runway_days' => 'getTargetRunwayDays',
        'cluster_spec' => 'getClusterSpec',
        'runway' => 'getRunway',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('new_cluster', $data ?? [], null);
        $this->setIfExists('cluster_entity_type', $data ?? [], 'cluster');
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('vendor_list', $data ?? [], null);
        $this->setIfExists('workload_list', $data ?? [], null);
        $this->setIfExists('recommended_runway', $data ?? [], null);
        $this->setIfExists('updated_time_sec', $data ?? [], null);
        $this->setIfExists('cluster_uuid', $data ?? [], null);
        $this->setIfExists('target_runway_days', $data ?? [], null);
        $this->setIfExists('cluster_spec', $data ?? [], null);
        $this->setIfExists('runway', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['uuid'])) {
            $invalidProperties[] = "invalid value for 'uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        if (!is_null($this->container['cluster_uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['cluster_uuid'])) {
            $invalidProperties[] = "invalid value for 'cluster_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets new_cluster
     *
     * @return bool|null
     */
    public function getNewCluster()
    {
        return $this->container['new_cluster'];
    }

    /**
     * Sets new_cluster
     *
     * @param bool|null $new_cluster The flag to indicate whether it is a new cluster or not.
     *
     * @return self
     */
    public function setNewCluster($new_cluster)
    {
        if (is_null($new_cluster)) {
            throw new \InvalidArgumentException('non-nullable new_cluster cannot be null');
        }
        $this->container['new_cluster'] = $new_cluster;

        return $this;
    }

    /**
     * Gets cluster_entity_type
     *
     * @return string|null
     */
    public function getClusterEntityType()
    {
        return $this->container['cluster_entity_type'];
    }

    /**
     * Sets cluster_entity_type
     *
     * @param string|null $cluster_entity_type The entity type for the cluster e.g. cluster or nutanix_vcenter__cluster.
     *
     * @return self
     */
    public function setClusterEntityType($cluster_entity_type)
    {
        if (is_null($cluster_entity_type)) {
            throw new \InvalidArgumentException('non-nullable cluster_entity_type cannot be null');
        }
        $this->container['cluster_entity_type'] = $cluster_entity_type;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid The uuid would be automatically generated when created.
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$uuid when calling WhatifScenario., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets vendor_list
     *
     * @return string[]|null
     */
    public function getVendorList()
    {
        return $this->container['vendor_list'];
    }

    /**
     * Sets vendor_list
     *
     * @param string[]|null $vendor_list vendor_list
     *
     * @return self
     */
    public function setVendorList($vendor_list)
    {
        if (is_null($vendor_list)) {
            throw new \InvalidArgumentException('non-nullable vendor_list cannot be null');
        }
        $this->container['vendor_list'] = $vendor_list;

        return $this;
    }

    /**
     * Gets workload_list
     *
     * @return \OpenAPI\Client\Model\Workload[]|null
     */
    public function getWorkloadList()
    {
        return $this->container['workload_list'];
    }

    /**
     * Sets workload_list
     *
     * @param \OpenAPI\Client\Model\Workload[]|null $workload_list workload added by user.
     *
     * @return self
     */
    public function setWorkloadList($workload_list)
    {
        if (is_null($workload_list)) {
            throw new \InvalidArgumentException('non-nullable workload_list cannot be null');
        }
        $this->container['workload_list'] = $workload_list;

        return $this;
    }

    /**
     * Gets recommended_runway
     *
     * @return \OpenAPI\Client\Model\Runway|null
     */
    public function getRecommendedRunway()
    {
        return $this->container['recommended_runway'];
    }

    /**
     * Sets recommended_runway
     *
     * @param \OpenAPI\Client\Model\Runway|null $recommended_runway recommended_runway
     *
     * @return self
     */
    public function setRecommendedRunway($recommended_runway)
    {
        if (is_null($recommended_runway)) {
            throw new \InvalidArgumentException('non-nullable recommended_runway cannot be null');
        }
        $this->container['recommended_runway'] = $recommended_runway;

        return $this;
    }

    /**
     * Gets updated_time_sec
     *
     * @return int|null
     */
    public function getUpdatedTimeSec()
    {
        return $this->container['updated_time_sec'];
    }

    /**
     * Sets updated_time_sec
     *
     * @param int|null $updated_time_sec Last updated timestamp.
     *
     * @return self
     */
    public function setUpdatedTimeSec($updated_time_sec)
    {
        if (is_null($updated_time_sec)) {
            throw new \InvalidArgumentException('non-nullable updated_time_sec cannot be null');
        }
        $this->container['updated_time_sec'] = $updated_time_sec;

        return $this;
    }

    /**
     * Gets cluster_uuid
     *
     * @return string|null
     */
    public function getClusterUuid()
    {
        return $this->container['cluster_uuid'];
    }

    /**
     * Sets cluster_uuid
     *
     * @param string|null $cluster_uuid The cluster uuid.
     *
     * @return self
     */
    public function setClusterUuid($cluster_uuid)
    {
        if (is_null($cluster_uuid)) {
            throw new \InvalidArgumentException('non-nullable cluster_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($cluster_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$cluster_uuid when calling WhatifScenario., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['cluster_uuid'] = $cluster_uuid;

        return $this;
    }

    /**
     * Gets target_runway_days
     *
     * @return int|null
     */
    public function getTargetRunwayDays()
    {
        return $this->container['target_runway_days'];
    }

    /**
     * Sets target_runway_days
     *
     * @param int|null $target_runway_days The target runway.
     *
     * @return self
     */
    public function setTargetRunwayDays($target_runway_days)
    {
        if (is_null($target_runway_days)) {
            throw new \InvalidArgumentException('non-nullable target_runway_days cannot be null');
        }
        $this->container['target_runway_days'] = $target_runway_days;

        return $this;
    }

    /**
     * Gets cluster_spec
     *
     * @return \OpenAPI\Client\Model\ClusterSpec|null
     */
    public function getClusterSpec()
    {
        return $this->container['cluster_spec'];
    }

    /**
     * Sets cluster_spec
     *
     * @param \OpenAPI\Client\Model\ClusterSpec|null $cluster_spec cluster_spec
     *
     * @return self
     */
    public function setClusterSpec($cluster_spec)
    {
        if (is_null($cluster_spec)) {
            throw new \InvalidArgumentException('non-nullable cluster_spec cannot be null');
        }
        $this->container['cluster_spec'] = $cluster_spec;

        return $this;
    }

    /**
     * Gets runway
     *
     * @return \OpenAPI\Client\Model\Runway|null
     */
    public function getRunway()
    {
        return $this->container['runway'];
    }

    /**
     * Sets runway
     *
     * @param \OpenAPI\Client\Model\Runway|null $runway runway
     *
     * @return self
     */
    public function setRunway($runway)
    {
        if (is_null($runway)) {
            throw new \InvalidArgumentException('non-nullable runway cannot be null');
        }
        $this->container['runway'] = $runway;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


