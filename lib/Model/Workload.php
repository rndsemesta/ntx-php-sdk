<?php
/**
 * Workload
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Workload Class Doc Comment
 *
 * @category Class
 * @description Workload Object.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Workload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'workload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'adjusted_workload' => '\OpenAPI\Client\Model\AdjustedWorkload',
        'sql_workload' => '\OpenAPI\Client\Model\SqlWorkload',
        'workload_name' => 'string',
        'exchange_workload' => '\OpenAPI\Client\Model\ExchangeWorkload',
        'to_remove' => 'bool',
        'enabled' => 'bool',
        'splunk_workload' => '\OpenAPI\Client\Model\SplunkWorkload',
        'vdi_workload' => '\OpenAPI\Client\Model\VdiWorkload',
        'vm_workload' => '\OpenAPI\Client\Model\VmWorkload',
        'workload_type' => 'string',
        'resource_requirement' => '\OpenAPI\Client\Model\GenericResourceSpec',
        'schedule_timestamp_sec' => 'int',
        'xen_workload' => '\OpenAPI\Client\Model\XenWorkload',
        'virtual_server_workload' => '\OpenAPI\Client\Model\VirtualServerWorkload',
        'vm_category_workload' => '\OpenAPI\Client\Model\VmCategoryWorkload'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'adjusted_workload' => null,
        'sql_workload' => null,
        'workload_name' => null,
        'exchange_workload' => null,
        'to_remove' => null,
        'enabled' => null,
        'splunk_workload' => null,
        'vdi_workload' => null,
        'vm_workload' => null,
        'workload_type' => null,
        'resource_requirement' => null,
        'schedule_timestamp_sec' => null,
        'xen_workload' => null,
        'virtual_server_workload' => null,
        'vm_category_workload' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'adjusted_workload' => false,
        'sql_workload' => false,
        'workload_name' => false,
        'exchange_workload' => false,
        'to_remove' => false,
        'enabled' => false,
        'splunk_workload' => false,
        'vdi_workload' => false,
        'vm_workload' => false,
        'workload_type' => false,
        'resource_requirement' => false,
        'schedule_timestamp_sec' => false,
        'xen_workload' => false,
        'virtual_server_workload' => false,
        'vm_category_workload' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adjusted_workload' => 'adjusted_workload',
        'sql_workload' => 'sql_workload',
        'workload_name' => 'workload_name',
        'exchange_workload' => 'exchange_workload',
        'to_remove' => 'to_remove',
        'enabled' => 'enabled',
        'splunk_workload' => 'splunk_workload',
        'vdi_workload' => 'vdi_workload',
        'vm_workload' => 'vm_workload',
        'workload_type' => 'workload_type',
        'resource_requirement' => 'resource_requirement',
        'schedule_timestamp_sec' => 'schedule_timestamp_sec',
        'xen_workload' => 'xen_workload',
        'virtual_server_workload' => 'virtual_server_workload',
        'vm_category_workload' => 'vm_category_workload'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adjusted_workload' => 'setAdjustedWorkload',
        'sql_workload' => 'setSqlWorkload',
        'workload_name' => 'setWorkloadName',
        'exchange_workload' => 'setExchangeWorkload',
        'to_remove' => 'setToRemove',
        'enabled' => 'setEnabled',
        'splunk_workload' => 'setSplunkWorkload',
        'vdi_workload' => 'setVdiWorkload',
        'vm_workload' => 'setVmWorkload',
        'workload_type' => 'setWorkloadType',
        'resource_requirement' => 'setResourceRequirement',
        'schedule_timestamp_sec' => 'setScheduleTimestampSec',
        'xen_workload' => 'setXenWorkload',
        'virtual_server_workload' => 'setVirtualServerWorkload',
        'vm_category_workload' => 'setVmCategoryWorkload'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adjusted_workload' => 'getAdjustedWorkload',
        'sql_workload' => 'getSqlWorkload',
        'workload_name' => 'getWorkloadName',
        'exchange_workload' => 'getExchangeWorkload',
        'to_remove' => 'getToRemove',
        'enabled' => 'getEnabled',
        'splunk_workload' => 'getSplunkWorkload',
        'vdi_workload' => 'getVdiWorkload',
        'vm_workload' => 'getVmWorkload',
        'workload_type' => 'getWorkloadType',
        'resource_requirement' => 'getResourceRequirement',
        'schedule_timestamp_sec' => 'getScheduleTimestampSec',
        'xen_workload' => 'getXenWorkload',
        'virtual_server_workload' => 'getVirtualServerWorkload',
        'vm_category_workload' => 'getVmCategoryWorkload'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('adjusted_workload', $data ?? [], null);
        $this->setIfExists('sql_workload', $data ?? [], null);
        $this->setIfExists('workload_name', $data ?? [], null);
        $this->setIfExists('exchange_workload', $data ?? [], null);
        $this->setIfExists('to_remove', $data ?? [], false);
        $this->setIfExists('enabled', $data ?? [], true);
        $this->setIfExists('splunk_workload', $data ?? [], null);
        $this->setIfExists('vdi_workload', $data ?? [], null);
        $this->setIfExists('vm_workload', $data ?? [], null);
        $this->setIfExists('workload_type', $data ?? [], null);
        $this->setIfExists('resource_requirement', $data ?? [], null);
        $this->setIfExists('schedule_timestamp_sec', $data ?? [], null);
        $this->setIfExists('xen_workload', $data ?? [], null);
        $this->setIfExists('virtual_server_workload', $data ?? [], null);
        $this->setIfExists('vm_category_workload', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adjusted_workload
     *
     * @return \OpenAPI\Client\Model\AdjustedWorkload|null
     */
    public function getAdjustedWorkload()
    {
        return $this->container['adjusted_workload'];
    }

    /**
     * Sets adjusted_workload
     *
     * @param \OpenAPI\Client\Model\AdjustedWorkload|null $adjusted_workload adjusted_workload
     *
     * @return self
     */
    public function setAdjustedWorkload($adjusted_workload)
    {
        if (is_null($adjusted_workload)) {
            throw new \InvalidArgumentException('non-nullable adjusted_workload cannot be null');
        }
        $this->container['adjusted_workload'] = $adjusted_workload;

        return $this;
    }

    /**
     * Gets sql_workload
     *
     * @return \OpenAPI\Client\Model\SqlWorkload|null
     */
    public function getSqlWorkload()
    {
        return $this->container['sql_workload'];
    }

    /**
     * Sets sql_workload
     *
     * @param \OpenAPI\Client\Model\SqlWorkload|null $sql_workload sql_workload
     *
     * @return self
     */
    public function setSqlWorkload($sql_workload)
    {
        if (is_null($sql_workload)) {
            throw new \InvalidArgumentException('non-nullable sql_workload cannot be null');
        }
        $this->container['sql_workload'] = $sql_workload;

        return $this;
    }

    /**
     * Gets workload_name
     *
     * @return string|null
     */
    public function getWorkloadName()
    {
        return $this->container['workload_name'];
    }

    /**
     * Sets workload_name
     *
     * @param string|null $workload_name Workload name.
     *
     * @return self
     */
    public function setWorkloadName($workload_name)
    {
        if (is_null($workload_name)) {
            throw new \InvalidArgumentException('non-nullable workload_name cannot be null');
        }
        $this->container['workload_name'] = $workload_name;

        return $this;
    }

    /**
     * Gets exchange_workload
     *
     * @return \OpenAPI\Client\Model\ExchangeWorkload|null
     */
    public function getExchangeWorkload()
    {
        return $this->container['exchange_workload'];
    }

    /**
     * Sets exchange_workload
     *
     * @param \OpenAPI\Client\Model\ExchangeWorkload|null $exchange_workload exchange_workload
     *
     * @return self
     */
    public function setExchangeWorkload($exchange_workload)
    {
        if (is_null($exchange_workload)) {
            throw new \InvalidArgumentException('non-nullable exchange_workload cannot be null');
        }
        $this->container['exchange_workload'] = $exchange_workload;

        return $this;
    }

    /**
     * Gets to_remove
     *
     * @return bool|null
     */
    public function getToRemove()
    {
        return $this->container['to_remove'];
    }

    /**
     * Sets to_remove
     *
     * @param bool|null $to_remove The variable to indicated if the workload is used as removed workload.
     *
     * @return self
     */
    public function setToRemove($to_remove)
    {
        if (is_null($to_remove)) {
            throw new \InvalidArgumentException('non-nullable to_remove cannot be null');
        }
        $this->container['to_remove'] = $to_remove;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled The variable to indicate if the workload is enabled.
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets splunk_workload
     *
     * @return \OpenAPI\Client\Model\SplunkWorkload|null
     */
    public function getSplunkWorkload()
    {
        return $this->container['splunk_workload'];
    }

    /**
     * Sets splunk_workload
     *
     * @param \OpenAPI\Client\Model\SplunkWorkload|null $splunk_workload splunk_workload
     *
     * @return self
     */
    public function setSplunkWorkload($splunk_workload)
    {
        if (is_null($splunk_workload)) {
            throw new \InvalidArgumentException('non-nullable splunk_workload cannot be null');
        }
        $this->container['splunk_workload'] = $splunk_workload;

        return $this;
    }

    /**
     * Gets vdi_workload
     *
     * @return \OpenAPI\Client\Model\VdiWorkload|null
     */
    public function getVdiWorkload()
    {
        return $this->container['vdi_workload'];
    }

    /**
     * Sets vdi_workload
     *
     * @param \OpenAPI\Client\Model\VdiWorkload|null $vdi_workload vdi_workload
     *
     * @return self
     */
    public function setVdiWorkload($vdi_workload)
    {
        if (is_null($vdi_workload)) {
            throw new \InvalidArgumentException('non-nullable vdi_workload cannot be null');
        }
        $this->container['vdi_workload'] = $vdi_workload;

        return $this;
    }

    /**
     * Gets vm_workload
     *
     * @return \OpenAPI\Client\Model\VmWorkload|null
     */
    public function getVmWorkload()
    {
        return $this->container['vm_workload'];
    }

    /**
     * Sets vm_workload
     *
     * @param \OpenAPI\Client\Model\VmWorkload|null $vm_workload vm_workload
     *
     * @return self
     */
    public function setVmWorkload($vm_workload)
    {
        if (is_null($vm_workload)) {
            throw new \InvalidArgumentException('non-nullable vm_workload cannot be null');
        }
        $this->container['vm_workload'] = $vm_workload;

        return $this;
    }

    /**
     * Gets workload_type
     *
     * @return string|null
     */
    public function getWorkloadType()
    {
        return $this->container['workload_type'];
    }

    /**
     * Sets workload_type
     *
     * @param string|null $workload_type The type of workload.
     *
     * @return self
     */
    public function setWorkloadType($workload_type)
    {
        if (is_null($workload_type)) {
            throw new \InvalidArgumentException('non-nullable workload_type cannot be null');
        }
        $this->container['workload_type'] = $workload_type;

        return $this;
    }

    /**
     * Gets resource_requirement
     *
     * @return \OpenAPI\Client\Model\GenericResourceSpec|null
     */
    public function getResourceRequirement()
    {
        return $this->container['resource_requirement'];
    }

    /**
     * Sets resource_requirement
     *
     * @param \OpenAPI\Client\Model\GenericResourceSpec|null $resource_requirement resource_requirement
     *
     * @return self
     */
    public function setResourceRequirement($resource_requirement)
    {
        if (is_null($resource_requirement)) {
            throw new \InvalidArgumentException('non-nullable resource_requirement cannot be null');
        }
        $this->container['resource_requirement'] = $resource_requirement;

        return $this;
    }

    /**
     * Gets schedule_timestamp_sec
     *
     * @return int|null
     */
    public function getScheduleTimestampSec()
    {
        return $this->container['schedule_timestamp_sec'];
    }

    /**
     * Sets schedule_timestamp_sec
     *
     * @param int|null $schedule_timestamp_sec The scheduled timestamp in seconds.
     *
     * @return self
     */
    public function setScheduleTimestampSec($schedule_timestamp_sec)
    {
        if (is_null($schedule_timestamp_sec)) {
            throw new \InvalidArgumentException('non-nullable schedule_timestamp_sec cannot be null');
        }
        $this->container['schedule_timestamp_sec'] = $schedule_timestamp_sec;

        return $this;
    }

    /**
     * Gets xen_workload
     *
     * @return \OpenAPI\Client\Model\XenWorkload|null
     */
    public function getXenWorkload()
    {
        return $this->container['xen_workload'];
    }

    /**
     * Sets xen_workload
     *
     * @param \OpenAPI\Client\Model\XenWorkload|null $xen_workload xen_workload
     *
     * @return self
     */
    public function setXenWorkload($xen_workload)
    {
        if (is_null($xen_workload)) {
            throw new \InvalidArgumentException('non-nullable xen_workload cannot be null');
        }
        $this->container['xen_workload'] = $xen_workload;

        return $this;
    }

    /**
     * Gets virtual_server_workload
     *
     * @return \OpenAPI\Client\Model\VirtualServerWorkload|null
     */
    public function getVirtualServerWorkload()
    {
        return $this->container['virtual_server_workload'];
    }

    /**
     * Sets virtual_server_workload
     *
     * @param \OpenAPI\Client\Model\VirtualServerWorkload|null $virtual_server_workload virtual_server_workload
     *
     * @return self
     */
    public function setVirtualServerWorkload($virtual_server_workload)
    {
        if (is_null($virtual_server_workload)) {
            throw new \InvalidArgumentException('non-nullable virtual_server_workload cannot be null');
        }
        $this->container['virtual_server_workload'] = $virtual_server_workload;

        return $this;
    }

    /**
     * Gets vm_category_workload
     *
     * @return \OpenAPI\Client\Model\VmCategoryWorkload|null
     */
    public function getVmCategoryWorkload()
    {
        return $this->container['vm_category_workload'];
    }

    /**
     * Sets vm_category_workload
     *
     * @param \OpenAPI\Client\Model\VmCategoryWorkload|null $vm_category_workload vm_category_workload
     *
     * @return self
     */
    public function setVmCategoryWorkload($vm_category_workload)
    {
        if (is_null($vm_category_workload)) {
            throw new \InvalidArgumentException('non-nullable vm_category_workload cannot be null');
        }
        $this->container['vm_category_workload'] = $vm_category_workload;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


