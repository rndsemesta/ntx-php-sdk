<?php
/**
 * ActionServiceParamValue
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ActionServiceParamValue Class Doc Comment
 *
 * @category Class
 * @description Scalar value object that handles different types
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ActionServiceParamValue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'action_service_param_value';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'double_value' => 'float',
        'file_value' => '\OpenAPI\Client\Model\ActionServiceFileValue',
        'string_value' => 'string',
        'bytes_value' => 'string',
        'long_value' => 'int',
        'entity_info' => '\OpenAPI\Client\Model\EntityInfo',
        'bool_value' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'double_value' => 'double',
        'file_value' => null,
        'string_value' => null,
        'bytes_value' => 'byte',
        'long_value' => 'int64',
        'entity_info' => null,
        'bool_value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'double_value' => false,
        'file_value' => false,
        'string_value' => false,
        'bytes_value' => false,
        'long_value' => false,
        'entity_info' => false,
        'bool_value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'double_value' => 'double_value',
        'file_value' => 'file_value',
        'string_value' => 'string_value',
        'bytes_value' => 'bytes_value',
        'long_value' => 'long_value',
        'entity_info' => 'entity_info',
        'bool_value' => 'bool_value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'double_value' => 'setDoubleValue',
        'file_value' => 'setFileValue',
        'string_value' => 'setStringValue',
        'bytes_value' => 'setBytesValue',
        'long_value' => 'setLongValue',
        'entity_info' => 'setEntityInfo',
        'bool_value' => 'setBoolValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'double_value' => 'getDoubleValue',
        'file_value' => 'getFileValue',
        'string_value' => 'getStringValue',
        'bytes_value' => 'getBytesValue',
        'long_value' => 'getLongValue',
        'entity_info' => 'getEntityInfo',
        'bool_value' => 'getBoolValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('double_value', $data ?? [], null);
        $this->setIfExists('file_value', $data ?? [], null);
        $this->setIfExists('string_value', $data ?? [], null);
        $this->setIfExists('bytes_value', $data ?? [], null);
        $this->setIfExists('long_value', $data ?? [], null);
        $this->setIfExists('entity_info', $data ?? [], null);
        $this->setIfExists('bool_value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['string_value']) && (mb_strlen($this->container['string_value']) > 2000)) {
            $invalidProperties[] = "invalid value for 'string_value', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['bytes_value']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['bytes_value'])) {
            $invalidProperties[] = "invalid value for 'bytes_value', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets double_value
     *
     * @return float|null
     */
    public function getDoubleValue()
    {
        return $this->container['double_value'];
    }

    /**
     * Sets double_value
     *
     * @param float|null $double_value double_value
     *
     * @return self
     */
    public function setDoubleValue($double_value)
    {
        if (is_null($double_value)) {
            throw new \InvalidArgumentException('non-nullable double_value cannot be null');
        }
        $this->container['double_value'] = $double_value;

        return $this;
    }

    /**
     * Gets file_value
     *
     * @return \OpenAPI\Client\Model\ActionServiceFileValue|null
     */
    public function getFileValue()
    {
        return $this->container['file_value'];
    }

    /**
     * Sets file_value
     *
     * @param \OpenAPI\Client\Model\ActionServiceFileValue|null $file_value file_value
     *
     * @return self
     */
    public function setFileValue($file_value)
    {
        if (is_null($file_value)) {
            throw new \InvalidArgumentException('non-nullable file_value cannot be null');
        }
        $this->container['file_value'] = $file_value;

        return $this;
    }

    /**
     * Gets string_value
     *
     * @return string|null
     */
    public function getStringValue()
    {
        return $this->container['string_value'];
    }

    /**
     * Sets string_value
     *
     * @param string|null $string_value string_value
     *
     * @return self
     */
    public function setStringValue($string_value)
    {
        if (is_null($string_value)) {
            throw new \InvalidArgumentException('non-nullable string_value cannot be null');
        }
        if ((mb_strlen($string_value) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $string_value when calling ActionServiceParamValue., must be smaller than or equal to 2000.');
        }

        $this->container['string_value'] = $string_value;

        return $this;
    }

    /**
     * Gets bytes_value
     *
     * @return string|null
     */
    public function getBytesValue()
    {
        return $this->container['bytes_value'];
    }

    /**
     * Sets bytes_value
     *
     * @param string|null $bytes_value bytes_value
     *
     * @return self
     */
    public function setBytesValue($bytes_value)
    {
        if (is_null($bytes_value)) {
            throw new \InvalidArgumentException('non-nullable bytes_value cannot be null');
        }

        if ((!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", ObjectSerializer::toString($bytes_value)))) {
            throw new \InvalidArgumentException("invalid value for \$bytes_value when calling ActionServiceParamValue., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['bytes_value'] = $bytes_value;

        return $this;
    }

    /**
     * Gets long_value
     *
     * @return int|null
     */
    public function getLongValue()
    {
        return $this->container['long_value'];
    }

    /**
     * Sets long_value
     *
     * @param int|null $long_value long_value
     *
     * @return self
     */
    public function setLongValue($long_value)
    {
        if (is_null($long_value)) {
            throw new \InvalidArgumentException('non-nullable long_value cannot be null');
        }
        $this->container['long_value'] = $long_value;

        return $this;
    }

    /**
     * Gets entity_info
     *
     * @return \OpenAPI\Client\Model\EntityInfo|null
     */
    public function getEntityInfo()
    {
        return $this->container['entity_info'];
    }

    /**
     * Sets entity_info
     *
     * @param \OpenAPI\Client\Model\EntityInfo|null $entity_info entity_info
     *
     * @return self
     */
    public function setEntityInfo($entity_info)
    {
        if (is_null($entity_info)) {
            throw new \InvalidArgumentException('non-nullable entity_info cannot be null');
        }
        $this->container['entity_info'] = $entity_info;

        return $this;
    }

    /**
     * Gets bool_value
     *
     * @return bool|null
     */
    public function getBoolValue()
    {
        return $this->container['bool_value'];
    }

    /**
     * Sets bool_value
     *
     * @param bool|null $bool_value bool_value
     *
     * @return self
     */
    public function setBoolValue($bool_value)
    {
        if (is_null($bool_value)) {
            throw new \InvalidArgumentException('non-nullable bool_value cannot be null');
        }
        $this->container['bool_value'] = $bool_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


