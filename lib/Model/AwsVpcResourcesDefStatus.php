<?php
/**
 * AwsVpcResourcesDefStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AwsVpcResourcesDefStatus Class Doc Comment
 *
 * @category Class
 * @description AWS VPC resources
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AwsVpcResourcesDefStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'aws_vpc_resources_def_status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'instance_tenancy' => 'string',
        'classic_link_enabled' => 'bool',
        'is_default' => 'bool',
        'state' => 'string',
        'cidr_block' => 'string',
        'tag_list' => '\OpenAPI\Client\Model\AwsTagListInner[]',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'instance_tenancy' => null,
        'classic_link_enabled' => null,
        'is_default' => null,
        'state' => null,
        'cidr_block' => null,
        'tag_list' => null,
        'id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'instance_tenancy' => false,
        'classic_link_enabled' => false,
        'is_default' => false,
        'state' => false,
        'cidr_block' => false,
        'tag_list' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'instance_tenancy' => 'instance_tenancy',
        'classic_link_enabled' => 'classic_link_enabled',
        'is_default' => 'is_default',
        'state' => 'state',
        'cidr_block' => 'cidr_block',
        'tag_list' => 'tag_list',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'instance_tenancy' => 'setInstanceTenancy',
        'classic_link_enabled' => 'setClassicLinkEnabled',
        'is_default' => 'setIsDefault',
        'state' => 'setState',
        'cidr_block' => 'setCidrBlock',
        'tag_list' => 'setTagList',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'instance_tenancy' => 'getInstanceTenancy',
        'classic_link_enabled' => 'getClassicLinkEnabled',
        'is_default' => 'getIsDefault',
        'state' => 'getState',
        'cidr_block' => 'getCidrBlock',
        'tag_list' => 'getTagList',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('instance_tenancy', $data ?? [], null);
        $this->setIfExists('classic_link_enabled', $data ?? [], null);
        $this->setIfExists('is_default', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('cidr_block', $data ?? [], null);
        $this->setIfExists('tag_list', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['cidr_block']) && (mb_strlen($this->container['cidr_block']) > 64)) {
            $invalidProperties[] = "invalid value for 'cidr_block', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['id']) && !preg_match("/^vpc-[a-f0-9]{1,17}$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^vpc-[a-f0-9]{1,17}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets instance_tenancy
     *
     * @return string|null
     */
    public function getInstanceTenancy()
    {
        return $this->container['instance_tenancy'];
    }

    /**
     * Sets instance_tenancy
     *
     * @param string|null $instance_tenancy The supported tenancy options for instances launched into the VPC.
     *
     * @return self
     */
    public function setInstanceTenancy($instance_tenancy)
    {
        if (is_null($instance_tenancy)) {
            throw new \InvalidArgumentException('non-nullable instance_tenancy cannot be null');
        }
        $this->container['instance_tenancy'] = $instance_tenancy;

        return $this;
    }

    /**
     * Gets classic_link_enabled
     *
     * @return bool|null
     */
    public function getClassicLinkEnabled()
    {
        return $this->container['classic_link_enabled'];
    }

    /**
     * Sets classic_link_enabled
     *
     * @param bool|null $classic_link_enabled Whether ClassicLink is enabled.
     *
     * @return self
     */
    public function setClassicLinkEnabled($classic_link_enabled)
    {
        if (is_null($classic_link_enabled)) {
            throw new \InvalidArgumentException('non-nullable classic_link_enabled cannot be null');
        }
        $this->container['classic_link_enabled'] = $classic_link_enabled;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default Whether the VPC is the default VPC.
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        if (is_null($is_default)) {
            throw new \InvalidArgumentException('non-nullable is_default cannot be null');
        }
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State of the AWS resource
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets cidr_block
     *
     * @return string|null
     */
    public function getCidrBlock()
    {
        return $this->container['cidr_block'];
    }

    /**
     * Sets cidr_block
     *
     * @param string|null $cidr_block The CIDR block for the VPC.
     *
     * @return self
     */
    public function setCidrBlock($cidr_block)
    {
        if (is_null($cidr_block)) {
            throw new \InvalidArgumentException('non-nullable cidr_block cannot be null');
        }
        if ((mb_strlen($cidr_block) > 64)) {
            throw new \InvalidArgumentException('invalid length for $cidr_block when calling AwsVpcResourcesDefStatus., must be smaller than or equal to 64.');
        }

        $this->container['cidr_block'] = $cidr_block;

        return $this;
    }

    /**
     * Gets tag_list
     *
     * @return \OpenAPI\Client\Model\AwsTagListInner[]|null
     */
    public function getTagList()
    {
        return $this->container['tag_list'];
    }

    /**
     * Sets tag_list
     *
     * @param \OpenAPI\Client\Model\AwsTagListInner[]|null $tag_list The AWS Tags associated with any AWS resource
     *
     * @return self
     */
    public function setTagList($tag_list)
    {
        if (is_null($tag_list)) {
            throw new \InvalidArgumentException('non-nullable tag_list cannot be null');
        }
        $this->container['tag_list'] = $tag_list;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The AWS ID of the VPC.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if ((!preg_match("/^vpc-[a-f0-9]{1,17}$/", ObjectSerializer::toString($id)))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling AwsVpcResourcesDefStatus., must conform to the pattern /^vpc-[a-f0-9]{1,17}$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


