<?php
/**
 * ClusterSpec
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ClusterSpec Class Doc Comment
 *
 * @category Class
 * @description Cluster Configuration Object.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClusterSpec implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'cluster_spec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'data_store_config' => '\OpenAPI\Client\Model\DataStoreConfig',
        'node_spec_list' => '\OpenAPI\Client\Model\NodeSpec[]',
        'effective_capacity' => '\OpenAPI\Client\Model\GenericResourceSpec',
        'resource_list' => '\OpenAPI\Client\Model\ResourceTimeSeries[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'data_store_config' => null,
        'node_spec_list' => null,
        'effective_capacity' => null,
        'resource_list' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'data_store_config' => false,
        'node_spec_list' => false,
        'effective_capacity' => false,
        'resource_list' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_store_config' => 'data_store_config',
        'node_spec_list' => 'node_spec_list',
        'effective_capacity' => 'effective_capacity',
        'resource_list' => 'resource_list'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_store_config' => 'setDataStoreConfig',
        'node_spec_list' => 'setNodeSpecList',
        'effective_capacity' => 'setEffectiveCapacity',
        'resource_list' => 'setResourceList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_store_config' => 'getDataStoreConfig',
        'node_spec_list' => 'getNodeSpecList',
        'effective_capacity' => 'getEffectiveCapacity',
        'resource_list' => 'getResourceList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('data_store_config', $data ?? [], null);
        $this->setIfExists('node_spec_list', $data ?? [], null);
        $this->setIfExists('effective_capacity', $data ?? [], null);
        $this->setIfExists('resource_list', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data_store_config
     *
     * @return \OpenAPI\Client\Model\DataStoreConfig|null
     */
    public function getDataStoreConfig()
    {
        return $this->container['data_store_config'];
    }

    /**
     * Sets data_store_config
     *
     * @param \OpenAPI\Client\Model\DataStoreConfig|null $data_store_config data_store_config
     *
     * @return self
     */
    public function setDataStoreConfig($data_store_config)
    {
        if (is_null($data_store_config)) {
            throw new \InvalidArgumentException('non-nullable data_store_config cannot be null');
        }
        $this->container['data_store_config'] = $data_store_config;

        return $this;
    }

    /**
     * Gets node_spec_list
     *
     * @return \OpenAPI\Client\Model\NodeSpec[]|null
     */
    public function getNodeSpecList()
    {
        return $this->container['node_spec_list'];
    }

    /**
     * Sets node_spec_list
     *
     * @param \OpenAPI\Client\Model\NodeSpec[]|null $node_spec_list node_spec_list
     *
     * @return self
     */
    public function setNodeSpecList($node_spec_list)
    {
        if (is_null($node_spec_list)) {
            throw new \InvalidArgumentException('non-nullable node_spec_list cannot be null');
        }
        $this->container['node_spec_list'] = $node_spec_list;

        return $this;
    }

    /**
     * Gets effective_capacity
     *
     * @return \OpenAPI\Client\Model\GenericResourceSpec|null
     */
    public function getEffectiveCapacity()
    {
        return $this->container['effective_capacity'];
    }

    /**
     * Sets effective_capacity
     *
     * @param \OpenAPI\Client\Model\GenericResourceSpec|null $effective_capacity effective_capacity
     *
     * @return self
     */
    public function setEffectiveCapacity($effective_capacity)
    {
        if (is_null($effective_capacity)) {
            throw new \InvalidArgumentException('non-nullable effective_capacity cannot be null');
        }
        $this->container['effective_capacity'] = $effective_capacity;

        return $this;
    }

    /**
     * Gets resource_list
     *
     * @return \OpenAPI\Client\Model\ResourceTimeSeries[]|null
     */
    public function getResourceList()
    {
        return $this->container['resource_list'];
    }

    /**
     * Sets resource_list
     *
     * @param \OpenAPI\Client\Model\ResourceTimeSeries[]|null $resource_list resource_list
     *
     * @return self
     */
    public function setResourceList($resource_list)
    {
        if (is_null($resource_list)) {
            throw new \InvalidArgumentException('non-nullable resource_list cannot be null');
        }
        $this->container['resource_list'] = $resource_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


