<?php
/**
 * ActionServiceComponentType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ActionServiceComponentType Class Doc Comment
 *
 * @category Class
 * @description This is the generic construct for both action type and trigger type.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ActionServiceComponentType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'action_service_component_type';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_name' => 'string',
        'global_parameters' => 'object',
        'input_parameters' => 'object',
        'is_disabled' => 'bool',
        'description' => 'string',
        'additional_info_severity' => 'string',
        'group_list' => 'string[]',
        'local_parameters' => 'object',
        'output_parameters' => 'object',
        'ui_metadata' => '\OpenAPI\Client\Model\DisplayMetadata[]',
        'additional_info' => 'string',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_name' => null,
        'global_parameters' => null,
        'input_parameters' => null,
        'is_disabled' => null,
        'description' => null,
        'additional_info_severity' => null,
        'group_list' => null,
        'local_parameters' => null,
        'output_parameters' => null,
        'ui_metadata' => null,
        'additional_info' => null,
        'name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'display_name' => false,
        'global_parameters' => false,
        'input_parameters' => false,
        'is_disabled' => false,
        'description' => false,
        'additional_info_severity' => false,
        'group_list' => false,
        'local_parameters' => false,
        'output_parameters' => false,
        'ui_metadata' => false,
        'additional_info' => false,
        'name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_name' => 'display_name',
        'global_parameters' => 'global_parameters',
        'input_parameters' => 'input_parameters',
        'is_disabled' => 'is_disabled',
        'description' => 'description',
        'additional_info_severity' => 'additional_info_severity',
        'group_list' => 'group_list',
        'local_parameters' => 'local_parameters',
        'output_parameters' => 'output_parameters',
        'ui_metadata' => 'ui_metadata',
        'additional_info' => 'additional_info',
        'name' => 'name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_name' => 'setDisplayName',
        'global_parameters' => 'setGlobalParameters',
        'input_parameters' => 'setInputParameters',
        'is_disabled' => 'setIsDisabled',
        'description' => 'setDescription',
        'additional_info_severity' => 'setAdditionalInfoSeverity',
        'group_list' => 'setGroupList',
        'local_parameters' => 'setLocalParameters',
        'output_parameters' => 'setOutputParameters',
        'ui_metadata' => 'setUiMetadata',
        'additional_info' => 'setAdditionalInfo',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_name' => 'getDisplayName',
        'global_parameters' => 'getGlobalParameters',
        'input_parameters' => 'getInputParameters',
        'is_disabled' => 'getIsDisabled',
        'description' => 'getDescription',
        'additional_info_severity' => 'getAdditionalInfoSeverity',
        'group_list' => 'getGroupList',
        'local_parameters' => 'getLocalParameters',
        'output_parameters' => 'getOutputParameters',
        'ui_metadata' => 'getUiMetadata',
        'additional_info' => 'getAdditionalInfo',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('global_parameters', $data ?? [], null);
        $this->setIfExists('input_parameters', $data ?? [], null);
        $this->setIfExists('is_disabled', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('additional_info_severity', $data ?? [], null);
        $this->setIfExists('group_list', $data ?? [], null);
        $this->setIfExists('local_parameters', $data ?? [], null);
        $this->setIfExists('output_parameters', $data ?? [], null);
        $this->setIfExists('ui_metadata', $data ?? [], null);
        $this->setIfExists('additional_info', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ((mb_strlen($this->container['display_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be smaller than or equal to 64.";
        }

        if (!preg_match("/^[^&<>'\/\"]*$/", $this->container['display_name'])) {
            $invalidProperties[] = "invalid value for 'display_name', must be conform to the pattern /^[^&<>'\/\"]*$/.";
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!preg_match("/^[^&<>'\/\"]*$/", $this->container['description'])) {
            $invalidProperties[] = "invalid value for 'description', must be conform to the pattern /^[^&<>'\/\"]*$/.";
        }

        if (!is_null($this->container['additional_info']) && (mb_strlen($this->container['additional_info']) > 8192)) {
            $invalidProperties[] = "invalid value for 'additional_info', the character length must be smaller than or equal to 8192.";
        }

        if (!is_null($this->container['additional_info']) && !preg_match("/^[^&<>'\/\"]*$/", $this->container['additional_info'])) {
            $invalidProperties[] = "invalid value for 'additional_info', must be conform to the pattern /^[^&<>'\/\"]*$/.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 64)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 64.";
        }

        if (!preg_match("/^[^&<>'\/\"]*$/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /^[^&<>'\/\"]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name Action service component display name.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        if ((mb_strlen($display_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling ActionServiceComponentType., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[^&<>'\/\"]*$/", ObjectSerializer::toString($display_name)))) {
            throw new \InvalidArgumentException("invalid value for \$display_name when calling ActionServiceComponentType., must conform to the pattern /^[^&<>'\/\"]*$/.");
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets global_parameters
     *
     * @return object|null
     */
    public function getGlobalParameters()
    {
        return $this->container['global_parameters'];
    }

    /**
     * Sets global_parameters
     *
     * @param object|null $global_parameters The rule parameters globally available to every component to use. This is provided by system, not by action type or trigger type service.
     *
     * @return self
     */
    public function setGlobalParameters($global_parameters)
    {
        if (is_null($global_parameters)) {
            throw new \InvalidArgumentException('non-nullable global_parameters cannot be null');
        }
        $this->container['global_parameters'] = $global_parameters;

        return $this;
    }

    /**
     * Gets input_parameters
     *
     * @return object|null
     */
    public function getInputParameters()
    {
        return $this->container['input_parameters'];
    }

    /**
     * Sets input_parameters
     *
     * @param object|null $input_parameters The component required input parameter descriptors.  The key is the parameter name
     *
     * @return self
     */
    public function setInputParameters($input_parameters)
    {
        if (is_null($input_parameters)) {
            throw new \InvalidArgumentException('non-nullable input_parameters cannot be null');
        }
        $this->container['input_parameters'] = $input_parameters;

        return $this;
    }

    /**
     * Gets is_disabled
     *
     * @return bool|null
     */
    public function getIsDisabled()
    {
        return $this->container['is_disabled'];
    }

    /**
     * Sets is_disabled
     *
     * @param bool|null $is_disabled Flag to indicate if this action/trigger type is disabled.
     *
     * @return self
     */
    public function setIsDisabled($is_disabled)
    {
        if (is_null($is_disabled)) {
            throw new \InvalidArgumentException('non-nullable is_disabled cannot be null');
        }
        $this->container['is_disabled'] = $is_disabled;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Action service component type description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ActionServiceComponentType., must be smaller than or equal to 255.');
        }
        if ((!preg_match("/^[^&<>'\/\"]*$/", ObjectSerializer::toString($description)))) {
            throw new \InvalidArgumentException("invalid value for \$description when calling ActionServiceComponentType., must conform to the pattern /^[^&<>'\/\"]*$/.");
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets additional_info_severity
     *
     * @return string|null
     */
    public function getAdditionalInfoSeverity()
    {
        return $this->container['additional_info_severity'];
    }

    /**
     * Sets additional_info_severity
     *
     * @param string|null $additional_info_severity Severity of additional info provided.
     *
     * @return self
     */
    public function setAdditionalInfoSeverity($additional_info_severity)
    {
        if (is_null($additional_info_severity)) {
            throw new \InvalidArgumentException('non-nullable additional_info_severity cannot be null');
        }
        $this->container['additional_info_severity'] = $additional_info_severity;

        return $this;
    }

    /**
     * Gets group_list
     *
     * @return string[]|null
     */
    public function getGroupList()
    {
        return $this->container['group_list'];
    }

    /**
     * Sets group_list
     *
     * @param string[]|null $group_list The group/bucket in which the component falls into.
     *
     * @return self
     */
    public function setGroupList($group_list)
    {
        if (is_null($group_list)) {
            throw new \InvalidArgumentException('non-nullable group_list cannot be null');
        }
        $this->container['group_list'] = $group_list;

        return $this;
    }

    /**
     * Gets local_parameters
     *
     * @return object|null
     */
    public function getLocalParameters()
    {
        return $this->container['local_parameters'];
    }

    /**
     * Sets local_parameters
     *
     * @param object|null $local_parameters The rule parameters available locally to the action/trigger.
     *
     * @return self
     */
    public function setLocalParameters($local_parameters)
    {
        if (is_null($local_parameters)) {
            throw new \InvalidArgumentException('non-nullable local_parameters cannot be null');
        }
        $this->container['local_parameters'] = $local_parameters;

        return $this;
    }

    /**
     * Gets output_parameters
     *
     * @return object|null
     */
    public function getOutputParameters()
    {
        return $this->container['output_parameters'];
    }

    /**
     * Sets output_parameters
     *
     * @param object|null $output_parameters The component output parameter descriptors. The key is the parameter name.
     *
     * @return self
     */
    public function setOutputParameters($output_parameters)
    {
        if (is_null($output_parameters)) {
            throw new \InvalidArgumentException('non-nullable output_parameters cannot be null');
        }
        $this->container['output_parameters'] = $output_parameters;

        return $this;
    }

    /**
     * Gets ui_metadata
     *
     * @return \OpenAPI\Client\Model\DisplayMetadata[]|null
     */
    public function getUiMetadata()
    {
        return $this->container['ui_metadata'];
    }

    /**
     * Sets ui_metadata
     *
     * @param \OpenAPI\Client\Model\DisplayMetadata[]|null $ui_metadata The metadata of form fields/params required for UI to render params.
     *
     * @return self
     */
    public function setUiMetadata($ui_metadata)
    {
        if (is_null($ui_metadata)) {
            throw new \InvalidArgumentException('non-nullable ui_metadata cannot be null');
        }
        $this->container['ui_metadata'] = $ui_metadata;

        return $this;
    }

    /**
     * Gets additional_info
     *
     * @return string|null
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param string|null $additional_info Additional information about the action/trigger type.
     *
     * @return self
     */
    public function setAdditionalInfo($additional_info)
    {
        if (is_null($additional_info)) {
            throw new \InvalidArgumentException('non-nullable additional_info cannot be null');
        }
        if ((mb_strlen($additional_info) > 8192)) {
            throw new \InvalidArgumentException('invalid length for $additional_info when calling ActionServiceComponentType., must be smaller than or equal to 8192.');
        }
        if ((!preg_match("/^[^&<>'\/\"]*$/", ObjectSerializer::toString($additional_info)))) {
            throw new \InvalidArgumentException("invalid value for \$additional_info when calling ActionServiceComponentType., must conform to the pattern /^[^&<>'\/\"]*$/.");
        }

        $this->container['additional_info'] = $additional_info;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A preconfigured, or dynamically created component type.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ActionServiceComponentType., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[^&<>'\/\"]*$/", ObjectSerializer::toString($name)))) {
            throw new \InvalidArgumentException("invalid value for \$name when calling ActionServiceComponentType., must conform to the pattern /^[^&<>'\/\"]*$/.");
        }

        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


