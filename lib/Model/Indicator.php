<?php
/**
 * Indicator
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Indicator Class Doc Comment
 *
 * @category Class
 * @description It is a symptom that caused the alert.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Indicator implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'indicator';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'metric_display_name' => 'string',
        'metric_name' => 'string',
        'trigger_time' => '\DateTime',
        'condition_type' => 'string',
        'threshold' => '\OpenAPI\Client\Model\ParamValue',
        'last_value' => '\OpenAPI\Client\Model\ParamValue',
        'comparison_operator' => 'string',
        'unit' => 'string',
        'wait_time_in_usecs' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'metric_display_name' => null,
        'metric_name' => null,
        'trigger_time' => 'date-time',
        'condition_type' => null,
        'threshold' => null,
        'last_value' => null,
        'comparison_operator' => null,
        'unit' => null,
        'wait_time_in_usecs' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'metric_display_name' => false,
        'metric_name' => false,
        'trigger_time' => false,
        'condition_type' => false,
        'threshold' => false,
        'last_value' => false,
        'comparison_operator' => false,
        'unit' => false,
        'wait_time_in_usecs' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'metric_display_name' => 'metric_display_name',
        'metric_name' => 'metric_name',
        'trigger_time' => 'trigger_time',
        'condition_type' => 'condition_type',
        'threshold' => 'threshold',
        'last_value' => 'last_value',
        'comparison_operator' => 'comparison_operator',
        'unit' => 'unit',
        'wait_time_in_usecs' => 'wait_time_in_usecs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'metric_display_name' => 'setMetricDisplayName',
        'metric_name' => 'setMetricName',
        'trigger_time' => 'setTriggerTime',
        'condition_type' => 'setConditionType',
        'threshold' => 'setThreshold',
        'last_value' => 'setLastValue',
        'comparison_operator' => 'setComparisonOperator',
        'unit' => 'setUnit',
        'wait_time_in_usecs' => 'setWaitTimeInUsecs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'metric_display_name' => 'getMetricDisplayName',
        'metric_name' => 'getMetricName',
        'trigger_time' => 'getTriggerTime',
        'condition_type' => 'getConditionType',
        'threshold' => 'getThreshold',
        'last_value' => 'getLastValue',
        'comparison_operator' => 'getComparisonOperator',
        'unit' => 'getUnit',
        'wait_time_in_usecs' => 'getWaitTimeInUsecs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('metric_display_name', $data ?? [], null);
        $this->setIfExists('metric_name', $data ?? [], null);
        $this->setIfExists('trigger_time', $data ?? [], null);
        $this->setIfExists('condition_type', $data ?? [], null);
        $this->setIfExists('threshold', $data ?? [], null);
        $this->setIfExists('last_value', $data ?? [], null);
        $this->setIfExists('comparison_operator', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('wait_time_in_usecs', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets metric_display_name
     *
     * @return string|null
     */
    public function getMetricDisplayName()
    {
        return $this->container['metric_display_name'];
    }

    /**
     * Sets metric_display_name
     *
     * @param string|null $metric_display_name The metric display name in English
     *
     * @return self
     */
    public function setMetricDisplayName($metric_display_name)
    {
        if (is_null($metric_display_name)) {
            throw new \InvalidArgumentException('non-nullable metric_display_name cannot be null');
        }
        $this->container['metric_display_name'] = $metric_display_name;

        return $this;
    }

    /**
     * Gets metric_name
     *
     * @return string|null
     */
    public function getMetricName()
    {
        return $this->container['metric_name'];
    }

    /**
     * Sets metric_name
     *
     * @param string|null $metric_name The metric key name
     *
     * @return self
     */
    public function setMetricName($metric_name)
    {
        if (is_null($metric_name)) {
            throw new \InvalidArgumentException('non-nullable metric_name cannot be null');
        }
        $this->container['metric_name'] = $metric_name;

        return $this;
    }

    /**
     * Gets trigger_time
     *
     * @return \DateTime|null
     */
    public function getTriggerTime()
    {
        return $this->container['trigger_time'];
    }

    /**
     * Sets trigger_time
     *
     * @param \DateTime|null $trigger_time The time that this indicator was created.  It is the source metric time.
     *
     * @return self
     */
    public function setTriggerTime($trigger_time)
    {
        if (is_null($trigger_time)) {
            throw new \InvalidArgumentException('non-nullable trigger_time cannot be null');
        }
        $this->container['trigger_time'] = $trigger_time;

        return $this;
    }

    /**
     * Gets condition_type
     *
     * @return string|null
     */
    public function getConditionType()
    {
        return $this->container['condition_type'];
    }

    /**
     * Sets condition_type
     *
     * @param string|null $condition_type Indicating if this symptom is caused by static threshold or anomaly (dynamic threshold) evaluation.  If an indicator is raised, there may have another indicator indicating the safe guard zone value.
     *
     * @return self
     */
    public function setConditionType($condition_type)
    {
        if (is_null($condition_type)) {
            throw new \InvalidArgumentException('non-nullable condition_type cannot be null');
        }
        $this->container['condition_type'] = $condition_type;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return \OpenAPI\Client\Model\ParamValue|null
     */
    public function getThreshold()
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param \OpenAPI\Client\Model\ParamValue|null $threshold threshold
     *
     * @return self
     */
    public function setThreshold($threshold)
    {
        if (is_null($threshold)) {
            throw new \InvalidArgumentException('non-nullable threshold cannot be null');
        }
        $this->container['threshold'] = $threshold;

        return $this;
    }

    /**
     * Gets last_value
     *
     * @return \OpenAPI\Client\Model\ParamValue|null
     */
    public function getLastValue()
    {
        return $this->container['last_value'];
    }

    /**
     * Sets last_value
     *
     * @param \OpenAPI\Client\Model\ParamValue|null $last_value last_value
     *
     * @return self
     */
    public function setLastValue($last_value)
    {
        if (is_null($last_value)) {
            throw new \InvalidArgumentException('non-nullable last_value cannot be null');
        }
        $this->container['last_value'] = $last_value;

        return $this;
    }

    /**
     * Gets comparison_operator
     *
     * @return string|null
     */
    public function getComparisonOperator()
    {
        return $this->container['comparison_operator'];
    }

    /**
     * Sets comparison_operator
     *
     * @param string|null $comparison_operator The comparison operator used in this evaluation
     *
     * @return self
     */
    public function setComparisonOperator($comparison_operator)
    {
        if (is_null($comparison_operator)) {
            throw new \InvalidArgumentException('non-nullable comparison_operator cannot be null');
        }
        $this->container['comparison_operator'] = $comparison_operator;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit Data unit.
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            throw new \InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets wait_time_in_usecs
     *
     * @return int|null
     */
    public function getWaitTimeInUsecs()
    {
        return $this->container['wait_time_in_usecs'];
    }

    /**
     * Sets wait_time_in_usecs
     *
     * @param int|null $wait_time_in_usecs How long the indicator had been lasted before raised the issue
     *
     * @return self
     */
    public function setWaitTimeInUsecs($wait_time_in_usecs)
    {
        if (is_null($wait_time_in_usecs)) {
            throw new \InvalidArgumentException('non-nullable wait_time_in_usecs cannot be null');
        }
        $this->container['wait_time_in_usecs'] = $wait_time_in_usecs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


