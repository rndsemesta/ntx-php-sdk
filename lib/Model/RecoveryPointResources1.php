<?php
/**
 * RecoveryPointResources1
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RecoveryPointResources1 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecoveryPointResources1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Recovery_point_resources_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'consistency_group_uuid' => 'string',
        'source_availability_zone_reference' => '\OpenAPI\Client\Model\AvailabilityZoneReference',
        'source_cluster_reference' => '\OpenAPI\Client\Model\ClusterReference',
        'recoverability' => '\OpenAPI\Client\Model\RecoveryPointResources1Recoverability',
        'parent_vm_reference' => '\OpenAPI\Client\Model\VmReference',
        'recovery_point_type' => 'string',
        'vm_spec' => '\OpenAPI\Client\Model\Vm',
        'vm_recovery_point_location_agnostic_uuid' => 'string',
        'creation_time' => 'string',
        'vm_metadata' => '\OpenAPI\Client\Model\VmMetadata',
        'expiration_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'consistency_group_uuid' => null,
        'source_availability_zone_reference' => null,
        'source_cluster_reference' => null,
        'recoverability' => null,
        'parent_vm_reference' => null,
        'recovery_point_type' => null,
        'vm_spec' => null,
        'vm_recovery_point_location_agnostic_uuid' => 'UUID',
        'creation_time' => null,
        'vm_metadata' => null,
        'expiration_time' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'consistency_group_uuid' => false,
        'source_availability_zone_reference' => false,
        'source_cluster_reference' => false,
        'recoverability' => false,
        'parent_vm_reference' => false,
        'recovery_point_type' => false,
        'vm_spec' => false,
        'vm_recovery_point_location_agnostic_uuid' => false,
        'creation_time' => false,
        'vm_metadata' => false,
        'expiration_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'consistency_group_uuid' => 'consistency_group_uuid',
        'source_availability_zone_reference' => 'source_availability_zone_reference',
        'source_cluster_reference' => 'source_cluster_reference',
        'recoverability' => 'recoverability',
        'parent_vm_reference' => 'parent_vm_reference',
        'recovery_point_type' => 'recovery_point_type',
        'vm_spec' => 'vm_spec',
        'vm_recovery_point_location_agnostic_uuid' => 'vm_recovery_point_location_agnostic_uuid',
        'creation_time' => 'creation_time',
        'vm_metadata' => 'vm_metadata',
        'expiration_time' => 'expiration_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'consistency_group_uuid' => 'setConsistencyGroupUuid',
        'source_availability_zone_reference' => 'setSourceAvailabilityZoneReference',
        'source_cluster_reference' => 'setSourceClusterReference',
        'recoverability' => 'setRecoverability',
        'parent_vm_reference' => 'setParentVmReference',
        'recovery_point_type' => 'setRecoveryPointType',
        'vm_spec' => 'setVmSpec',
        'vm_recovery_point_location_agnostic_uuid' => 'setVmRecoveryPointLocationAgnosticUuid',
        'creation_time' => 'setCreationTime',
        'vm_metadata' => 'setVmMetadata',
        'expiration_time' => 'setExpirationTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'consistency_group_uuid' => 'getConsistencyGroupUuid',
        'source_availability_zone_reference' => 'getSourceAvailabilityZoneReference',
        'source_cluster_reference' => 'getSourceClusterReference',
        'recoverability' => 'getRecoverability',
        'parent_vm_reference' => 'getParentVmReference',
        'recovery_point_type' => 'getRecoveryPointType',
        'vm_spec' => 'getVmSpec',
        'vm_recovery_point_location_agnostic_uuid' => 'getVmRecoveryPointLocationAgnosticUuid',
        'creation_time' => 'getCreationTime',
        'vm_metadata' => 'getVmMetadata',
        'expiration_time' => 'getExpirationTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('consistency_group_uuid', $data ?? [], null);
        $this->setIfExists('source_availability_zone_reference', $data ?? [], null);
        $this->setIfExists('source_cluster_reference', $data ?? [], null);
        $this->setIfExists('recoverability', $data ?? [], null);
        $this->setIfExists('parent_vm_reference', $data ?? [], null);
        $this->setIfExists('recovery_point_type', $data ?? [], null);
        $this->setIfExists('vm_spec', $data ?? [], null);
        $this->setIfExists('vm_recovery_point_location_agnostic_uuid', $data ?? [], null);
        $this->setIfExists('creation_time', $data ?? [], null);
        $this->setIfExists('vm_metadata', $data ?? [], null);
        $this->setIfExists('expiration_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['consistency_group_uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['consistency_group_uuid'])) {
            $invalidProperties[] = "invalid value for 'consistency_group_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        if (!is_null($this->container['vm_recovery_point_location_agnostic_uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['vm_recovery_point_location_agnostic_uuid'])) {
            $invalidProperties[] = "invalid value for 'vm_recovery_point_location_agnostic_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets consistency_group_uuid
     *
     * @return string|null
     */
    public function getConsistencyGroupUuid()
    {
        return $this->container['consistency_group_uuid'];
    }

    /**
     * Sets consistency_group_uuid
     *
     * @param string|null $consistency_group_uuid This field is same for all the entities (irrespective of kind) that were snapshotted together.
     *
     * @return self
     */
    public function setConsistencyGroupUuid($consistency_group_uuid)
    {
        if (is_null($consistency_group_uuid)) {
            throw new \InvalidArgumentException('non-nullable consistency_group_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($consistency_group_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$consistency_group_uuid when calling RecoveryPointResources1., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['consistency_group_uuid'] = $consistency_group_uuid;

        return $this;
    }

    /**
     * Gets source_availability_zone_reference
     *
     * @return \OpenAPI\Client\Model\AvailabilityZoneReference|null
     */
    public function getSourceAvailabilityZoneReference()
    {
        return $this->container['source_availability_zone_reference'];
    }

    /**
     * Sets source_availability_zone_reference
     *
     * @param \OpenAPI\Client\Model\AvailabilityZoneReference|null $source_availability_zone_reference source_availability_zone_reference
     *
     * @return self
     */
    public function setSourceAvailabilityZoneReference($source_availability_zone_reference)
    {
        if (is_null($source_availability_zone_reference)) {
            throw new \InvalidArgumentException('non-nullable source_availability_zone_reference cannot be null');
        }
        $this->container['source_availability_zone_reference'] = $source_availability_zone_reference;

        return $this;
    }

    /**
     * Gets source_cluster_reference
     *
     * @return \OpenAPI\Client\Model\ClusterReference|null
     */
    public function getSourceClusterReference()
    {
        return $this->container['source_cluster_reference'];
    }

    /**
     * Sets source_cluster_reference
     *
     * @param \OpenAPI\Client\Model\ClusterReference|null $source_cluster_reference source_cluster_reference
     *
     * @return self
     */
    public function setSourceClusterReference($source_cluster_reference)
    {
        if (is_null($source_cluster_reference)) {
            throw new \InvalidArgumentException('non-nullable source_cluster_reference cannot be null');
        }
        $this->container['source_cluster_reference'] = $source_cluster_reference;

        return $this;
    }

    /**
     * Gets recoverability
     *
     * @return \OpenAPI\Client\Model\RecoveryPointResources1Recoverability|null
     */
    public function getRecoverability()
    {
        return $this->container['recoverability'];
    }

    /**
     * Sets recoverability
     *
     * @param \OpenAPI\Client\Model\RecoveryPointResources1Recoverability|null $recoverability recoverability
     *
     * @return self
     */
    public function setRecoverability($recoverability)
    {
        if (is_null($recoverability)) {
            throw new \InvalidArgumentException('non-nullable recoverability cannot be null');
        }
        $this->container['recoverability'] = $recoverability;

        return $this;
    }

    /**
     * Gets parent_vm_reference
     *
     * @return \OpenAPI\Client\Model\VmReference|null
     */
    public function getParentVmReference()
    {
        return $this->container['parent_vm_reference'];
    }

    /**
     * Sets parent_vm_reference
     *
     * @param \OpenAPI\Client\Model\VmReference|null $parent_vm_reference parent_vm_reference
     *
     * @return self
     */
    public function setParentVmReference($parent_vm_reference)
    {
        if (is_null($parent_vm_reference)) {
            throw new \InvalidArgumentException('non-nullable parent_vm_reference cannot be null');
        }
        $this->container['parent_vm_reference'] = $parent_vm_reference;

        return $this;
    }

    /**
     * Gets recovery_point_type
     *
     * @return string|null
     */
    public function getRecoveryPointType()
    {
        return $this->container['recovery_point_type'];
    }

    /**
     * Sets recovery_point_type
     *
     * @param string|null $recovery_point_type Crash consistent or Application Consistent recovery point
     *
     * @return self
     */
    public function setRecoveryPointType($recovery_point_type)
    {
        if (is_null($recovery_point_type)) {
            throw new \InvalidArgumentException('non-nullable recovery_point_type cannot be null');
        }
        $this->container['recovery_point_type'] = $recovery_point_type;

        return $this;
    }

    /**
     * Gets vm_spec
     *
     * @return \OpenAPI\Client\Model\Vm|null
     */
    public function getVmSpec()
    {
        return $this->container['vm_spec'];
    }

    /**
     * Sets vm_spec
     *
     * @param \OpenAPI\Client\Model\Vm|null $vm_spec vm_spec
     *
     * @return self
     */
    public function setVmSpec($vm_spec)
    {
        if (is_null($vm_spec)) {
            throw new \InvalidArgumentException('non-nullable vm_spec cannot be null');
        }
        $this->container['vm_spec'] = $vm_spec;

        return $this;
    }

    /**
     * Gets vm_recovery_point_location_agnostic_uuid
     *
     * @return string|null
     */
    public function getVmRecoveryPointLocationAgnosticUuid()
    {
        return $this->container['vm_recovery_point_location_agnostic_uuid'];
    }

    /**
     * Sets vm_recovery_point_location_agnostic_uuid
     *
     * @param string|null $vm_recovery_point_location_agnostic_uuid Location agnostic UUID of the recovery point. If a recovery point is replicated to a different clusters, then all the instances of same recovery point will share this UUID.
     *
     * @return self
     */
    public function setVmRecoveryPointLocationAgnosticUuid($vm_recovery_point_location_agnostic_uuid)
    {
        if (is_null($vm_recovery_point_location_agnostic_uuid)) {
            throw new \InvalidArgumentException('non-nullable vm_recovery_point_location_agnostic_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($vm_recovery_point_location_agnostic_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$vm_recovery_point_location_agnostic_uuid when calling RecoveryPointResources1., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['vm_recovery_point_location_agnostic_uuid'] = $vm_recovery_point_location_agnostic_uuid;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return string|null
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param string|null $creation_time The time when the the recovery point is created. This is in internet date/time format (RFC 3339). For example, 1985-04-12T23:20:50.52Z, this represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
     *
     * @return self
     */
    public function setCreationTime($creation_time)
    {
        if (is_null($creation_time)) {
            throw new \InvalidArgumentException('non-nullable creation_time cannot be null');
        }
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets vm_metadata
     *
     * @return \OpenAPI\Client\Model\VmMetadata|null
     */
    public function getVmMetadata()
    {
        return $this->container['vm_metadata'];
    }

    /**
     * Sets vm_metadata
     *
     * @param \OpenAPI\Client\Model\VmMetadata|null $vm_metadata vm_metadata
     *
     * @return self
     */
    public function setVmMetadata($vm_metadata)
    {
        if (is_null($vm_metadata)) {
            throw new \InvalidArgumentException('non-nullable vm_metadata cannot be null');
        }
        $this->container['vm_metadata'] = $vm_metadata;

        return $this;
    }

    /**
     * Gets expiration_time
     *
     * @return \DateTime|null
     */
    public function getExpirationTime()
    {
        return $this->container['expiration_time'];
    }

    /**
     * Sets expiration_time
     *
     * @param \DateTime|null $expiration_time The time when this recovery point expires and will be garbage collected. This is in internet date/time format (RFC 3339). For example, 1985-04-12T23:20:50.52Z, this represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. If not set, then the recovery point never expires.
     *
     * @return self
     */
    public function setExpirationTime($expiration_time)
    {
        if (is_null($expiration_time)) {
            throw new \InvalidArgumentException('non-nullable expiration_time cannot be null');
        }
        $this->container['expiration_time'] = $expiration_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


