<?php
/**
 * ProtectionRuleResources
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProtectionRuleResources Class Doc Comment
 *
 * @category Class
 * @description Protection rule encodes the overall topology of all the availability zones where the entity is replicated to. This encoding allows the system to figure out where the entity should be running in the case of one or more availability zone failures.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProtectionRuleResources implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'protection_rule_resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'start_time' => 'string',
        'availability_zone_connectivity_list' => '\OpenAPI\Client\Model\ProtectionRuleResourcesAvailabilityZoneConnectivityListInner[]',
        'ordered_availability_zone_list' => '\OpenAPI\Client\Model\ProtectionRuleResourcesOrderedAvailabilityZoneListInner[]',
        'primary_location_list' => 'int[]',
        'category_filter' => '\OpenAPI\Client\Model\CategoryFilter'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'start_time' => null,
        'availability_zone_connectivity_list' => null,
        'ordered_availability_zone_list' => null,
        'primary_location_list' => null,
        'category_filter' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'start_time' => false,
        'availability_zone_connectivity_list' => false,
        'ordered_availability_zone_list' => false,
        'primary_location_list' => false,
        'category_filter' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_time' => 'start_time',
        'availability_zone_connectivity_list' => 'availability_zone_connectivity_list',
        'ordered_availability_zone_list' => 'ordered_availability_zone_list',
        'primary_location_list' => 'primary_location_list',
        'category_filter' => 'category_filter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_time' => 'setStartTime',
        'availability_zone_connectivity_list' => 'setAvailabilityZoneConnectivityList',
        'ordered_availability_zone_list' => 'setOrderedAvailabilityZoneList',
        'primary_location_list' => 'setPrimaryLocationList',
        'category_filter' => 'setCategoryFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_time' => 'getStartTime',
        'availability_zone_connectivity_list' => 'getAvailabilityZoneConnectivityList',
        'ordered_availability_zone_list' => 'getOrderedAvailabilityZoneList',
        'primary_location_list' => 'getPrimaryLocationList',
        'category_filter' => 'getCategoryFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('availability_zone_connectivity_list', $data ?? [], null);
        $this->setIfExists('ordered_availability_zone_list', $data ?? [], null);
        $this->setIfExists('primary_location_list', $data ?? [], null);
        $this->setIfExists('category_filter', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['availability_zone_connectivity_list'] === null) {
            $invalidProperties[] = "'availability_zone_connectivity_list' can't be null";
        }
        if ($this->container['ordered_availability_zone_list'] === null) {
            $invalidProperties[] = "'ordered_availability_zone_list' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_time
     *
     * @return string|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param string|null $start_time Time of the day, the policy will be started. This is in \"<x>h:<y>m\" format. The values must be between 00h:00m and 23h:59m. For example user specified 18h:00m and the current time is 17h:00m then the first snapshot will be captured at 18h:00m. If the current time is 19h:00m then the first snapshot will be captured at 18h:00m next day. If not set, policy will be applicable immediately.
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            throw new \InvalidArgumentException('non-nullable start_time cannot be null');
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets availability_zone_connectivity_list
     *
     * @return \OpenAPI\Client\Model\ProtectionRuleResourcesAvailabilityZoneConnectivityListInner[]
     */
    public function getAvailabilityZoneConnectivityList()
    {
        return $this->container['availability_zone_connectivity_list'];
    }

    /**
     * Sets availability_zone_connectivity_list
     *
     * @param \OpenAPI\Client\Model\ProtectionRuleResourcesAvailabilityZoneConnectivityListInner[] $availability_zone_connectivity_list This encodes the datapipes between various availability zones and the backup policy of the pipes. For example, [1, 2, 3600], [2, 3, 3600], [4, 5, 15000], [2, 6, 4200]. Note 2 here means the entry at index 2 in the ordered_availability_zone_list. And 3600 is the RPO (Recovery Point Objective) in seconds between the two availability zones.
     *
     * @return self
     */
    public function setAvailabilityZoneConnectivityList($availability_zone_connectivity_list)
    {
        if (is_null($availability_zone_connectivity_list)) {
            throw new \InvalidArgumentException('non-nullable availability_zone_connectivity_list cannot be null');
        }
        $this->container['availability_zone_connectivity_list'] = $availability_zone_connectivity_list;

        return $this;
    }

    /**
     * Gets ordered_availability_zone_list
     *
     * @return \OpenAPI\Client\Model\ProtectionRuleResourcesOrderedAvailabilityZoneListInner[]
     */
    public function getOrderedAvailabilityZoneList()
    {
        return $this->container['ordered_availability_zone_list'];
    }

    /**
     * Sets ordered_availability_zone_list
     *
     * @param \OpenAPI\Client\Model\ProtectionRuleResourcesOrderedAvailabilityZoneListInner[] $ordered_availability_zone_list A list of availability zones, each of which, receives a replica of the data for the entities protected by this protection rule. The order of the availability zones in the list determines the preference order (highest to lowest) for the entity to run in the case of failure of one or more availability zones. For example, if this list is [A, B, C, D], then the entity will prefer to run on A unless A has failed, in which case, the entity will run on the second choice, B. Failover of the entity is not automatic but this information is used by DR runbook to failover an entity to the desired availability zone.
     *
     * @return self
     */
    public function setOrderedAvailabilityZoneList($ordered_availability_zone_list)
    {
        if (is_null($ordered_availability_zone_list)) {
            throw new \InvalidArgumentException('non-nullable ordered_availability_zone_list cannot be null');
        }
        $this->container['ordered_availability_zone_list'] = $ordered_availability_zone_list;

        return $this;
    }

    /**
     * Gets primary_location_list
     *
     * @return int[]|null
     */
    public function getPrimaryLocationList()
    {
        return $this->container['primary_location_list'];
    }

    /**
     * Sets primary_location_list
     *
     * @param int[]|null $primary_location_list List of indexes in ordered_availability_zone_list, which constitutes the primary locations of this Protection Rule. This field is mandatory if more than two Availability Zones are provided in the policy.
     *
     * @return self
     */
    public function setPrimaryLocationList($primary_location_list)
    {
        if (is_null($primary_location_list)) {
            throw new \InvalidArgumentException('non-nullable primary_location_list cannot be null');
        }
        $this->container['primary_location_list'] = $primary_location_list;

        return $this;
    }

    /**
     * Gets category_filter
     *
     * @return \OpenAPI\Client\Model\CategoryFilter|null
     */
    public function getCategoryFilter()
    {
        return $this->container['category_filter'];
    }

    /**
     * Sets category_filter
     *
     * @param \OpenAPI\Client\Model\CategoryFilter|null $category_filter category_filter
     *
     * @return self
     */
    public function setCategoryFilter($category_filter)
    {
        if (is_null($category_filter)) {
            throw new \InvalidArgumentException('non-nullable category_filter cannot be null');
        }
        $this->container['category_filter'] = $category_filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


