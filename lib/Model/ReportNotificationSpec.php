<?php
/**
 * ReportNotificationSpec
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ReportNotificationSpec Class Doc Comment
 *
 * @category Class
 * @description Report Instance notification spec.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReportNotificationSpec implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'report_notification_spec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'recipient_list' => '\OpenAPI\Client\Model\Recipient[]',
        'email_body' => 'string',
        'recipient_format' => 'string[]',
        'instance_reference_list' => '\OpenAPI\Client\Model\ReportInstanceReference[]',
        'report_config_reference' => '\OpenAPI\Client\Model\ReportConfigReference',
        'email_subject' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'recipient_list' => null,
        'email_body' => null,
        'recipient_format' => null,
        'instance_reference_list' => null,
        'report_config_reference' => null,
        'email_subject' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'recipient_list' => false,
        'email_body' => false,
        'recipient_format' => false,
        'instance_reference_list' => false,
        'report_config_reference' => false,
        'email_subject' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recipient_list' => 'recipient_list',
        'email_body' => 'email_body',
        'recipient_format' => 'recipient_format',
        'instance_reference_list' => 'instance_reference_list',
        'report_config_reference' => 'report_config_reference',
        'email_subject' => 'email_subject'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recipient_list' => 'setRecipientList',
        'email_body' => 'setEmailBody',
        'recipient_format' => 'setRecipientFormat',
        'instance_reference_list' => 'setInstanceReferenceList',
        'report_config_reference' => 'setReportConfigReference',
        'email_subject' => 'setEmailSubject'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recipient_list' => 'getRecipientList',
        'email_body' => 'getEmailBody',
        'recipient_format' => 'getRecipientFormat',
        'instance_reference_list' => 'getInstanceReferenceList',
        'report_config_reference' => 'getReportConfigReference',
        'email_subject' => 'getEmailSubject'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('recipient_list', $data ?? [], null);
        $this->setIfExists('email_body', $data ?? [], null);
        $this->setIfExists('recipient_format', $data ?? [], null);
        $this->setIfExists('instance_reference_list', $data ?? [], null);
        $this->setIfExists('report_config_reference', $data ?? [], null);
        $this->setIfExists('email_subject', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['recipient_list']) && (count($this->container['recipient_list']) > 100)) {
            $invalidProperties[] = "invalid value for 'recipient_list', number of items must be less than or equal to 100.";
        }

        if (!is_null($this->container['email_body']) && (mb_strlen($this->container['email_body']) > 1000)) {
            $invalidProperties[] = "invalid value for 'email_body', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['instance_reference_list']) && (count($this->container['instance_reference_list']) > 32)) {
            $invalidProperties[] = "invalid value for 'instance_reference_list', number of items must be less than or equal to 32.";
        }

        if ($this->container['report_config_reference'] === null) {
            $invalidProperties[] = "'report_config_reference' can't be null";
        }
        if (!is_null($this->container['email_subject']) && (mb_strlen($this->container['email_subject']) > 256)) {
            $invalidProperties[] = "invalid value for 'email_subject', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recipient_list
     *
     * @return \OpenAPI\Client\Model\Recipient[]|null
     */
    public function getRecipientList()
    {
        return $this->container['recipient_list'];
    }

    /**
     * Sets recipient_list
     *
     * @param \OpenAPI\Client\Model\Recipient[]|null $recipient_list Recipients in addition to those specified in report config.
     *
     * @return self
     */
    public function setRecipientList($recipient_list)
    {
        if (is_null($recipient_list)) {
            throw new \InvalidArgumentException('non-nullable recipient_list cannot be null');
        }

        if ((count($recipient_list) > 100)) {
            throw new \InvalidArgumentException('invalid value for $recipient_list when calling ReportNotificationSpec., number of items must be less than or equal to 100.');
        }
        $this->container['recipient_list'] = $recipient_list;

        return $this;
    }

    /**
     * Gets email_body
     *
     * @return string|null
     */
    public function getEmailBody()
    {
        return $this->container['email_body'];
    }

    /**
     * Sets email_body
     *
     * @param string|null $email_body Custom content of the email.
     *
     * @return self
     */
    public function setEmailBody($email_body)
    {
        if (is_null($email_body)) {
            throw new \InvalidArgumentException('non-nullable email_body cannot be null');
        }
        if ((mb_strlen($email_body) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $email_body when calling ReportNotificationSpec., must be smaller than or equal to 1000.');
        }

        $this->container['email_body'] = $email_body;

        return $this;
    }

    /**
     * Gets recipient_format
     *
     * @return string[]|null
     */
    public function getRecipientFormat()
    {
        return $this->container['recipient_format'];
    }

    /**
     * Sets recipient_format
     *
     * @param string[]|null $recipient_format List specifying the formats in which report is to be sent.
     *
     * @return self
     */
    public function setRecipientFormat($recipient_format)
    {
        if (is_null($recipient_format)) {
            throw new \InvalidArgumentException('non-nullable recipient_format cannot be null');
        }
        $this->container['recipient_format'] = $recipient_format;

        return $this;
    }

    /**
     * Gets instance_reference_list
     *
     * @return \OpenAPI\Client\Model\ReportInstanceReference[]|null
     */
    public function getInstanceReferenceList()
    {
        return $this->container['instance_reference_list'];
    }

    /**
     * Sets instance_reference_list
     *
     * @param \OpenAPI\Client\Model\ReportInstanceReference[]|null $instance_reference_list List of the instances for which email should be sent.
     *
     * @return self
     */
    public function setInstanceReferenceList($instance_reference_list)
    {
        if (is_null($instance_reference_list)) {
            throw new \InvalidArgumentException('non-nullable instance_reference_list cannot be null');
        }

        if ((count($instance_reference_list) > 32)) {
            throw new \InvalidArgumentException('invalid value for $instance_reference_list when calling ReportNotificationSpec., number of items must be less than or equal to 32.');
        }
        $this->container['instance_reference_list'] = $instance_reference_list;

        return $this;
    }

    /**
     * Gets report_config_reference
     *
     * @return \OpenAPI\Client\Model\ReportConfigReference
     */
    public function getReportConfigReference()
    {
        return $this->container['report_config_reference'];
    }

    /**
     * Sets report_config_reference
     *
     * @param \OpenAPI\Client\Model\ReportConfigReference $report_config_reference report_config_reference
     *
     * @return self
     */
    public function setReportConfigReference($report_config_reference)
    {
        if (is_null($report_config_reference)) {
            throw new \InvalidArgumentException('non-nullable report_config_reference cannot be null');
        }
        $this->container['report_config_reference'] = $report_config_reference;

        return $this;
    }

    /**
     * Gets email_subject
     *
     * @return string|null
     */
    public function getEmailSubject()
    {
        return $this->container['email_subject'];
    }

    /**
     * Sets email_subject
     *
     * @param string|null $email_subject Subject of the email that will be sent.
     *
     * @return self
     */
    public function setEmailSubject($email_subject)
    {
        if (is_null($email_subject)) {
            throw new \InvalidArgumentException('non-nullable email_subject cannot be null');
        }
        if ((mb_strlen($email_subject) > 256)) {
            throw new \InvalidArgumentException('invalid length for $email_subject when calling ReportNotificationSpec., must be smaller than or equal to 256.');
        }

        $this->container['email_subject'] = $email_subject;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


