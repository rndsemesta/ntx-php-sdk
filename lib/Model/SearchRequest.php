<?php
/**
 * SearchRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SearchRequest Class Doc Comment
 *
 * @category Class
 * @description Search Query Object definitions.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SearchRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'search_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'query_context' => 'string',
        'explicit_query' => 'bool',
        'generate_autocompletions_only' => 'bool',
        'query_term_list' => '\OpenAPI\Client\Model\QueryTerm[]',
        'is_autocomplete_selection' => 'bool',
        'timezone' => 'string',
        'user_query' => 'string',
        'widget_id_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'query_context' => null,
        'explicit_query' => null,
        'generate_autocompletions_only' => null,
        'query_term_list' => null,
        'is_autocomplete_selection' => null,
        'timezone' => null,
        'user_query' => null,
        'widget_id_list' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'query_context' => false,
        'explicit_query' => false,
        'generate_autocompletions_only' => false,
        'query_term_list' => false,
        'is_autocomplete_selection' => false,
        'timezone' => false,
        'user_query' => false,
        'widget_id_list' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'query_context' => 'query_context',
        'explicit_query' => 'explicit_query',
        'generate_autocompletions_only' => 'generate_autocompletions_only',
        'query_term_list' => 'query_term_list',
        'is_autocomplete_selection' => 'is_autocomplete_selection',
        'timezone' => 'timezone',
        'user_query' => 'user_query',
        'widget_id_list' => 'widget_id_list'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'query_context' => 'setQueryContext',
        'explicit_query' => 'setExplicitQuery',
        'generate_autocompletions_only' => 'setGenerateAutocompletionsOnly',
        'query_term_list' => 'setQueryTermList',
        'is_autocomplete_selection' => 'setIsAutocompleteSelection',
        'timezone' => 'setTimezone',
        'user_query' => 'setUserQuery',
        'widget_id_list' => 'setWidgetIdList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'query_context' => 'getQueryContext',
        'explicit_query' => 'getExplicitQuery',
        'generate_autocompletions_only' => 'getGenerateAutocompletionsOnly',
        'query_term_list' => 'getQueryTermList',
        'is_autocomplete_selection' => 'getIsAutocompleteSelection',
        'timezone' => 'getTimezone',
        'user_query' => 'getUserQuery',
        'widget_id_list' => 'getWidgetIdList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('query_context', $data ?? [], null);
        $this->setIfExists('explicit_query', $data ?? [], null);
        $this->setIfExists('generate_autocompletions_only', $data ?? [], null);
        $this->setIfExists('query_term_list', $data ?? [], null);
        $this->setIfExists('is_autocomplete_selection', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('user_query', $data ?? [], null);
        $this->setIfExists('widget_id_list', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['query_context']) && (mb_strlen($this->container['query_context']) > 1024)) {
            $invalidProperties[] = "invalid value for 'query_context', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['timezone']) && (mb_strlen($this->container['timezone']) > 1024)) {
            $invalidProperties[] = "invalid value for 'timezone', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['user_query']) && (mb_strlen($this->container['user_query']) > 2048)) {
            $invalidProperties[] = "invalid value for 'user_query', the character length must be smaller than or equal to 2048.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets query_context
     *
     * @return string|null
     */
    public function getQueryContext()
    {
        return $this->container['query_context'];
    }

    /**
     * Sets query_context
     *
     * @param string|null $query_context Common context for query which needs to be shared across client and search service. Client can pass some context which will be echoed back along with the response.
     *
     * @return self
     */
    public function setQueryContext($query_context)
    {
        if (is_null($query_context)) {
            throw new \InvalidArgumentException('non-nullable query_context cannot be null');
        }
        if ((mb_strlen($query_context) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $query_context when calling SearchRequest., must be smaller than or equal to 1024.');
        }

        $this->container['query_context'] = $query_context;

        return $this;
    }

    /**
     * Gets explicit_query
     *
     * @return bool|null
     */
    public function getExplicitQuery()
    {
        return $this->container['explicit_query'];
    }

    /**
     * Sets explicit_query
     *
     * @param bool|null $explicit_query Flag to indicate the user explicitly made this query (e.g by pressing enter) and is not still typing. Helpful for tracking concrete queries fired by the user.
     *
     * @return self
     */
    public function setExplicitQuery($explicit_query)
    {
        if (is_null($explicit_query)) {
            throw new \InvalidArgumentException('non-nullable explicit_query cannot be null');
        }
        $this->container['explicit_query'] = $explicit_query;

        return $this;
    }

    /**
     * Gets generate_autocompletions_only
     *
     * @return bool|null
     */
    public function getGenerateAutocompletionsOnly()
    {
        return $this->container['generate_autocompletions_only'];
    }

    /**
     * Sets generate_autocompletions_only
     *
     * @param bool|null $generate_autocompletions_only Flag to specify  if user is interested only in autocompletions.
     *
     * @return self
     */
    public function setGenerateAutocompletionsOnly($generate_autocompletions_only)
    {
        if (is_null($generate_autocompletions_only)) {
            throw new \InvalidArgumentException('non-nullable generate_autocompletions_only cannot be null');
        }
        $this->container['generate_autocompletions_only'] = $generate_autocompletions_only;

        return $this;
    }

    /**
     * Gets query_term_list
     *
     * @return \OpenAPI\Client\Model\QueryTerm[]|null
     */
    public function getQueryTermList()
    {
        return $this->container['query_term_list'];
    }

    /**
     * Sets query_term_list
     *
     * @param \OpenAPI\Client\Model\QueryTerm[]|null $query_term_list Structured representation that infers query intent unambiguously. Client will echo this information back to the backend. Essentially, it is like a search result link. The list has an item corresponding to every query term. One user query is nothing but a collection of multiple query terms.
     *
     * @return self
     */
    public function setQueryTermList($query_term_list)
    {
        if (is_null($query_term_list)) {
            throw new \InvalidArgumentException('non-nullable query_term_list cannot be null');
        }
        $this->container['query_term_list'] = $query_term_list;

        return $this;
    }

    /**
     * Gets is_autocomplete_selection
     *
     * @return bool|null
     */
    public function getIsAutocompleteSelection()
    {
        return $this->container['is_autocomplete_selection'];
    }

    /**
     * Sets is_autocomplete_selection
     *
     * @param bool|null $is_autocomplete_selection Flag to indicate the user selected an autocomplete. Helpful for tracking concrete autocomplete selections.
     *
     * @return self
     */
    public function setIsAutocompleteSelection($is_autocomplete_selection)
    {
        if (is_null($is_autocomplete_selection)) {
            throw new \InvalidArgumentException('non-nullable is_autocomplete_selection cannot be null');
        }
        $this->container['is_autocomplete_selection'] = $is_autocomplete_selection;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone Timezone in which the query is getting excecuted.
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        if ((mb_strlen($timezone) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $timezone when calling SearchRequest., must be smaller than or equal to 1024.');
        }

        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets user_query
     *
     * @return string|null
     */
    public function getUserQuery()
    {
        return $this->container['user_query'];
    }

    /**
     * Sets user_query
     *
     * @param string|null $user_query User query in simple text.
     *
     * @return self
     */
    public function setUserQuery($user_query)
    {
        if (is_null($user_query)) {
            throw new \InvalidArgumentException('non-nullable user_query cannot be null');
        }
        if ((mb_strlen($user_query) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $user_query when calling SearchRequest., must be smaller than or equal to 2048.');
        }

        $this->container['user_query'] = $user_query;

        return $this;
    }

    /**
     * Gets widget_id_list
     *
     * @return string[]|null
     */
    public function getWidgetIdList()
    {
        return $this->container['widget_id_list'];
    }

    /**
     * Sets widget_id_list
     *
     * @param string[]|null $widget_id_list Optional list of widgets that a client can request for a specific query.The list is meant to be populated with IDs based on the previous searchresponse. For instance the first response can indicate that the result consists of widget ids \"property_summary\", \"metric_summary\" (or some other form of unique identifier but without any actual data). The client can then make a second request for those widgets. This helps in performance reasons as well as for refreshing content on demand.
     *
     * @return self
     */
    public function setWidgetIdList($widget_id_list)
    {
        if (is_null($widget_id_list)) {
            throw new \InvalidArgumentException('non-nullable widget_id_list cannot be null');
        }
        $this->container['widget_id_list'] = $widget_id_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


