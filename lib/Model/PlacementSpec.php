<?php
/**
 * PlacementSpec
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PlacementSpec Class Doc Comment
 *
 * @category Class
 * @description Entity placement spec.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PlacementSpec implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'placement_spec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entity_spec_list' => '\OpenAPI\Client\Model\EntitySpec[]',
        'hypervisor_type' => 'string',
        'exclude_cluster_uuid_list' => 'string[]',
        'preferred_cluster_uuid_list' => 'string[]',
        'preferred_cluster_uuid' => 'string',
        'replication_type' => 'string',
        'operation_type' => 'string',
        'source_availability_zone_url' => 'string',
        'tenant_uuid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entity_spec_list' => null,
        'hypervisor_type' => null,
        'exclude_cluster_uuid_list' => 'UUID',
        'preferred_cluster_uuid_list' => 'UUID',
        'preferred_cluster_uuid' => 'UUID',
        'replication_type' => null,
        'operation_type' => null,
        'source_availability_zone_url' => null,
        'tenant_uuid' => 'UUID'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entity_spec_list' => false,
        'hypervisor_type' => false,
        'exclude_cluster_uuid_list' => false,
        'preferred_cluster_uuid_list' => false,
        'preferred_cluster_uuid' => false,
        'replication_type' => false,
        'operation_type' => false,
        'source_availability_zone_url' => false,
        'tenant_uuid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entity_spec_list' => 'entity_spec_list',
        'hypervisor_type' => 'hypervisor_type',
        'exclude_cluster_uuid_list' => 'exclude_cluster_uuid_list',
        'preferred_cluster_uuid_list' => 'preferred_cluster_uuid_list',
        'preferred_cluster_uuid' => 'preferred_cluster_uuid',
        'replication_type' => 'replication_type',
        'operation_type' => 'operation_type',
        'source_availability_zone_url' => 'source_availability_zone_url',
        'tenant_uuid' => 'tenant_uuid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entity_spec_list' => 'setEntitySpecList',
        'hypervisor_type' => 'setHypervisorType',
        'exclude_cluster_uuid_list' => 'setExcludeClusterUuidList',
        'preferred_cluster_uuid_list' => 'setPreferredClusterUuidList',
        'preferred_cluster_uuid' => 'setPreferredClusterUuid',
        'replication_type' => 'setReplicationType',
        'operation_type' => 'setOperationType',
        'source_availability_zone_url' => 'setSourceAvailabilityZoneUrl',
        'tenant_uuid' => 'setTenantUuid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entity_spec_list' => 'getEntitySpecList',
        'hypervisor_type' => 'getHypervisorType',
        'exclude_cluster_uuid_list' => 'getExcludeClusterUuidList',
        'preferred_cluster_uuid_list' => 'getPreferredClusterUuidList',
        'preferred_cluster_uuid' => 'getPreferredClusterUuid',
        'replication_type' => 'getReplicationType',
        'operation_type' => 'getOperationType',
        'source_availability_zone_url' => 'getSourceAvailabilityZoneUrl',
        'tenant_uuid' => 'getTenantUuid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entity_spec_list', $data ?? [], null);
        $this->setIfExists('hypervisor_type', $data ?? [], null);
        $this->setIfExists('exclude_cluster_uuid_list', $data ?? [], null);
        $this->setIfExists('preferred_cluster_uuid_list', $data ?? [], null);
        $this->setIfExists('preferred_cluster_uuid', $data ?? [], null);
        $this->setIfExists('replication_type', $data ?? [], null);
        $this->setIfExists('operation_type', $data ?? [], null);
        $this->setIfExists('source_availability_zone_url', $data ?? [], null);
        $this->setIfExists('tenant_uuid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['preferred_cluster_uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['preferred_cluster_uuid'])) {
            $invalidProperties[] = "invalid value for 'preferred_cluster_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        if (!is_null($this->container['tenant_uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['tenant_uuid'])) {
            $invalidProperties[] = "invalid value for 'tenant_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entity_spec_list
     *
     * @return \OpenAPI\Client\Model\EntitySpec[]|null
     */
    public function getEntitySpecList()
    {
        return $this->container['entity_spec_list'];
    }

    /**
     * Sets entity_spec_list
     *
     * @param \OpenAPI\Client\Model\EntitySpec[]|null $entity_spec_list List of entity specs.
     *
     * @return self
     */
    public function setEntitySpecList($entity_spec_list)
    {
        if (is_null($entity_spec_list)) {
            throw new \InvalidArgumentException('non-nullable entity_spec_list cannot be null');
        }
        $this->container['entity_spec_list'] = $entity_spec_list;

        return $this;
    }

    /**
     * Gets hypervisor_type
     *
     * @return string|null
     */
    public function getHypervisorType()
    {
        return $this->container['hypervisor_type'];
    }

    /**
     * Sets hypervisor_type
     *
     * @param string|null $hypervisor_type Preferred hypervisor type for the entities.
     *
     * @return self
     */
    public function setHypervisorType($hypervisor_type)
    {
        if (is_null($hypervisor_type)) {
            throw new \InvalidArgumentException('non-nullable hypervisor_type cannot be null');
        }
        $this->container['hypervisor_type'] = $hypervisor_type;

        return $this;
    }

    /**
     * Gets exclude_cluster_uuid_list
     *
     * @return string[]|null
     */
    public function getExcludeClusterUuidList()
    {
        return $this->container['exclude_cluster_uuid_list'];
    }

    /**
     * Sets exclude_cluster_uuid_list
     *
     * @param string[]|null $exclude_cluster_uuid_list List of UUIDs of the clusters which have to be excluded while auto selecting a target cluster for replication.
     *
     * @return self
     */
    public function setExcludeClusterUuidList($exclude_cluster_uuid_list)
    {
        if (is_null($exclude_cluster_uuid_list)) {
            throw new \InvalidArgumentException('non-nullable exclude_cluster_uuid_list cannot be null');
        }
        $this->container['exclude_cluster_uuid_list'] = $exclude_cluster_uuid_list;

        return $this;
    }

    /**
     * Gets preferred_cluster_uuid_list
     *
     * @return string[]|null
     */
    public function getPreferredClusterUuidList()
    {
        return $this->container['preferred_cluster_uuid_list'];
    }

    /**
     * Sets preferred_cluster_uuid_list
     *
     * @param string[]|null $preferred_cluster_uuid_list List of uuids of the cluster which are preferred to be the replication target.
     *
     * @return self
     */
    public function setPreferredClusterUuidList($preferred_cluster_uuid_list)
    {
        if (is_null($preferred_cluster_uuid_list)) {
            throw new \InvalidArgumentException('non-nullable preferred_cluster_uuid_list cannot be null');
        }
        $this->container['preferred_cluster_uuid_list'] = $preferred_cluster_uuid_list;

        return $this;
    }

    /**
     * Gets preferred_cluster_uuid
     *
     * @return string|null
     */
    public function getPreferredClusterUuid()
    {
        return $this->container['preferred_cluster_uuid'];
    }

    /**
     * Sets preferred_cluster_uuid
     *
     * @param string|null $preferred_cluster_uuid Uuid of the cluster which is preferred to be the replication target.
     *
     * @return self
     */
    public function setPreferredClusterUuid($preferred_cluster_uuid)
    {
        if (is_null($preferred_cluster_uuid)) {
            throw new \InvalidArgumentException('non-nullable preferred_cluster_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($preferred_cluster_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$preferred_cluster_uuid when calling PlacementSpec., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['preferred_cluster_uuid'] = $preferred_cluster_uuid;

        return $this;
    }

    /**
     * Gets replication_type
     *
     * @return string|null
     */
    public function getReplicationType()
    {
        return $this->container['replication_type'];
    }

    /**
     * Sets replication_type
     *
     * @param string|null $replication_type Type of the replication. It can be asynchronous or synchronous.
     *
     * @return self
     */
    public function setReplicationType($replication_type)
    {
        if (is_null($replication_type)) {
            throw new \InvalidArgumentException('non-nullable replication_type cannot be null');
        }
        $this->container['replication_type'] = $replication_type;

        return $this;
    }

    /**
     * Gets operation_type
     *
     * @return string|null
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     *
     * @param string|null $operation_type Operation to be performed for entities.
     *
     * @return self
     */
    public function setOperationType($operation_type)
    {
        if (is_null($operation_type)) {
            throw new \InvalidArgumentException('non-nullable operation_type cannot be null');
        }
        $this->container['operation_type'] = $operation_type;

        return $this;
    }

    /**
     * Gets source_availability_zone_url
     *
     * @return string|null
     */
    public function getSourceAvailabilityZoneUrl()
    {
        return $this->container['source_availability_zone_url'];
    }

    /**
     * Sets source_availability_zone_url
     *
     * @param string|null $source_availability_zone_url URL of the source availability zone. Based on this, the mapped load balancer ip address and port of the replication target will be returned.
     *
     * @return self
     */
    public function setSourceAvailabilityZoneUrl($source_availability_zone_url)
    {
        if (is_null($source_availability_zone_url)) {
            throw new \InvalidArgumentException('non-nullable source_availability_zone_url cannot be null');
        }
        $this->container['source_availability_zone_url'] = $source_availability_zone_url;

        return $this;
    }

    /**
     * Gets tenant_uuid
     *
     * @return string|null
     */
    public function getTenantUuid()
    {
        return $this->container['tenant_uuid'];
    }

    /**
     * Sets tenant_uuid
     *
     * @param string|null $tenant_uuid UUID of the tenant.
     *
     * @return self
     */
    public function setTenantUuid($tenant_uuid)
    {
        if (is_null($tenant_uuid)) {
            throw new \InvalidArgumentException('non-nullable tenant_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($tenant_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$tenant_uuid when calling PlacementSpec., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['tenant_uuid'] = $tenant_uuid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


