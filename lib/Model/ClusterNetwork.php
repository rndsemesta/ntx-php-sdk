<?php
/**
 * ClusterNetwork
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ClusterNetwork Class Doc Comment
 *
 * @category Class
 * @description Cluster network.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClusterNetwork implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'cluster_network';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'masquerading_ip' => 'string',
        'masquerading_port' => 'int',
        'external_ip' => 'string',
        'http_proxy_list' => '\OpenAPI\Client\Model\ClusterNetworkEntity[]',
        'smtp_server' => '\OpenAPI\Client\Model\SmtpServer',
        'ntp_server_ip_list' => 'string[]',
        'external_subnet' => 'string',
        'nfs_subnet_whitelist' => 'string[]',
        'external_data_services_ip' => 'string',
        'domain_server' => '\OpenAPI\Client\Model\ClusterDomainServer',
        'fully_qualified_domain_name' => 'string',
        'name_server_ip_list' => 'string[]',
        'http_proxy_whitelist' => '\OpenAPI\Client\Model\HttpProxyWhitelist[]',
        'internal_subnet' => 'string',
        'default_vswitch_config' => '\OpenAPI\Client\Model\VswitchConfig'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'masquerading_ip' => null,
        'masquerading_port' => 'int32',
        'external_ip' => null,
        'http_proxy_list' => null,
        'smtp_server' => null,
        'ntp_server_ip_list' => null,
        'external_subnet' => null,
        'nfs_subnet_whitelist' => null,
        'external_data_services_ip' => null,
        'domain_server' => null,
        'fully_qualified_domain_name' => null,
        'name_server_ip_list' => null,
        'http_proxy_whitelist' => null,
        'internal_subnet' => null,
        'default_vswitch_config' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'masquerading_ip' => false,
        'masquerading_port' => false,
        'external_ip' => false,
        'http_proxy_list' => false,
        'smtp_server' => false,
        'ntp_server_ip_list' => false,
        'external_subnet' => false,
        'nfs_subnet_whitelist' => false,
        'external_data_services_ip' => false,
        'domain_server' => false,
        'fully_qualified_domain_name' => false,
        'name_server_ip_list' => false,
        'http_proxy_whitelist' => false,
        'internal_subnet' => false,
        'default_vswitch_config' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'masquerading_ip' => 'masquerading_ip',
        'masquerading_port' => 'masquerading_port',
        'external_ip' => 'external_ip',
        'http_proxy_list' => 'http_proxy_list',
        'smtp_server' => 'smtp_server',
        'ntp_server_ip_list' => 'ntp_server_ip_list',
        'external_subnet' => 'external_subnet',
        'nfs_subnet_whitelist' => 'nfs_subnet_whitelist',
        'external_data_services_ip' => 'external_data_services_ip',
        'domain_server' => 'domain_server',
        'fully_qualified_domain_name' => 'fully_qualified_domain_name',
        'name_server_ip_list' => 'name_server_ip_list',
        'http_proxy_whitelist' => 'http_proxy_whitelist',
        'internal_subnet' => 'internal_subnet',
        'default_vswitch_config' => 'default_vswitch_config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'masquerading_ip' => 'setMasqueradingIp',
        'masquerading_port' => 'setMasqueradingPort',
        'external_ip' => 'setExternalIp',
        'http_proxy_list' => 'setHttpProxyList',
        'smtp_server' => 'setSmtpServer',
        'ntp_server_ip_list' => 'setNtpServerIpList',
        'external_subnet' => 'setExternalSubnet',
        'nfs_subnet_whitelist' => 'setNfsSubnetWhitelist',
        'external_data_services_ip' => 'setExternalDataServicesIp',
        'domain_server' => 'setDomainServer',
        'fully_qualified_domain_name' => 'setFullyQualifiedDomainName',
        'name_server_ip_list' => 'setNameServerIpList',
        'http_proxy_whitelist' => 'setHttpProxyWhitelist',
        'internal_subnet' => 'setInternalSubnet',
        'default_vswitch_config' => 'setDefaultVswitchConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'masquerading_ip' => 'getMasqueradingIp',
        'masquerading_port' => 'getMasqueradingPort',
        'external_ip' => 'getExternalIp',
        'http_proxy_list' => 'getHttpProxyList',
        'smtp_server' => 'getSmtpServer',
        'ntp_server_ip_list' => 'getNtpServerIpList',
        'external_subnet' => 'getExternalSubnet',
        'nfs_subnet_whitelist' => 'getNfsSubnetWhitelist',
        'external_data_services_ip' => 'getExternalDataServicesIp',
        'domain_server' => 'getDomainServer',
        'fully_qualified_domain_name' => 'getFullyQualifiedDomainName',
        'name_server_ip_list' => 'getNameServerIpList',
        'http_proxy_whitelist' => 'getHttpProxyWhitelist',
        'internal_subnet' => 'getInternalSubnet',
        'default_vswitch_config' => 'getDefaultVswitchConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('masquerading_ip', $data ?? [], null);
        $this->setIfExists('masquerading_port', $data ?? [], null);
        $this->setIfExists('external_ip', $data ?? [], null);
        $this->setIfExists('http_proxy_list', $data ?? [], null);
        $this->setIfExists('smtp_server', $data ?? [], null);
        $this->setIfExists('ntp_server_ip_list', $data ?? [], null);
        $this->setIfExists('external_subnet', $data ?? [], '172.16.0.0/255.240.0.0');
        $this->setIfExists('nfs_subnet_whitelist', $data ?? [], null);
        $this->setIfExists('external_data_services_ip', $data ?? [], null);
        $this->setIfExists('domain_server', $data ?? [], null);
        $this->setIfExists('fully_qualified_domain_name', $data ?? [], null);
        $this->setIfExists('name_server_ip_list', $data ?? [], null);
        $this->setIfExists('http_proxy_whitelist', $data ?? [], null);
        $this->setIfExists('internal_subnet', $data ?? [], '192.168.5.0/255.255.255.0');
        $this->setIfExists('default_vswitch_config', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['masquerading_ip']) && !preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/", $this->container['masquerading_ip'])) {
            $invalidProperties[] = "invalid value for 'masquerading_ip', must be conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.";
        }

        if (!is_null($this->container['external_ip']) && !preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/", $this->container['external_ip'])) {
            $invalidProperties[] = "invalid value for 'external_ip', must be conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.";
        }

        if (!is_null($this->container['external_data_services_ip']) && !preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/", $this->container['external_data_services_ip'])) {
            $invalidProperties[] = "invalid value for 'external_data_services_ip', must be conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets masquerading_ip
     *
     * @return string|null
     */
    public function getMasqueradingIp()
    {
        return $this->container['masquerading_ip'];
    }

    /**
     * Sets masquerading_ip
     *
     * @param string|null $masquerading_ip The cluster NAT'd or proxy IP which maps to the cluster local IP.
     *
     * @return self
     */
    public function setMasqueradingIp($masquerading_ip)
    {
        if (is_null($masquerading_ip)) {
            throw new \InvalidArgumentException('non-nullable masquerading_ip cannot be null');
        }

        if ((!preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/", ObjectSerializer::toString($masquerading_ip)))) {
            throw new \InvalidArgumentException("invalid value for \$masquerading_ip when calling ClusterNetwork., must conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.");
        }

        $this->container['masquerading_ip'] = $masquerading_ip;

        return $this;
    }

    /**
     * Gets masquerading_port
     *
     * @return int|null
     */
    public function getMasqueradingPort()
    {
        return $this->container['masquerading_port'];
    }

    /**
     * Sets masquerading_port
     *
     * @param int|null $masquerading_port Port used together with masquerading_ip to connect to the cluster.
     *
     * @return self
     */
    public function setMasqueradingPort($masquerading_port)
    {
        if (is_null($masquerading_port)) {
            throw new \InvalidArgumentException('non-nullable masquerading_port cannot be null');
        }
        $this->container['masquerading_port'] = $masquerading_port;

        return $this;
    }

    /**
     * Gets external_ip
     *
     * @return string|null
     */
    public function getExternalIp()
    {
        return $this->container['external_ip'];
    }

    /**
     * Sets external_ip
     *
     * @param string|null $external_ip The local IP of cluster visible externally.
     *
     * @return self
     */
    public function setExternalIp($external_ip)
    {
        if (is_null($external_ip)) {
            throw new \InvalidArgumentException('non-nullable external_ip cannot be null');
        }

        if ((!preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/", ObjectSerializer::toString($external_ip)))) {
            throw new \InvalidArgumentException("invalid value for \$external_ip when calling ClusterNetwork., must conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.");
        }

        $this->container['external_ip'] = $external_ip;

        return $this;
    }

    /**
     * Gets http_proxy_list
     *
     * @return \OpenAPI\Client\Model\ClusterNetworkEntity[]|null
     */
    public function getHttpProxyList()
    {
        return $this->container['http_proxy_list'];
    }

    /**
     * Sets http_proxy_list
     *
     * @param \OpenAPI\Client\Model\ClusterNetworkEntity[]|null $http_proxy_list List of proxies to connect to the service centers.
     *
     * @return self
     */
    public function setHttpProxyList($http_proxy_list)
    {
        if (is_null($http_proxy_list)) {
            throw new \InvalidArgumentException('non-nullable http_proxy_list cannot be null');
        }
        $this->container['http_proxy_list'] = $http_proxy_list;

        return $this;
    }

    /**
     * Gets smtp_server
     *
     * @return \OpenAPI\Client\Model\SmtpServer|null
     */
    public function getSmtpServer()
    {
        return $this->container['smtp_server'];
    }

    /**
     * Sets smtp_server
     *
     * @param \OpenAPI\Client\Model\SmtpServer|null $smtp_server smtp_server
     *
     * @return self
     */
    public function setSmtpServer($smtp_server)
    {
        if (is_null($smtp_server)) {
            throw new \InvalidArgumentException('non-nullable smtp_server cannot be null');
        }
        $this->container['smtp_server'] = $smtp_server;

        return $this;
    }

    /**
     * Gets ntp_server_ip_list
     *
     * @return string[]|null
     */
    public function getNtpServerIpList()
    {
        return $this->container['ntp_server_ip_list'];
    }

    /**
     * Sets ntp_server_ip_list
     *
     * @param string[]|null $ntp_server_ip_list The list of IP addresses or FQDNs of the NTP servers.
     *
     * @return self
     */
    public function setNtpServerIpList($ntp_server_ip_list)
    {
        if (is_null($ntp_server_ip_list)) {
            throw new \InvalidArgumentException('non-nullable ntp_server_ip_list cannot be null');
        }
        $this->container['ntp_server_ip_list'] = $ntp_server_ip_list;

        return $this;
    }

    /**
     * Gets external_subnet
     *
     * @return string|null
     */
    public function getExternalSubnet()
    {
        return $this->container['external_subnet'];
    }

    /**
     * Sets external_subnet
     *
     * @param string|null $external_subnet External subnet for cross server communication. The format is IP/netmask.
     *
     * @return self
     */
    public function setExternalSubnet($external_subnet)
    {
        if (is_null($external_subnet)) {
            throw new \InvalidArgumentException('non-nullable external_subnet cannot be null');
        }
        $this->container['external_subnet'] = $external_subnet;

        return $this;
    }

    /**
     * Gets nfs_subnet_whitelist
     *
     * @return string[]|null
     */
    public function getNfsSubnetWhitelist()
    {
        return $this->container['nfs_subnet_whitelist'];
    }

    /**
     * Sets nfs_subnet_whitelist
     *
     * @param string[]|null $nfs_subnet_whitelist Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that are allowed to send NFS requests to this container. If not specified, the global NFS whitelist will be looked up for access permission. The internal subnet is always automatically considered part of the whitelist, even if the field below does not explicitly specify it. Similarly, all the hypervisor IPs are considered part of the whitelist. Finally, to permit debugging, all of the SVMs local IPs are considered to be implicitly part of the whitelist.
     *
     * @return self
     */
    public function setNfsSubnetWhitelist($nfs_subnet_whitelist)
    {
        if (is_null($nfs_subnet_whitelist)) {
            throw new \InvalidArgumentException('non-nullable nfs_subnet_whitelist cannot be null');
        }
        $this->container['nfs_subnet_whitelist'] = $nfs_subnet_whitelist;

        return $this;
    }

    /**
     * Gets external_data_services_ip
     *
     * @return string|null
     */
    public function getExternalDataServicesIp()
    {
        return $this->container['external_data_services_ip'];
    }

    /**
     * Sets external_data_services_ip
     *
     * @param string|null $external_data_services_ip The cluster IP address that provides external entities access to various cluster data services.
     *
     * @return self
     */
    public function setExternalDataServicesIp($external_data_services_ip)
    {
        if (is_null($external_data_services_ip)) {
            throw new \InvalidArgumentException('non-nullable external_data_services_ip cannot be null');
        }

        if ((!preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/", ObjectSerializer::toString($external_data_services_ip)))) {
            throw new \InvalidArgumentException("invalid value for \$external_data_services_ip when calling ClusterNetwork., must conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.");
        }

        $this->container['external_data_services_ip'] = $external_data_services_ip;

        return $this;
    }

    /**
     * Gets domain_server
     *
     * @return \OpenAPI\Client\Model\ClusterDomainServer|null
     */
    public function getDomainServer()
    {
        return $this->container['domain_server'];
    }

    /**
     * Sets domain_server
     *
     * @param \OpenAPI\Client\Model\ClusterDomainServer|null $domain_server domain_server
     *
     * @return self
     */
    public function setDomainServer($domain_server)
    {
        if (is_null($domain_server)) {
            throw new \InvalidArgumentException('non-nullable domain_server cannot be null');
        }
        $this->container['domain_server'] = $domain_server;

        return $this;
    }

    /**
     * Gets fully_qualified_domain_name
     *
     * @return string|null
     */
    public function getFullyQualifiedDomainName()
    {
        return $this->container['fully_qualified_domain_name'];
    }

    /**
     * Sets fully_qualified_domain_name
     *
     * @param string|null $fully_qualified_domain_name fully qualified domain name of the cluster visible externally.
     *
     * @return self
     */
    public function setFullyQualifiedDomainName($fully_qualified_domain_name)
    {
        if (is_null($fully_qualified_domain_name)) {
            throw new \InvalidArgumentException('non-nullable fully_qualified_domain_name cannot be null');
        }
        $this->container['fully_qualified_domain_name'] = $fully_qualified_domain_name;

        return $this;
    }

    /**
     * Gets name_server_ip_list
     *
     * @return string[]|null
     */
    public function getNameServerIpList()
    {
        return $this->container['name_server_ip_list'];
    }

    /**
     * Sets name_server_ip_list
     *
     * @param string[]|null $name_server_ip_list The list of IP addresses of the name servers.
     *
     * @return self
     */
    public function setNameServerIpList($name_server_ip_list)
    {
        if (is_null($name_server_ip_list)) {
            throw new \InvalidArgumentException('non-nullable name_server_ip_list cannot be null');
        }
        $this->container['name_server_ip_list'] = $name_server_ip_list;

        return $this;
    }

    /**
     * Gets http_proxy_whitelist
     *
     * @return \OpenAPI\Client\Model\HttpProxyWhitelist[]|null
     */
    public function getHttpProxyWhitelist()
    {
        return $this->container['http_proxy_whitelist'];
    }

    /**
     * Sets http_proxy_whitelist
     *
     * @param \OpenAPI\Client\Model\HttpProxyWhitelist[]|null $http_proxy_whitelist HTTP proxy whitelist.
     *
     * @return self
     */
    public function setHttpProxyWhitelist($http_proxy_whitelist)
    {
        if (is_null($http_proxy_whitelist)) {
            throw new \InvalidArgumentException('non-nullable http_proxy_whitelist cannot be null');
        }
        $this->container['http_proxy_whitelist'] = $http_proxy_whitelist;

        return $this;
    }

    /**
     * Gets internal_subnet
     *
     * @return string|null
     */
    public function getInternalSubnet()
    {
        return $this->container['internal_subnet'];
    }

    /**
     * Sets internal_subnet
     *
     * @param string|null $internal_subnet The internal subnet is local to every server - its not visible outside.iSCSI requests generated internally within the appliance (by user VMs or VMFS) are sent to the internal subnet. The format is IP/netmask.
     *
     * @return self
     */
    public function setInternalSubnet($internal_subnet)
    {
        if (is_null($internal_subnet)) {
            throw new \InvalidArgumentException('non-nullable internal_subnet cannot be null');
        }
        $this->container['internal_subnet'] = $internal_subnet;

        return $this;
    }

    /**
     * Gets default_vswitch_config
     *
     * @return \OpenAPI\Client\Model\VswitchConfig|null
     */
    public function getDefaultVswitchConfig()
    {
        return $this->container['default_vswitch_config'];
    }

    /**
     * Sets default_vswitch_config
     *
     * @param \OpenAPI\Client\Model\VswitchConfig|null $default_vswitch_config default_vswitch_config
     *
     * @return self
     */
    public function setDefaultVswitchConfig($default_vswitch_config)
    {
        if (is_null($default_vswitch_config)) {
            throw new \InvalidArgumentException('non-nullable default_vswitch_config cannot be null');
        }
        $this->container['default_vswitch_config'] = $default_vswitch_config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


