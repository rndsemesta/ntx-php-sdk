<?php
/**
 * IdentityProviderDefStatusResourcesIdpProperties
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IdentityProviderDefStatusResourcesIdpProperties Class Doc Comment
 *
 * @category Class
 * @description Urls and other info about the IDP.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IdentityProviderDefStatusResourcesIdpProperties implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'identity_provider_def_status_resources_idp_properties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'login_url' => 'string',
        'certificate' => 'string',
        'idp_url' => 'string',
        'error_url' => 'string',
        'logout_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'login_url' => null,
        'certificate' => null,
        'idp_url' => null,
        'error_url' => null,
        'logout_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'login_url' => false,
        'certificate' => false,
        'idp_url' => false,
        'error_url' => false,
        'logout_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'login_url' => 'login_url',
        'certificate' => 'certificate',
        'idp_url' => 'idp_url',
        'error_url' => 'error_url',
        'logout_url' => 'logout_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'login_url' => 'setLoginUrl',
        'certificate' => 'setCertificate',
        'idp_url' => 'setIdpUrl',
        'error_url' => 'setErrorUrl',
        'logout_url' => 'setLogoutUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'login_url' => 'getLoginUrl',
        'certificate' => 'getCertificate',
        'idp_url' => 'getIdpUrl',
        'error_url' => 'getErrorUrl',
        'logout_url' => 'getLogoutUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('login_url', $data ?? [], null);
        $this->setIfExists('certificate', $data ?? [], null);
        $this->setIfExists('idp_url', $data ?? [], null);
        $this->setIfExists('error_url', $data ?? [], null);
        $this->setIfExists('logout_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['login_url'] === null) {
            $invalidProperties[] = "'login_url' can't be null";
        }
        if ((mb_strlen($this->container['login_url']) > 2000)) {
            $invalidProperties[] = "invalid value for 'login_url', the character length must be smaller than or equal to 2000.";
        }

        if ($this->container['certificate'] === null) {
            $invalidProperties[] = "'certificate' can't be null";
        }
        if ($this->container['idp_url'] === null) {
            $invalidProperties[] = "'idp_url' can't be null";
        }
        if ((mb_strlen($this->container['idp_url']) > 2000)) {
            $invalidProperties[] = "invalid value for 'idp_url', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['error_url']) && (mb_strlen($this->container['error_url']) > 2000)) {
            $invalidProperties[] = "invalid value for 'error_url', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['logout_url']) && (mb_strlen($this->container['logout_url']) > 2000)) {
            $invalidProperties[] = "invalid value for 'logout_url', the character length must be smaller than or equal to 2000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets login_url
     *
     * @return string
     */
    public function getLoginUrl()
    {
        return $this->container['login_url'];
    }

    /**
     * Sets login_url
     *
     * @param string $login_url Login URL of the Identity provider.
     *
     * @return self
     */
    public function setLoginUrl($login_url)
    {
        if (is_null($login_url)) {
            throw new \InvalidArgumentException('non-nullable login_url cannot be null');
        }
        if ((mb_strlen($login_url) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $login_url when calling IdentityProviderDefStatusResourcesIdpProperties., must be smaller than or equal to 2000.');
        }

        $this->container['login_url'] = $login_url;

        return $this;
    }

    /**
     * Gets certificate
     *
     * @return string
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param string $certificate Cert for verification.
     *
     * @return self
     */
    public function setCertificate($certificate)
    {
        if (is_null($certificate)) {
            throw new \InvalidArgumentException('non-nullable certificate cannot be null');
        }
        $this->container['certificate'] = $certificate;

        return $this;
    }

    /**
     * Gets idp_url
     *
     * @return string
     */
    public function getIdpUrl()
    {
        return $this->container['idp_url'];
    }

    /**
     * Sets idp_url
     *
     * @param string $idp_url URL of the Identity provider.
     *
     * @return self
     */
    public function setIdpUrl($idp_url)
    {
        if (is_null($idp_url)) {
            throw new \InvalidArgumentException('non-nullable idp_url cannot be null');
        }
        if ((mb_strlen($idp_url) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $idp_url when calling IdentityProviderDefStatusResourcesIdpProperties., must be smaller than or equal to 2000.');
        }

        $this->container['idp_url'] = $idp_url;

        return $this;
    }

    /**
     * Gets error_url
     *
     * @return string|null
     */
    public function getErrorUrl()
    {
        return $this->container['error_url'];
    }

    /**
     * Sets error_url
     *
     * @param string|null $error_url Error URL of the Identity provider.
     *
     * @return self
     */
    public function setErrorUrl($error_url)
    {
        if (is_null($error_url)) {
            throw new \InvalidArgumentException('non-nullable error_url cannot be null');
        }
        if ((mb_strlen($error_url) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $error_url when calling IdentityProviderDefStatusResourcesIdpProperties., must be smaller than or equal to 2000.');
        }

        $this->container['error_url'] = $error_url;

        return $this;
    }

    /**
     * Gets logout_url
     *
     * @return string|null
     */
    public function getLogoutUrl()
    {
        return $this->container['logout_url'];
    }

    /**
     * Sets logout_url
     *
     * @param string|null $logout_url Logout URL of the Identity provider.
     *
     * @return self
     */
    public function setLogoutUrl($logout_url)
    {
        if (is_null($logout_url)) {
            throw new \InvalidArgumentException('non-nullable logout_url cannot be null');
        }
        if ((mb_strlen($logout_url) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $logout_url when calling IdentityProviderDefStatusResourcesIdpProperties., must be smaller than or equal to 2000.');
        }

        $this->container['logout_url'] = $logout_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


