<?php
/**
 * DataStoreConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DataStoreConfig Class Doc Comment
 *
 * @category Class
 * @description data_store_config Object.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DataStoreConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'data_store_config';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'compression_saving_pct' => 'float',
        'cpu_overcommit_ratio' => 'float',
        'cpu_reservation_pct' => 'float',
        'inline_dedup_saving_pct' => 'float',
        'dedup_saving_pct' => 'float',
        'overall_saving_pct' => 'float',
        'erasure_coding_saving_pct' => 'float',
        'ram_overcommit_ratio' => 'float',
        'rf' => 'int',
        'n_plus' => 'int',
        'ram_reservation_pct' => 'float',
        'storage_reservation_pct' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'compression_saving_pct' => null,
        'cpu_overcommit_ratio' => null,
        'cpu_reservation_pct' => null,
        'inline_dedup_saving_pct' => null,
        'dedup_saving_pct' => null,
        'overall_saving_pct' => null,
        'erasure_coding_saving_pct' => null,
        'ram_overcommit_ratio' => null,
        'rf' => null,
        'n_plus' => null,
        'ram_reservation_pct' => null,
        'storage_reservation_pct' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'compression_saving_pct' => false,
        'cpu_overcommit_ratio' => false,
        'cpu_reservation_pct' => false,
        'inline_dedup_saving_pct' => false,
        'dedup_saving_pct' => false,
        'overall_saving_pct' => false,
        'erasure_coding_saving_pct' => false,
        'ram_overcommit_ratio' => false,
        'rf' => false,
        'n_plus' => false,
        'ram_reservation_pct' => false,
        'storage_reservation_pct' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'compression_saving_pct' => 'compression_saving_pct',
        'cpu_overcommit_ratio' => 'cpu_overcommit_ratio',
        'cpu_reservation_pct' => 'cpu_reservation_pct',
        'inline_dedup_saving_pct' => 'inline_dedup_saving_pct',
        'dedup_saving_pct' => 'dedup_saving_pct',
        'overall_saving_pct' => 'overall_saving_pct',
        'erasure_coding_saving_pct' => 'erasure_coding_saving_pct',
        'ram_overcommit_ratio' => 'ram_overcommit_ratio',
        'rf' => 'rf',
        'n_plus' => 'n_plus',
        'ram_reservation_pct' => 'ram_reservation_pct',
        'storage_reservation_pct' => 'storage_reservation_pct'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'compression_saving_pct' => 'setCompressionSavingPct',
        'cpu_overcommit_ratio' => 'setCpuOvercommitRatio',
        'cpu_reservation_pct' => 'setCpuReservationPct',
        'inline_dedup_saving_pct' => 'setInlineDedupSavingPct',
        'dedup_saving_pct' => 'setDedupSavingPct',
        'overall_saving_pct' => 'setOverallSavingPct',
        'erasure_coding_saving_pct' => 'setErasureCodingSavingPct',
        'ram_overcommit_ratio' => 'setRamOvercommitRatio',
        'rf' => 'setRf',
        'n_plus' => 'setNPlus',
        'ram_reservation_pct' => 'setRamReservationPct',
        'storage_reservation_pct' => 'setStorageReservationPct'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'compression_saving_pct' => 'getCompressionSavingPct',
        'cpu_overcommit_ratio' => 'getCpuOvercommitRatio',
        'cpu_reservation_pct' => 'getCpuReservationPct',
        'inline_dedup_saving_pct' => 'getInlineDedupSavingPct',
        'dedup_saving_pct' => 'getDedupSavingPct',
        'overall_saving_pct' => 'getOverallSavingPct',
        'erasure_coding_saving_pct' => 'getErasureCodingSavingPct',
        'ram_overcommit_ratio' => 'getRamOvercommitRatio',
        'rf' => 'getRf',
        'n_plus' => 'getNPlus',
        'ram_reservation_pct' => 'getRamReservationPct',
        'storage_reservation_pct' => 'getStorageReservationPct'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('compression_saving_pct', $data ?? [], null);
        $this->setIfExists('cpu_overcommit_ratio', $data ?? [], null);
        $this->setIfExists('cpu_reservation_pct', $data ?? [], null);
        $this->setIfExists('inline_dedup_saving_pct', $data ?? [], null);
        $this->setIfExists('dedup_saving_pct', $data ?? [], null);
        $this->setIfExists('overall_saving_pct', $data ?? [], null);
        $this->setIfExists('erasure_coding_saving_pct', $data ?? [], null);
        $this->setIfExists('ram_overcommit_ratio', $data ?? [], null);
        $this->setIfExists('rf', $data ?? [], null);
        $this->setIfExists('n_plus', $data ?? [], null);
        $this->setIfExists('ram_reservation_pct', $data ?? [], null);
        $this->setIfExists('storage_reservation_pct', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets compression_saving_pct
     *
     * @return float|null
     */
    public function getCompressionSavingPct()
    {
        return $this->container['compression_saving_pct'];
    }

    /**
     * Sets compression_saving_pct
     *
     * @param float|null $compression_saving_pct compression_saving_pct
     *
     * @return self
     */
    public function setCompressionSavingPct($compression_saving_pct)
    {
        if (is_null($compression_saving_pct)) {
            throw new \InvalidArgumentException('non-nullable compression_saving_pct cannot be null');
        }
        $this->container['compression_saving_pct'] = $compression_saving_pct;

        return $this;
    }

    /**
     * Gets cpu_overcommit_ratio
     *
     * @return float|null
     */
    public function getCpuOvercommitRatio()
    {
        return $this->container['cpu_overcommit_ratio'];
    }

    /**
     * Sets cpu_overcommit_ratio
     *
     * @param float|null $cpu_overcommit_ratio cpu_overcommit_ratio
     *
     * @return self
     */
    public function setCpuOvercommitRatio($cpu_overcommit_ratio)
    {
        if (is_null($cpu_overcommit_ratio)) {
            throw new \InvalidArgumentException('non-nullable cpu_overcommit_ratio cannot be null');
        }
        $this->container['cpu_overcommit_ratio'] = $cpu_overcommit_ratio;

        return $this;
    }

    /**
     * Gets cpu_reservation_pct
     *
     * @return float|null
     */
    public function getCpuReservationPct()
    {
        return $this->container['cpu_reservation_pct'];
    }

    /**
     * Sets cpu_reservation_pct
     *
     * @param float|null $cpu_reservation_pct cpu_reservation_pct
     *
     * @return self
     */
    public function setCpuReservationPct($cpu_reservation_pct)
    {
        if (is_null($cpu_reservation_pct)) {
            throw new \InvalidArgumentException('non-nullable cpu_reservation_pct cannot be null');
        }
        $this->container['cpu_reservation_pct'] = $cpu_reservation_pct;

        return $this;
    }

    /**
     * Gets inline_dedup_saving_pct
     *
     * @return float|null
     */
    public function getInlineDedupSavingPct()
    {
        return $this->container['inline_dedup_saving_pct'];
    }

    /**
     * Sets inline_dedup_saving_pct
     *
     * @param float|null $inline_dedup_saving_pct inline_dedup_saving_pct
     *
     * @return self
     */
    public function setInlineDedupSavingPct($inline_dedup_saving_pct)
    {
        if (is_null($inline_dedup_saving_pct)) {
            throw new \InvalidArgumentException('non-nullable inline_dedup_saving_pct cannot be null');
        }
        $this->container['inline_dedup_saving_pct'] = $inline_dedup_saving_pct;

        return $this;
    }

    /**
     * Gets dedup_saving_pct
     *
     * @return float|null
     */
    public function getDedupSavingPct()
    {
        return $this->container['dedup_saving_pct'];
    }

    /**
     * Sets dedup_saving_pct
     *
     * @param float|null $dedup_saving_pct dedup_saving_pct
     *
     * @return self
     */
    public function setDedupSavingPct($dedup_saving_pct)
    {
        if (is_null($dedup_saving_pct)) {
            throw new \InvalidArgumentException('non-nullable dedup_saving_pct cannot be null');
        }
        $this->container['dedup_saving_pct'] = $dedup_saving_pct;

        return $this;
    }

    /**
     * Gets overall_saving_pct
     *
     * @return float|null
     */
    public function getOverallSavingPct()
    {
        return $this->container['overall_saving_pct'];
    }

    /**
     * Sets overall_saving_pct
     *
     * @param float|null $overall_saving_pct overall_saving_pct
     *
     * @return self
     */
    public function setOverallSavingPct($overall_saving_pct)
    {
        if (is_null($overall_saving_pct)) {
            throw new \InvalidArgumentException('non-nullable overall_saving_pct cannot be null');
        }
        $this->container['overall_saving_pct'] = $overall_saving_pct;

        return $this;
    }

    /**
     * Gets erasure_coding_saving_pct
     *
     * @return float|null
     */
    public function getErasureCodingSavingPct()
    {
        return $this->container['erasure_coding_saving_pct'];
    }

    /**
     * Sets erasure_coding_saving_pct
     *
     * @param float|null $erasure_coding_saving_pct erasure_coding_saving_pct
     *
     * @return self
     */
    public function setErasureCodingSavingPct($erasure_coding_saving_pct)
    {
        if (is_null($erasure_coding_saving_pct)) {
            throw new \InvalidArgumentException('non-nullable erasure_coding_saving_pct cannot be null');
        }
        $this->container['erasure_coding_saving_pct'] = $erasure_coding_saving_pct;

        return $this;
    }

    /**
     * Gets ram_overcommit_ratio
     *
     * @return float|null
     */
    public function getRamOvercommitRatio()
    {
        return $this->container['ram_overcommit_ratio'];
    }

    /**
     * Sets ram_overcommit_ratio
     *
     * @param float|null $ram_overcommit_ratio ram_overcommit_ratio
     *
     * @return self
     */
    public function setRamOvercommitRatio($ram_overcommit_ratio)
    {
        if (is_null($ram_overcommit_ratio)) {
            throw new \InvalidArgumentException('non-nullable ram_overcommit_ratio cannot be null');
        }
        $this->container['ram_overcommit_ratio'] = $ram_overcommit_ratio;

        return $this;
    }

    /**
     * Gets rf
     *
     * @return int|null
     */
    public function getRf()
    {
        return $this->container['rf'];
    }

    /**
     * Sets rf
     *
     * @param int|null $rf rf
     *
     * @return self
     */
    public function setRf($rf)
    {
        if (is_null($rf)) {
            throw new \InvalidArgumentException('non-nullable rf cannot be null');
        }
        $this->container['rf'] = $rf;

        return $this;
    }

    /**
     * Gets n_plus
     *
     * @return int|null
     */
    public function getNPlus()
    {
        return $this->container['n_plus'];
    }

    /**
     * Sets n_plus
     *
     * @param int|null $n_plus n_plus
     *
     * @return self
     */
    public function setNPlus($n_plus)
    {
        if (is_null($n_plus)) {
            throw new \InvalidArgumentException('non-nullable n_plus cannot be null');
        }
        $this->container['n_plus'] = $n_plus;

        return $this;
    }

    /**
     * Gets ram_reservation_pct
     *
     * @return float|null
     */
    public function getRamReservationPct()
    {
        return $this->container['ram_reservation_pct'];
    }

    /**
     * Sets ram_reservation_pct
     *
     * @param float|null $ram_reservation_pct ram_reservation_pct
     *
     * @return self
     */
    public function setRamReservationPct($ram_reservation_pct)
    {
        if (is_null($ram_reservation_pct)) {
            throw new \InvalidArgumentException('non-nullable ram_reservation_pct cannot be null');
        }
        $this->container['ram_reservation_pct'] = $ram_reservation_pct;

        return $this;
    }

    /**
     * Gets storage_reservation_pct
     *
     * @return float|null
     */
    public function getStorageReservationPct()
    {
        return $this->container['storage_reservation_pct'];
    }

    /**
     * Sets storage_reservation_pct
     *
     * @param float|null $storage_reservation_pct storage_reservation_pct
     *
     * @return self
     */
    public function setStorageReservationPct($storage_reservation_pct)
    {
        if (is_null($storage_reservation_pct)) {
            throw new \InvalidArgumentException('non-nullable storage_reservation_pct cannot be null');
        }
        $this->container['storage_reservation_pct'] = $storage_reservation_pct;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


