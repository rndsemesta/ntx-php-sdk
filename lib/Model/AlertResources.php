<?php
/**
 * AlertResources
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AlertResources Class Doc Comment
 *
 * @category Class
 * @description Alert entity definition.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AlertResources implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'alert_resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'last_update_time' => '\DateTime',
        'source_entity' => '\OpenAPI\Client\Model\AlertResourcesSourceEntity',
        'rca_metadata_list' => '\OpenAPI\Client\Model\RcaMetadata[]',
        'affected_entity_list' => '\OpenAPI\Client\Model\EntityInfo[]',
        'severity' => 'string',
        'title' => 'string',
        'default_message' => 'string',
        'creation_time' => '\DateTime',
        'resolution_status' => '\OpenAPI\Client\Model\AlertState',
        'indicator_list' => '\OpenAPI\Client\Model\Indicator[]',
        'acknowledged_status' => '\OpenAPI\Client\Model\AlertState',
        'is_user_defined' => 'bool',
        'severity_trail_list' => '\OpenAPI\Client\Model\AlertResourcesSeverityTrailListInner[]',
        'classification_list' => 'string[]',
        'possible_cause_list' => '\OpenAPI\Client\Model\CauseAnalysis[]',
        'impact_type_list' => 'string[]',
        'parameters' => 'array<string,\OpenAPI\Client\Model\ParamValue>',
        'type' => 'string',
        'impact_list' => 'string[]',
        'latest_occurrence_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'last_update_time' => 'date-time',
        'source_entity' => null,
        'rca_metadata_list' => null,
        'affected_entity_list' => null,
        'severity' => null,
        'title' => null,
        'default_message' => null,
        'creation_time' => 'date-time',
        'resolution_status' => null,
        'indicator_list' => null,
        'acknowledged_status' => null,
        'is_user_defined' => null,
        'severity_trail_list' => null,
        'classification_list' => null,
        'possible_cause_list' => null,
        'impact_type_list' => null,
        'parameters' => null,
        'type' => null,
        'impact_list' => null,
        'latest_occurrence_time' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'last_update_time' => false,
        'source_entity' => false,
        'rca_metadata_list' => false,
        'affected_entity_list' => false,
        'severity' => false,
        'title' => false,
        'default_message' => false,
        'creation_time' => false,
        'resolution_status' => false,
        'indicator_list' => false,
        'acknowledged_status' => false,
        'is_user_defined' => false,
        'severity_trail_list' => false,
        'classification_list' => false,
        'possible_cause_list' => false,
        'impact_type_list' => false,
        'parameters' => false,
        'type' => false,
        'impact_list' => false,
        'latest_occurrence_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'last_update_time' => 'last_update_time',
        'source_entity' => 'source_entity',
        'rca_metadata_list' => 'rca_metadata_list',
        'affected_entity_list' => 'affected_entity_list',
        'severity' => 'severity',
        'title' => 'title',
        'default_message' => 'default_message',
        'creation_time' => 'creation_time',
        'resolution_status' => 'resolution_status',
        'indicator_list' => 'indicator_list',
        'acknowledged_status' => 'acknowledged_status',
        'is_user_defined' => 'is_user_defined',
        'severity_trail_list' => 'severity_trail_list',
        'classification_list' => 'classification_list',
        'possible_cause_list' => 'possible_cause_list',
        'impact_type_list' => 'impact_type_list',
        'parameters' => 'parameters',
        'type' => 'type',
        'impact_list' => 'impact_list',
        'latest_occurrence_time' => 'latest_occurrence_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'last_update_time' => 'setLastUpdateTime',
        'source_entity' => 'setSourceEntity',
        'rca_metadata_list' => 'setRcaMetadataList',
        'affected_entity_list' => 'setAffectedEntityList',
        'severity' => 'setSeverity',
        'title' => 'setTitle',
        'default_message' => 'setDefaultMessage',
        'creation_time' => 'setCreationTime',
        'resolution_status' => 'setResolutionStatus',
        'indicator_list' => 'setIndicatorList',
        'acknowledged_status' => 'setAcknowledgedStatus',
        'is_user_defined' => 'setIsUserDefined',
        'severity_trail_list' => 'setSeverityTrailList',
        'classification_list' => 'setClassificationList',
        'possible_cause_list' => 'setPossibleCauseList',
        'impact_type_list' => 'setImpactTypeList',
        'parameters' => 'setParameters',
        'type' => 'setType',
        'impact_list' => 'setImpactList',
        'latest_occurrence_time' => 'setLatestOccurrenceTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'last_update_time' => 'getLastUpdateTime',
        'source_entity' => 'getSourceEntity',
        'rca_metadata_list' => 'getRcaMetadataList',
        'affected_entity_list' => 'getAffectedEntityList',
        'severity' => 'getSeverity',
        'title' => 'getTitle',
        'default_message' => 'getDefaultMessage',
        'creation_time' => 'getCreationTime',
        'resolution_status' => 'getResolutionStatus',
        'indicator_list' => 'getIndicatorList',
        'acknowledged_status' => 'getAcknowledgedStatus',
        'is_user_defined' => 'getIsUserDefined',
        'severity_trail_list' => 'getSeverityTrailList',
        'classification_list' => 'getClassificationList',
        'possible_cause_list' => 'getPossibleCauseList',
        'impact_type_list' => 'getImpactTypeList',
        'parameters' => 'getParameters',
        'type' => 'getType',
        'impact_list' => 'getImpactList',
        'latest_occurrence_time' => 'getLatestOccurrenceTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('last_update_time', $data ?? [], null);
        $this->setIfExists('source_entity', $data ?? [], null);
        $this->setIfExists('rca_metadata_list', $data ?? [], null);
        $this->setIfExists('affected_entity_list', $data ?? [], null);
        $this->setIfExists('severity', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('default_message', $data ?? [], null);
        $this->setIfExists('creation_time', $data ?? [], null);
        $this->setIfExists('resolution_status', $data ?? [], null);
        $this->setIfExists('indicator_list', $data ?? [], null);
        $this->setIfExists('acknowledged_status', $data ?? [], null);
        $this->setIfExists('is_user_defined', $data ?? [], null);
        $this->setIfExists('severity_trail_list', $data ?? [], null);
        $this->setIfExists('classification_list', $data ?? [], null);
        $this->setIfExists('possible_cause_list', $data ?? [], null);
        $this->setIfExists('impact_type_list', $data ?? [], null);
        $this->setIfExists('parameters', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('impact_list', $data ?? [], null);
        $this->setIfExists('latest_occurrence_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['severity'] === null) {
            $invalidProperties[] = "'severity' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets last_update_time
     *
     * @return \DateTime|null
     */
    public function getLastUpdateTime()
    {
        return $this->container['last_update_time'];
    }

    /**
     * Sets last_update_time
     *
     * @param \DateTime|null $last_update_time The last time this alert was updated.  System sets this.
     *
     * @return self
     */
    public function setLastUpdateTime($last_update_time)
    {
        if (is_null($last_update_time)) {
            throw new \InvalidArgumentException('non-nullable last_update_time cannot be null');
        }
        $this->container['last_update_time'] = $last_update_time;

        return $this;
    }

    /**
     * Gets source_entity
     *
     * @return \OpenAPI\Client\Model\AlertResourcesSourceEntity|null
     */
    public function getSourceEntity()
    {
        return $this->container['source_entity'];
    }

    /**
     * Sets source_entity
     *
     * @param \OpenAPI\Client\Model\AlertResourcesSourceEntity|null $source_entity source_entity
     *
     * @return self
     */
    public function setSourceEntity($source_entity)
    {
        if (is_null($source_entity)) {
            throw new \InvalidArgumentException('non-nullable source_entity cannot be null');
        }
        $this->container['source_entity'] = $source_entity;

        return $this;
    }

    /**
     * Gets rca_metadata_list
     *
     * @return \OpenAPI\Client\Model\RcaMetadata[]|null
     */
    public function getRcaMetadataList()
    {
        return $this->container['rca_metadata_list'];
    }

    /**
     * Sets rca_metadata_list
     *
     * @param \OpenAPI\Client\Model\RcaMetadata[]|null $rca_metadata_list List of cause and resolution object from alert RCA metadata.
     *
     * @return self
     */
    public function setRcaMetadataList($rca_metadata_list)
    {
        if (is_null($rca_metadata_list)) {
            throw new \InvalidArgumentException('non-nullable rca_metadata_list cannot be null');
        }
        $this->container['rca_metadata_list'] = $rca_metadata_list;

        return $this;
    }

    /**
     * Gets affected_entity_list
     *
     * @return \OpenAPI\Client\Model\EntityInfo[]|null
     */
    public function getAffectedEntityList()
    {
        return $this->container['affected_entity_list'];
    }

    /**
     * Sets affected_entity_list
     *
     * @param \OpenAPI\Client\Model\EntityInfo[]|null $affected_entity_list A list of entities causing and/or related to this alert.
     *
     * @return self
     */
    public function setAffectedEntityList($affected_entity_list)
    {
        if (is_null($affected_entity_list)) {
            throw new \InvalidArgumentException('non-nullable affected_entity_list cannot be null');
        }
        $this->container['affected_entity_list'] = $affected_entity_list;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string $severity Alert severity
     *
     * @return self
     */
    public function setSeverity($severity)
    {
        if (is_null($severity)) {
            throw new \InvalidArgumentException('non-nullable severity cannot be null');
        }
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Alert title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets default_message
     *
     * @return string|null
     */
    public function getDefaultMessage()
    {
        return $this->container['default_message'];
    }

    /**
     * Sets default_message
     *
     * @param string|null $default_message Alert message.
     *
     * @return self
     */
    public function setDefaultMessage($default_message)
    {
        if (is_null($default_message)) {
            throw new \InvalidArgumentException('non-nullable default_message cannot be null');
        }
        $this->container['default_message'] = $default_message;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return \DateTime|null
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param \DateTime|null $creation_time The time that this alert was created.
     *
     * @return self
     */
    public function setCreationTime($creation_time)
    {
        if (is_null($creation_time)) {
            throw new \InvalidArgumentException('non-nullable creation_time cannot be null');
        }
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets resolution_status
     *
     * @return \OpenAPI\Client\Model\AlertState|null
     */
    public function getResolutionStatus()
    {
        return $this->container['resolution_status'];
    }

    /**
     * Sets resolution_status
     *
     * @param \OpenAPI\Client\Model\AlertState|null $resolution_status resolution_status
     *
     * @return self
     */
    public function setResolutionStatus($resolution_status)
    {
        if (is_null($resolution_status)) {
            throw new \InvalidArgumentException('non-nullable resolution_status cannot be null');
        }
        $this->container['resolution_status'] = $resolution_status;

        return $this;
    }

    /**
     * Gets indicator_list
     *
     * @return \OpenAPI\Client\Model\Indicator[]|null
     */
    public function getIndicatorList()
    {
        return $this->container['indicator_list'];
    }

    /**
     * Sets indicator_list
     *
     * @param \OpenAPI\Client\Model\Indicator[]|null $indicator_list The symptoms that caused this alert
     *
     * @return self
     */
    public function setIndicatorList($indicator_list)
    {
        if (is_null($indicator_list)) {
            throw new \InvalidArgumentException('non-nullable indicator_list cannot be null');
        }
        $this->container['indicator_list'] = $indicator_list;

        return $this;
    }

    /**
     * Gets acknowledged_status
     *
     * @return \OpenAPI\Client\Model\AlertState|null
     */
    public function getAcknowledgedStatus()
    {
        return $this->container['acknowledged_status'];
    }

    /**
     * Sets acknowledged_status
     *
     * @param \OpenAPI\Client\Model\AlertState|null $acknowledged_status acknowledged_status
     *
     * @return self
     */
    public function setAcknowledgedStatus($acknowledged_status)
    {
        if (is_null($acknowledged_status)) {
            throw new \InvalidArgumentException('non-nullable acknowledged_status cannot be null');
        }
        $this->container['acknowledged_status'] = $acknowledged_status;

        return $this;
    }

    /**
     * Gets is_user_defined
     *
     * @return bool|null
     */
    public function getIsUserDefined()
    {
        return $this->container['is_user_defined'];
    }

    /**
     * Sets is_user_defined
     *
     * @param bool|null $is_user_defined The alert is raised by user defined policy or not.
     *
     * @return self
     */
    public function setIsUserDefined($is_user_defined)
    {
        if (is_null($is_user_defined)) {
            throw new \InvalidArgumentException('non-nullable is_user_defined cannot be null');
        }
        $this->container['is_user_defined'] = $is_user_defined;

        return $this;
    }

    /**
     * Gets severity_trail_list
     *
     * @return \OpenAPI\Client\Model\AlertResourcesSeverityTrailListInner[]|null
     */
    public function getSeverityTrailList()
    {
        return $this->container['severity_trail_list'];
    }

    /**
     * Sets severity_trail_list
     *
     * @param \OpenAPI\Client\Model\AlertResourcesSeverityTrailListInner[]|null $severity_trail_list The field has a list of information alert severity change history. If the alert is duplicated without severity change, then, that instance will not be saved here.
     *
     * @return self
     */
    public function setSeverityTrailList($severity_trail_list)
    {
        if (is_null($severity_trail_list)) {
            throw new \InvalidArgumentException('non-nullable severity_trail_list cannot be null');
        }
        $this->container['severity_trail_list'] = $severity_trail_list;

        return $this;
    }

    /**
     * Gets classification_list
     *
     * @return string[]|null
     */
    public function getClassificationList()
    {
        return $this->container['classification_list'];
    }

    /**
     * Sets classification_list
     *
     * @param string[]|null $classification_list Component classification
     *
     * @return self
     */
    public function setClassificationList($classification_list)
    {
        if (is_null($classification_list)) {
            throw new \InvalidArgumentException('non-nullable classification_list cannot be null');
        }
        $this->container['classification_list'] = $classification_list;

        return $this;
    }

    /**
     * Gets possible_cause_list
     *
     * @return \OpenAPI\Client\Model\CauseAnalysis[]|null
     */
    public function getPossibleCauseList()
    {
        return $this->container['possible_cause_list'];
    }

    /**
     * Sets possible_cause_list
     *
     * @param \OpenAPI\Client\Model\CauseAnalysis[]|null $possible_cause_list An ordered list of the possible causes and resolutions for the alert.
     *
     * @return self
     */
    public function setPossibleCauseList($possible_cause_list)
    {
        if (is_null($possible_cause_list)) {
            throw new \InvalidArgumentException('non-nullable possible_cause_list cannot be null');
        }
        $this->container['possible_cause_list'] = $possible_cause_list;

        return $this;
    }

    /**
     * Gets impact_type_list
     *
     * @return string[]|null
     */
    public function getImpactTypeList()
    {
        return $this->container['impact_type_list'];
    }

    /**
     * Sets impact_type_list
     *
     * @param string[]|null $impact_type_list The area this alert could impact.
     *
     * @return self
     */
    public function setImpactTypeList($impact_type_list)
    {
        if (is_null($impact_type_list)) {
            throw new \InvalidArgumentException('non-nullable impact_type_list cannot be null');
        }
        $this->container['impact_type_list'] = $impact_type_list;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return array<string,\OpenAPI\Client\Model\ParamValue>|null
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param array<string,\OpenAPI\Client\Model\ParamValue>|null $parameters Alert notification type specific parameters.
     *
     * @return self
     */
    public function setParameters($parameters)
    {
        if (is_null($parameters)) {
            throw new \InvalidArgumentException('non-nullable parameters cannot be null');
        }
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type A preconfigured, or dynamically created alert type or alert type UUID. For example, A1128 for the storage pool space usage exceeded alerts, or, a real UUID for user defined alert policy.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets impact_list
     *
     * @return string[]|null
     */
    public function getImpactList()
    {
        return $this->container['impact_list'];
    }

    /**
     * Sets impact_list
     *
     * @param string[]|null $impact_list The impact of the alert.
     *
     * @return self
     */
    public function setImpactList($impact_list)
    {
        if (is_null($impact_list)) {
            throw new \InvalidArgumentException('non-nullable impact_list cannot be null');
        }
        $this->container['impact_list'] = $impact_list;

        return $this;
    }

    /**
     * Gets latest_occurrence_time
     *
     * @return \DateTime|null
     */
    public function getLatestOccurrenceTime()
    {
        return $this->container['latest_occurrence_time'];
    }

    /**
     * Sets latest_occurrence_time
     *
     * @param \DateTime|null $latest_occurrence_time Alert instances could be dedupped by the system.  However, the last time this similar alert was received is still be updated in this field.
     *
     * @return self
     */
    public function setLatestOccurrenceTime($latest_occurrence_time)
    {
        if (is_null($latest_occurrence_time)) {
            throw new \InvalidArgumentException('non-nullable latest_occurrence_time cannot be null');
        }
        $this->container['latest_occurrence_time'] = $latest_occurrence_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


