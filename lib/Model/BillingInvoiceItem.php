<?php
/**
 * BillingInvoiceItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BillingInvoiceItem Class Doc Comment
 *
 * @category Class
 * @description line item of an invoice.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillingInvoiceItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'billing_invoice_item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'charge_type' => 'string',
        'subscription_name' => 'string',
        'tax_amount' => '\OpenAPI\Client\Model\MonetaryValue',
        'charge_amount' => '\OpenAPI\Client\Model\MonetaryValue',
        'service_end_date' => '\DateTime',
        'charge_id' => 'string',
        'service_start_date' => '\DateTime',
        'charge_name' => 'string',
        'subscription_id' => 'string',
        'processing_type' => 'string',
        'charge_date' => '\DateTime',
        'charge_description' => 'string',
        'quantity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'charge_type' => null,
        'subscription_name' => null,
        'tax_amount' => null,
        'charge_amount' => null,
        'service_end_date' => 'date',
        'charge_id' => null,
        'service_start_date' => 'date',
        'charge_name' => null,
        'subscription_id' => null,
        'processing_type' => null,
        'charge_date' => 'date',
        'charge_description' => null,
        'quantity' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'charge_type' => false,
        'subscription_name' => false,
        'tax_amount' => false,
        'charge_amount' => false,
        'service_end_date' => false,
        'charge_id' => false,
        'service_start_date' => false,
        'charge_name' => false,
        'subscription_id' => false,
        'processing_type' => false,
        'charge_date' => false,
        'charge_description' => false,
        'quantity' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'charge_type' => 'charge_type',
        'subscription_name' => 'subscription_name',
        'tax_amount' => 'tax_amount',
        'charge_amount' => 'charge_amount',
        'service_end_date' => 'service_end_date',
        'charge_id' => 'charge_id',
        'service_start_date' => 'service_start_date',
        'charge_name' => 'charge_name',
        'subscription_id' => 'subscription_id',
        'processing_type' => 'processing_type',
        'charge_date' => 'charge_date',
        'charge_description' => 'charge_description',
        'quantity' => 'quantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'charge_type' => 'setChargeType',
        'subscription_name' => 'setSubscriptionName',
        'tax_amount' => 'setTaxAmount',
        'charge_amount' => 'setChargeAmount',
        'service_end_date' => 'setServiceEndDate',
        'charge_id' => 'setChargeId',
        'service_start_date' => 'setServiceStartDate',
        'charge_name' => 'setChargeName',
        'subscription_id' => 'setSubscriptionId',
        'processing_type' => 'setProcessingType',
        'charge_date' => 'setChargeDate',
        'charge_description' => 'setChargeDescription',
        'quantity' => 'setQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'charge_type' => 'getChargeType',
        'subscription_name' => 'getSubscriptionName',
        'tax_amount' => 'getTaxAmount',
        'charge_amount' => 'getChargeAmount',
        'service_end_date' => 'getServiceEndDate',
        'charge_id' => 'getChargeId',
        'service_start_date' => 'getServiceStartDate',
        'charge_name' => 'getChargeName',
        'subscription_id' => 'getSubscriptionId',
        'processing_type' => 'getProcessingType',
        'charge_date' => 'getChargeDate',
        'charge_description' => 'getChargeDescription',
        'quantity' => 'getQuantity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('charge_type', $data ?? [], null);
        $this->setIfExists('subscription_name', $data ?? [], null);
        $this->setIfExists('tax_amount', $data ?? [], null);
        $this->setIfExists('charge_amount', $data ?? [], null);
        $this->setIfExists('service_end_date', $data ?? [], null);
        $this->setIfExists('charge_id', $data ?? [], null);
        $this->setIfExists('service_start_date', $data ?? [], null);
        $this->setIfExists('charge_name', $data ?? [], null);
        $this->setIfExists('subscription_id', $data ?? [], null);
        $this->setIfExists('processing_type', $data ?? [], null);
        $this->setIfExists('charge_date', $data ?? [], null);
        $this->setIfExists('charge_description', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets charge_type
     *
     * @return string|null
     */
    public function getChargeType()
    {
        return $this->container['charge_type'];
    }

    /**
     * Sets charge_type
     *
     * @param string|null $charge_type Nature of the charge.
     *
     * @return self
     */
    public function setChargeType($charge_type)
    {
        if (is_null($charge_type)) {
            throw new \InvalidArgumentException('non-nullable charge_type cannot be null');
        }
        $this->container['charge_type'] = $charge_type;

        return $this;
    }

    /**
     * Gets subscription_name
     *
     * @return string|null
     */
    public function getSubscriptionName()
    {
        return $this->container['subscription_name'];
    }

    /**
     * Sets subscription_name
     *
     * @param string|null $subscription_name Name of the subscription.
     *
     * @return self
     */
    public function setSubscriptionName($subscription_name)
    {
        if (is_null($subscription_name)) {
            throw new \InvalidArgumentException('non-nullable subscription_name cannot be null');
        }
        $this->container['subscription_name'] = $subscription_name;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return \OpenAPI\Client\Model\MonetaryValue|null
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param \OpenAPI\Client\Model\MonetaryValue|null $tax_amount tax_amount
     *
     * @return self
     */
    public function setTaxAmount($tax_amount)
    {
        if (is_null($tax_amount)) {
            throw new \InvalidArgumentException('non-nullable tax_amount cannot be null');
        }
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets charge_amount
     *
     * @return \OpenAPI\Client\Model\MonetaryValue|null
     */
    public function getChargeAmount()
    {
        return $this->container['charge_amount'];
    }

    /**
     * Sets charge_amount
     *
     * @param \OpenAPI\Client\Model\MonetaryValue|null $charge_amount charge_amount
     *
     * @return self
     */
    public function setChargeAmount($charge_amount)
    {
        if (is_null($charge_amount)) {
            throw new \InvalidArgumentException('non-nullable charge_amount cannot be null');
        }
        $this->container['charge_amount'] = $charge_amount;

        return $this;
    }

    /**
     * Gets service_end_date
     *
     * @return \DateTime|null
     */
    public function getServiceEndDate()
    {
        return $this->container['service_end_date'];
    }

    /**
     * Sets service_end_date
     *
     * @param \DateTime|null $service_end_date Date on which subscription to the line item ends.
     *
     * @return self
     */
    public function setServiceEndDate($service_end_date)
    {
        if (is_null($service_end_date)) {
            throw new \InvalidArgumentException('non-nullable service_end_date cannot be null');
        }
        $this->container['service_end_date'] = $service_end_date;

        return $this;
    }

    /**
     * Gets charge_id
     *
     * @return string|null
     */
    public function getChargeId()
    {
        return $this->container['charge_id'];
    }

    /**
     * Sets charge_id
     *
     * @param string|null $charge_id Id of the charge plan applicable to the subscription.
     *
     * @return self
     */
    public function setChargeId($charge_id)
    {
        if (is_null($charge_id)) {
            throw new \InvalidArgumentException('non-nullable charge_id cannot be null');
        }
        $this->container['charge_id'] = $charge_id;

        return $this;
    }

    /**
     * Gets service_start_date
     *
     * @return \DateTime|null
     */
    public function getServiceStartDate()
    {
        return $this->container['service_start_date'];
    }

    /**
     * Sets service_start_date
     *
     * @param \DateTime|null $service_start_date Date on which this service was started.
     *
     * @return self
     */
    public function setServiceStartDate($service_start_date)
    {
        if (is_null($service_start_date)) {
            throw new \InvalidArgumentException('non-nullable service_start_date cannot be null');
        }
        $this->container['service_start_date'] = $service_start_date;

        return $this;
    }

    /**
     * Gets charge_name
     *
     * @return string|null
     */
    public function getChargeName()
    {
        return $this->container['charge_name'];
    }

    /**
     * Sets charge_name
     *
     * @param string|null $charge_name Name of the charge plan applicable to the subscription.
     *
     * @return self
     */
    public function setChargeName($charge_name)
    {
        if (is_null($charge_name)) {
            throw new \InvalidArgumentException('non-nullable charge_name cannot be null');
        }
        $this->container['charge_name'] = $charge_name;

        return $this;
    }

    /**
     * Gets subscription_id
     *
     * @return string|null
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     *
     * @param string|null $subscription_id Id of the subscription.
     *
     * @return self
     */
    public function setSubscriptionId($subscription_id)
    {
        if (is_null($subscription_id)) {
            throw new \InvalidArgumentException('non-nullable subscription_id cannot be null');
        }
        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }

    /**
     * Gets processing_type
     *
     * @return string|null
     */
    public function getProcessingType()
    {
        return $this->container['processing_type'];
    }

    /**
     * Sets processing_type
     *
     * @param string|null $processing_type Type of processing done on the charge.
     *
     * @return self
     */
    public function setProcessingType($processing_type)
    {
        if (is_null($processing_type)) {
            throw new \InvalidArgumentException('non-nullable processing_type cannot be null');
        }
        $this->container['processing_type'] = $processing_type;

        return $this;
    }

    /**
     * Gets charge_date
     *
     * @return \DateTime|null
     */
    public function getChargeDate()
    {
        return $this->container['charge_date'];
    }

    /**
     * Sets charge_date
     *
     * @param \DateTime|null $charge_date Date on which this line item will be charged.
     *
     * @return self
     */
    public function setChargeDate($charge_date)
    {
        if (is_null($charge_date)) {
            throw new \InvalidArgumentException('non-nullable charge_date cannot be null');
        }
        $this->container['charge_date'] = $charge_date;

        return $this;
    }

    /**
     * Gets charge_description
     *
     * @return string|null
     */
    public function getChargeDescription()
    {
        return $this->container['charge_description'];
    }

    /**
     * Sets charge_description
     *
     * @param string|null $charge_description Description of the charge plan applicable to the subscription.
     *
     * @return self
     */
    public function setChargeDescription($charge_description)
    {
        if (is_null($charge_description)) {
            throw new \InvalidArgumentException('non-nullable charge_description cannot be null');
        }
        $this->container['charge_description'] = $charge_description;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int|null $quantity Number of instances of the line item subscribed.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


