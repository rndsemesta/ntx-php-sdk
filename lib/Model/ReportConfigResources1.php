<?php
/**
 * ReportConfigResources1
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ReportConfigResources1 Class Doc Comment
 *
 * @category Class
 * @description Description of report config.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReportConfigResources1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Report_Config_Resources__1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'retention_policy' => '\OpenAPI\Client\Model\RetentionPolicy',
        'description' => 'string',
        'end_time_offset_secs' => 'int',
        'schedule' => '\OpenAPI\Client\Model\Schedule',
        'template_spec_version' => 'string',
        'generation_format' => 'string[]',
        'start_time_offset_secs' => 'int',
        'template' => '\OpenAPI\Client\Model\ReportTemplate',
        'timezone' => 'string',
        'notification_policy' => '\OpenAPI\Client\Model\NotificationPolicy',
        'out_of_box_report' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'retention_policy' => null,
        'description' => null,
        'end_time_offset_secs' => 'int64',
        'schedule' => null,
        'template_spec_version' => null,
        'generation_format' => null,
        'start_time_offset_secs' => 'int64',
        'template' => null,
        'timezone' => null,
        'notification_policy' => null,
        'out_of_box_report' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'retention_policy' => false,
        'description' => false,
        'end_time_offset_secs' => false,
        'schedule' => false,
        'template_spec_version' => false,
        'generation_format' => false,
        'start_time_offset_secs' => false,
        'template' => false,
        'timezone' => false,
        'notification_policy' => false,
        'out_of_box_report' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'retention_policy' => 'retention_policy',
        'description' => 'description',
        'end_time_offset_secs' => 'end_time_offset_secs',
        'schedule' => 'schedule',
        'template_spec_version' => 'template_spec_version',
        'generation_format' => 'generation_format',
        'start_time_offset_secs' => 'start_time_offset_secs',
        'template' => 'template',
        'timezone' => 'timezone',
        'notification_policy' => 'notification_policy',
        'out_of_box_report' => 'out_of_box_report'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'retention_policy' => 'setRetentionPolicy',
        'description' => 'setDescription',
        'end_time_offset_secs' => 'setEndTimeOffsetSecs',
        'schedule' => 'setSchedule',
        'template_spec_version' => 'setTemplateSpecVersion',
        'generation_format' => 'setGenerationFormat',
        'start_time_offset_secs' => 'setStartTimeOffsetSecs',
        'template' => 'setTemplate',
        'timezone' => 'setTimezone',
        'notification_policy' => 'setNotificationPolicy',
        'out_of_box_report' => 'setOutOfBoxReport'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'retention_policy' => 'getRetentionPolicy',
        'description' => 'getDescription',
        'end_time_offset_secs' => 'getEndTimeOffsetSecs',
        'schedule' => 'getSchedule',
        'template_spec_version' => 'getTemplateSpecVersion',
        'generation_format' => 'getGenerationFormat',
        'start_time_offset_secs' => 'getStartTimeOffsetSecs',
        'template' => 'getTemplate',
        'timezone' => 'getTimezone',
        'notification_policy' => 'getNotificationPolicy',
        'out_of_box_report' => 'getOutOfBoxReport'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('retention_policy', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('end_time_offset_secs', $data ?? [], null);
        $this->setIfExists('schedule', $data ?? [], null);
        $this->setIfExists('template_spec_version', $data ?? [], null);
        $this->setIfExists('generation_format', $data ?? [], null);
        $this->setIfExists('start_time_offset_secs', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('notification_policy', $data ?? [], null);
        $this->setIfExists('out_of_box_report', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets retention_policy
     *
     * @return \OpenAPI\Client\Model\RetentionPolicy|null
     */
    public function getRetentionPolicy()
    {
        return $this->container['retention_policy'];
    }

    /**
     * Sets retention_policy
     *
     * @param \OpenAPI\Client\Model\RetentionPolicy|null $retention_policy retention_policy
     *
     * @return self
     */
    public function setRetentionPolicy($retention_policy)
    {
        if (is_null($retention_policy)) {
            throw new \InvalidArgumentException('non-nullable retention_policy cannot be null');
        }
        $this->container['retention_policy'] = $retention_policy;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the common report config.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets end_time_offset_secs
     *
     * @return int|null
     */
    public function getEndTimeOffsetSecs()
    {
        return $this->container['end_time_offset_secs'];
    }

    /**
     * Sets end_time_offset_secs
     *
     * @param int|null $end_time_offset_secs Offset for end time for data collection during report generation.
     *
     * @return self
     */
    public function setEndTimeOffsetSecs($end_time_offset_secs)
    {
        if (is_null($end_time_offset_secs)) {
            throw new \InvalidArgumentException('non-nullable end_time_offset_secs cannot be null');
        }
        $this->container['end_time_offset_secs'] = $end_time_offset_secs;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return \OpenAPI\Client\Model\Schedule|null
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param \OpenAPI\Client\Model\Schedule|null $schedule schedule
     *
     * @return self
     */
    public function setSchedule($schedule)
    {
        if (is_null($schedule)) {
            throw new \InvalidArgumentException('non-nullable schedule cannot be null');
        }
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets template_spec_version
     *
     * @return string|null
     */
    public function getTemplateSpecVersion()
    {
        return $this->container['template_spec_version'];
    }

    /**
     * Sets template_spec_version
     *
     * @param string|null $template_spec_version Version of the template spec.
     *
     * @return self
     */
    public function setTemplateSpecVersion($template_spec_version)
    {
        if (is_null($template_spec_version)) {
            throw new \InvalidArgumentException('non-nullable template_spec_version cannot be null');
        }
        $this->container['template_spec_version'] = $template_spec_version;

        return $this;
    }

    /**
     * Gets generation_format
     *
     * @return string[]|null
     */
    public function getGenerationFormat()
    {
        return $this->container['generation_format'];
    }

    /**
     * Sets generation_format
     *
     * @param string[]|null $generation_format List specifying the formats in which report is to be created.
     *
     * @return self
     */
    public function setGenerationFormat($generation_format)
    {
        if (is_null($generation_format)) {
            throw new \InvalidArgumentException('non-nullable generation_format cannot be null');
        }
        $this->container['generation_format'] = $generation_format;

        return $this;
    }

    /**
     * Gets start_time_offset_secs
     *
     * @return int|null
     */
    public function getStartTimeOffsetSecs()
    {
        return $this->container['start_time_offset_secs'];
    }

    /**
     * Sets start_time_offset_secs
     *
     * @param int|null $start_time_offset_secs Offset for start time for data collection during report generation.
     *
     * @return self
     */
    public function setStartTimeOffsetSecs($start_time_offset_secs)
    {
        if (is_null($start_time_offset_secs)) {
            throw new \InvalidArgumentException('non-nullable start_time_offset_secs cannot be null');
        }
        $this->container['start_time_offset_secs'] = $start_time_offset_secs;

        return $this;
    }

    /**
     * Gets template
     *
     * @return \OpenAPI\Client\Model\ReportTemplate|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param \OpenAPI\Client\Model\ReportTemplate|null $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone Timezone in which report is to be generated. This is the list supported by pytz.all_timezones. For more info, check http://pytz.sourceforge.net
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets notification_policy
     *
     * @return \OpenAPI\Client\Model\NotificationPolicy|null
     */
    public function getNotificationPolicy()
    {
        return $this->container['notification_policy'];
    }

    /**
     * Sets notification_policy
     *
     * @param \OpenAPI\Client\Model\NotificationPolicy|null $notification_policy notification_policy
     *
     * @return self
     */
    public function setNotificationPolicy($notification_policy)
    {
        if (is_null($notification_policy)) {
            throw new \InvalidArgumentException('non-nullable notification_policy cannot be null');
        }
        $this->container['notification_policy'] = $notification_policy;

        return $this;
    }

    /**
     * Gets out_of_box_report
     *
     * @return bool|null
     */
    public function getOutOfBoxReport()
    {
        return $this->container['out_of_box_report'];
    }

    /**
     * Sets out_of_box_report
     *
     * @param bool|null $out_of_box_report Flag specifying if Report Config is a pre defined report.
     *
     * @return self
     */
    public function setOutOfBoxReport($out_of_box_report)
    {
        if (is_null($out_of_box_report)) {
            throw new \InvalidArgumentException('non-nullable out_of_box_report cannot be null');
        }
        $this->container['out_of_box_report'] = $out_of_box_report;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


