<?php
/**
 * DirectoryServiceResources1
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DirectoryServiceResources1 Class Doc Comment
 *
 * @category Class
 * @description The details of the directory service.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DirectoryServiceResources1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Directory_service_resources_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'open_ldap_configuration' => '\OpenAPI\Client\Model\OpenLdapConfiguration',
        'url' => 'string',
        'directory_type' => 'string',
        'admin_user_reference_list' => '\OpenAPI\Client\Model\UserReference[]',
        'domain_name' => 'string',
        'service_account' => '\OpenAPI\Client\Model\ServiceAccount',
        'admin_group_reference_list' => '\OpenAPI\Client\Model\UserGroupReference[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'open_ldap_configuration' => null,
        'url' => null,
        'directory_type' => null,
        'admin_user_reference_list' => null,
        'domain_name' => null,
        'service_account' => null,
        'admin_group_reference_list' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'open_ldap_configuration' => false,
        'url' => false,
        'directory_type' => false,
        'admin_user_reference_list' => false,
        'domain_name' => false,
        'service_account' => false,
        'admin_group_reference_list' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'open_ldap_configuration' => 'open_ldap_configuration',
        'url' => 'url',
        'directory_type' => 'directory_type',
        'admin_user_reference_list' => 'admin_user_reference_list',
        'domain_name' => 'domain_name',
        'service_account' => 'service_account',
        'admin_group_reference_list' => 'admin_group_reference_list'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'open_ldap_configuration' => 'setOpenLdapConfiguration',
        'url' => 'setUrl',
        'directory_type' => 'setDirectoryType',
        'admin_user_reference_list' => 'setAdminUserReferenceList',
        'domain_name' => 'setDomainName',
        'service_account' => 'setServiceAccount',
        'admin_group_reference_list' => 'setAdminGroupReferenceList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'open_ldap_configuration' => 'getOpenLdapConfiguration',
        'url' => 'getUrl',
        'directory_type' => 'getDirectoryType',
        'admin_user_reference_list' => 'getAdminUserReferenceList',
        'domain_name' => 'getDomainName',
        'service_account' => 'getServiceAccount',
        'admin_group_reference_list' => 'getAdminGroupReferenceList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('open_ldap_configuration', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('directory_type', $data ?? [], null);
        $this->setIfExists('admin_user_reference_list', $data ?? [], null);
        $this->setIfExists('domain_name', $data ?? [], null);
        $this->setIfExists('service_account', $data ?? [], null);
        $this->setIfExists('admin_group_reference_list', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ((mb_strlen($this->container['url']) > 2000)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 2000.";
        }

        if ($this->container['directory_type'] === null) {
            $invalidProperties[] = "'directory_type' can't be null";
        }
        if ($this->container['domain_name'] === null) {
            $invalidProperties[] = "'domain_name' can't be null";
        }
        if ($this->container['service_account'] === null) {
            $invalidProperties[] = "'service_account' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets open_ldap_configuration
     *
     * @return \OpenAPI\Client\Model\OpenLdapConfiguration|null
     */
    public function getOpenLdapConfiguration()
    {
        return $this->container['open_ldap_configuration'];
    }

    /**
     * Sets open_ldap_configuration
     *
     * @param \OpenAPI\Client\Model\OpenLdapConfiguration|null $open_ldap_configuration open_ldap_configuration
     *
     * @return self
     */
    public function setOpenLdapConfiguration($open_ldap_configuration)
    {
        if (is_null($open_ldap_configuration)) {
            throw new \InvalidArgumentException('non-nullable open_ldap_configuration cannot be null');
        }
        $this->container['open_ldap_configuration'] = $open_ldap_configuration;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url URL of the directory.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        if ((mb_strlen($url) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $url when calling DirectoryServiceResources1., must be smaller than or equal to 2000.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets directory_type
     *
     * @return string
     */
    public function getDirectoryType()
    {
        return $this->container['directory_type'];
    }

    /**
     * Sets directory_type
     *
     * @param string $directory_type Type of the directory service.
     *
     * @return self
     */
    public function setDirectoryType($directory_type)
    {
        if (is_null($directory_type)) {
            throw new \InvalidArgumentException('non-nullable directory_type cannot be null');
        }
        $this->container['directory_type'] = $directory_type;

        return $this;
    }

    /**
     * Gets admin_user_reference_list
     *
     * @return \OpenAPI\Client\Model\UserReference[]|null
     */
    public function getAdminUserReferenceList()
    {
        return $this->container['admin_user_reference_list'];
    }

    /**
     * Sets admin_user_reference_list
     *
     * @param \OpenAPI\Client\Model\UserReference[]|null $admin_user_reference_list The list of admin users available in the directory service.
     *
     * @return self
     */
    public function setAdminUserReferenceList($admin_user_reference_list)
    {
        if (is_null($admin_user_reference_list)) {
            throw new \InvalidArgumentException('non-nullable admin_user_reference_list cannot be null');
        }
        $this->container['admin_user_reference_list'] = $admin_user_reference_list;

        return $this;
    }

    /**
     * Gets domain_name
     *
     * @return string
     */
    public function getDomainName()
    {
        return $this->container['domain_name'];
    }

    /**
     * Sets domain_name
     *
     * @param string $domain_name The domain name of the directory service.
     *
     * @return self
     */
    public function setDomainName($domain_name)
    {
        if (is_null($domain_name)) {
            throw new \InvalidArgumentException('non-nullable domain_name cannot be null');
        }
        $this->container['domain_name'] = $domain_name;

        return $this;
    }

    /**
     * Gets service_account
     *
     * @return \OpenAPI\Client\Model\ServiceAccount
     */
    public function getServiceAccount()
    {
        return $this->container['service_account'];
    }

    /**
     * Sets service_account
     *
     * @param \OpenAPI\Client\Model\ServiceAccount $service_account service_account
     *
     * @return self
     */
    public function setServiceAccount($service_account)
    {
        if (is_null($service_account)) {
            throw new \InvalidArgumentException('non-nullable service_account cannot be null');
        }
        $this->container['service_account'] = $service_account;

        return $this;
    }

    /**
     * Gets admin_group_reference_list
     *
     * @return \OpenAPI\Client\Model\UserGroupReference[]|null
     */
    public function getAdminGroupReferenceList()
    {
        return $this->container['admin_group_reference_list'];
    }

    /**
     * Sets admin_group_reference_list
     *
     * @param \OpenAPI\Client\Model\UserGroupReference[]|null $admin_group_reference_list List of admin user groups available in the directory service.
     *
     * @return self
     */
    public function setAdminGroupReferenceList($admin_group_reference_list)
    {
        if (is_null($admin_group_reference_list)) {
            throw new \InvalidArgumentException('non-nullable admin_group_reference_list cannot be null');
        }
        $this->container['admin_group_reference_list'] = $admin_group_reference_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


