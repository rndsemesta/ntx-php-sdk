<?php
/**
 * TriggerInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TriggerInfo Class Doc Comment
 *
 * @category Class
 * @description The information about the triggering.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TriggerInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'trigger_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'action_trigger_type_reference' => '\OpenAPI\Client\Model\ActionTriggerTypeReference',
        'trigger_type_display_name' => 'string',
        'trigger_time' => '\DateTime',
        'input_parameter_values' => 'array<string,string>',
        'output_parameter_values' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'action_trigger_type_reference' => null,
        'trigger_type_display_name' => null,
        'trigger_time' => 'date-time',
        'input_parameter_values' => null,
        'output_parameter_values' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'action_trigger_type_reference' => false,
        'trigger_type_display_name' => false,
        'trigger_time' => false,
        'input_parameter_values' => false,
        'output_parameter_values' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action_trigger_type_reference' => 'action_trigger_type_reference',
        'trigger_type_display_name' => 'trigger_type_display_name',
        'trigger_time' => 'trigger_time',
        'input_parameter_values' => 'input_parameter_values',
        'output_parameter_values' => 'output_parameter_values'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action_trigger_type_reference' => 'setActionTriggerTypeReference',
        'trigger_type_display_name' => 'setTriggerTypeDisplayName',
        'trigger_time' => 'setTriggerTime',
        'input_parameter_values' => 'setInputParameterValues',
        'output_parameter_values' => 'setOutputParameterValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action_trigger_type_reference' => 'getActionTriggerTypeReference',
        'trigger_type_display_name' => 'getTriggerTypeDisplayName',
        'trigger_time' => 'getTriggerTime',
        'input_parameter_values' => 'getInputParameterValues',
        'output_parameter_values' => 'getOutputParameterValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('action_trigger_type_reference', $data ?? [], null);
        $this->setIfExists('trigger_type_display_name', $data ?? [], null);
        $this->setIfExists('trigger_time', $data ?? [], null);
        $this->setIfExists('input_parameter_values', $data ?? [], null);
        $this->setIfExists('output_parameter_values', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['action_trigger_type_reference'] === null) {
            $invalidProperties[] = "'action_trigger_type_reference' can't be null";
        }
        if (!is_null($this->container['trigger_type_display_name']) && (mb_strlen($this->container['trigger_type_display_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'trigger_type_display_name', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['trigger_type_display_name']) && !preg_match("/^[^&<>'\/\"]*$/", $this->container['trigger_type_display_name'])) {
            $invalidProperties[] = "invalid value for 'trigger_type_display_name', must be conform to the pattern /^[^&<>'\/\"]*$/.";
        }

        if ($this->container['trigger_time'] === null) {
            $invalidProperties[] = "'trigger_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action_trigger_type_reference
     *
     * @return \OpenAPI\Client\Model\ActionTriggerTypeReference
     */
    public function getActionTriggerTypeReference()
    {
        return $this->container['action_trigger_type_reference'];
    }

    /**
     * Sets action_trigger_type_reference
     *
     * @param \OpenAPI\Client\Model\ActionTriggerTypeReference $action_trigger_type_reference action_trigger_type_reference
     *
     * @return self
     */
    public function setActionTriggerTypeReference($action_trigger_type_reference)
    {
        if (is_null($action_trigger_type_reference)) {
            throw new \InvalidArgumentException('non-nullable action_trigger_type_reference cannot be null');
        }
        $this->container['action_trigger_type_reference'] = $action_trigger_type_reference;

        return $this;
    }

    /**
     * Gets trigger_type_display_name
     *
     * @return string|null
     */
    public function getTriggerTypeDisplayName()
    {
        return $this->container['trigger_type_display_name'];
    }

    /**
     * Sets trigger_type_display_name
     *
     * @param string|null $trigger_type_display_name The trigger display name.  Default to trigger type display name.
     *
     * @return self
     */
    public function setTriggerTypeDisplayName($trigger_type_display_name)
    {
        if (is_null($trigger_type_display_name)) {
            throw new \InvalidArgumentException('non-nullable trigger_type_display_name cannot be null');
        }
        if ((mb_strlen($trigger_type_display_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $trigger_type_display_name when calling TriggerInfo., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[^&<>'\/\"]*$/", ObjectSerializer::toString($trigger_type_display_name)))) {
            throw new \InvalidArgumentException("invalid value for \$trigger_type_display_name when calling TriggerInfo., must conform to the pattern /^[^&<>'\/\"]*$/.");
        }

        $this->container['trigger_type_display_name'] = $trigger_type_display_name;

        return $this;
    }

    /**
     * Gets trigger_time
     *
     * @return \DateTime
     */
    public function getTriggerTime()
    {
        return $this->container['trigger_time'];
    }

    /**
     * Sets trigger_time
     *
     * @param \DateTime $trigger_time The time that this trigger happened
     *
     * @return self
     */
    public function setTriggerTime($trigger_time)
    {
        if (is_null($trigger_time)) {
            throw new \InvalidArgumentException('non-nullable trigger_time cannot be null');
        }
        $this->container['trigger_time'] = $trigger_time;

        return $this;
    }

    /**
     * Gets input_parameter_values
     *
     * @return array<string,string>|null
     */
    public function getInputParameterValues()
    {
        return $this->container['input_parameter_values'];
    }

    /**
     * Sets input_parameter_values
     *
     * @param array<string,string>|null $input_parameter_values The trigger or action required input parameter value map, or the output parameters.
     *
     * @return self
     */
    public function setInputParameterValues($input_parameter_values)
    {
        if (is_null($input_parameter_values)) {
            throw new \InvalidArgumentException('non-nullable input_parameter_values cannot be null');
        }
        $this->container['input_parameter_values'] = $input_parameter_values;

        return $this;
    }

    /**
     * Gets output_parameter_values
     *
     * @return array<string,string>|null
     */
    public function getOutputParameterValues()
    {
        return $this->container['output_parameter_values'];
    }

    /**
     * Sets output_parameter_values
     *
     * @param array<string,string>|null $output_parameter_values The trigger or action required input parameter value map, or the output parameters.
     *
     * @return self
     */
    public function setOutputParameterValues($output_parameter_values)
    {
        if (is_null($output_parameter_values)) {
            throw new \InvalidArgumentException('non-nullable output_parameter_values cannot be null');
        }
        $this->container['output_parameter_values'] = $output_parameter_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


