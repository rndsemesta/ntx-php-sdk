<?php
/**
 * BlueprintDependencyList
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BlueprintDependencyList Class Doc Comment
 *
 * @category Class
 * @description Depends on definition for Application.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BlueprintDependencyList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'blueprint_dependency_list';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'getter_resource_kind' => 'string',
        'from_resource_kind' => 'string',
        'setter_resource_kind' => 'string',
        'setter_resource_name' => 'string',
        'action_name' => 'string',
        'action_resource_name' => 'string',
        'getter_resource_name' => 'string',
        'setter_resource_attr' => 'string',
        'action_resource_kind' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'getter_resource_kind' => null,
        'from_resource_kind' => null,
        'setter_resource_kind' => null,
        'setter_resource_name' => null,
        'action_name' => null,
        'action_resource_name' => null,
        'getter_resource_name' => null,
        'setter_resource_attr' => null,
        'action_resource_kind' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'getter_resource_kind' => false,
        'from_resource_kind' => false,
        'setter_resource_kind' => false,
        'setter_resource_name' => false,
        'action_name' => false,
        'action_resource_name' => false,
        'getter_resource_name' => false,
        'setter_resource_attr' => false,
        'action_resource_kind' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'getter_resource_kind' => 'getter_resource_kind',
        'from_resource_kind' => 'from_resource_kind',
        'setter_resource_kind' => 'setter_resource_kind',
        'setter_resource_name' => 'setter_resource_name',
        'action_name' => 'action_name',
        'action_resource_name' => 'action_resource_name',
        'getter_resource_name' => 'getter_resource_name',
        'setter_resource_attr' => 'setter_resource_attr',
        'action_resource_kind' => 'action_resource_kind'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'getter_resource_kind' => 'setGetterResourceKind',
        'from_resource_kind' => 'setFromResourceKind',
        'setter_resource_kind' => 'setSetterResourceKind',
        'setter_resource_name' => 'setSetterResourceName',
        'action_name' => 'setActionName',
        'action_resource_name' => 'setActionResourceName',
        'getter_resource_name' => 'setGetterResourceName',
        'setter_resource_attr' => 'setSetterResourceAttr',
        'action_resource_kind' => 'setActionResourceKind'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'getter_resource_kind' => 'getGetterResourceKind',
        'from_resource_kind' => 'getFromResourceKind',
        'setter_resource_kind' => 'getSetterResourceKind',
        'setter_resource_name' => 'getSetterResourceName',
        'action_name' => 'getActionName',
        'action_resource_name' => 'getActionResourceName',
        'getter_resource_name' => 'getGetterResourceName',
        'setter_resource_attr' => 'getSetterResourceAttr',
        'action_resource_kind' => 'getActionResourceKind'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('getter_resource_kind', $data ?? [], null);
        $this->setIfExists('from_resource_kind', $data ?? [], null);
        $this->setIfExists('setter_resource_kind', $data ?? [], null);
        $this->setIfExists('setter_resource_name', $data ?? [], null);
        $this->setIfExists('action_name', $data ?? [], null);
        $this->setIfExists('action_resource_name', $data ?? [], null);
        $this->setIfExists('getter_resource_name', $data ?? [], null);
        $this->setIfExists('setter_resource_attr', $data ?? [], null);
        $this->setIfExists('action_resource_kind', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['getter_resource_kind'] === null) {
            $invalidProperties[] = "'getter_resource_kind' can't be null";
        }
        if ($this->container['setter_resource_kind'] === null) {
            $invalidProperties[] = "'setter_resource_kind' can't be null";
        }
        if ($this->container['setter_resource_name'] === null) {
            $invalidProperties[] = "'setter_resource_name' can't be null";
        }
        if ($this->container['action_name'] === null) {
            $invalidProperties[] = "'action_name' can't be null";
        }
        if ($this->container['action_resource_name'] === null) {
            $invalidProperties[] = "'action_resource_name' can't be null";
        }
        if ($this->container['getter_resource_name'] === null) {
            $invalidProperties[] = "'getter_resource_name' can't be null";
        }
        if ($this->container['setter_resource_attr'] === null) {
            $invalidProperties[] = "'setter_resource_attr' can't be null";
        }
        if ($this->container['action_resource_kind'] === null) {
            $invalidProperties[] = "'action_resource_kind' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets getter_resource_kind
     *
     * @return string
     */
    public function getGetterResourceKind()
    {
        return $this->container['getter_resource_kind'];
    }

    /**
     * Sets getter_resource_kind
     *
     * @param string $getter_resource_kind 
     *
     * @return self
     */
    public function setGetterResourceKind($getter_resource_kind)
    {
        if (is_null($getter_resource_kind)) {
            throw new \InvalidArgumentException('non-nullable getter_resource_kind cannot be null');
        }
        $this->container['getter_resource_kind'] = $getter_resource_kind;

        return $this;
    }

    /**
     * Gets from_resource_kind
     *
     * @return string|null
     */
    public function getFromResourceKind()
    {
        return $this->container['from_resource_kind'];
    }

    /**
     * Sets from_resource_kind
     *
     * @param string|null $from_resource_kind 
     *
     * @return self
     */
    public function setFromResourceKind($from_resource_kind)
    {
        if (is_null($from_resource_kind)) {
            throw new \InvalidArgumentException('non-nullable from_resource_kind cannot be null');
        }
        $this->container['from_resource_kind'] = $from_resource_kind;

        return $this;
    }

    /**
     * Gets setter_resource_kind
     *
     * @return string
     */
    public function getSetterResourceKind()
    {
        return $this->container['setter_resource_kind'];
    }

    /**
     * Sets setter_resource_kind
     *
     * @param string $setter_resource_kind 
     *
     * @return self
     */
    public function setSetterResourceKind($setter_resource_kind)
    {
        if (is_null($setter_resource_kind)) {
            throw new \InvalidArgumentException('non-nullable setter_resource_kind cannot be null');
        }
        $this->container['setter_resource_kind'] = $setter_resource_kind;

        return $this;
    }

    /**
     * Gets setter_resource_name
     *
     * @return string
     */
    public function getSetterResourceName()
    {
        return $this->container['setter_resource_name'];
    }

    /**
     * Sets setter_resource_name
     *
     * @param string $setter_resource_name 
     *
     * @return self
     */
    public function setSetterResourceName($setter_resource_name)
    {
        if (is_null($setter_resource_name)) {
            throw new \InvalidArgumentException('non-nullable setter_resource_name cannot be null');
        }
        $this->container['setter_resource_name'] = $setter_resource_name;

        return $this;
    }

    /**
     * Gets action_name
     *
     * @return string
     */
    public function getActionName()
    {
        return $this->container['action_name'];
    }

    /**
     * Sets action_name
     *
     * @param string $action_name 
     *
     * @return self
     */
    public function setActionName($action_name)
    {
        if (is_null($action_name)) {
            throw new \InvalidArgumentException('non-nullable action_name cannot be null');
        }
        $this->container['action_name'] = $action_name;

        return $this;
    }

    /**
     * Gets action_resource_name
     *
     * @return string
     */
    public function getActionResourceName()
    {
        return $this->container['action_resource_name'];
    }

    /**
     * Sets action_resource_name
     *
     * @param string $action_resource_name 
     *
     * @return self
     */
    public function setActionResourceName($action_resource_name)
    {
        if (is_null($action_resource_name)) {
            throw new \InvalidArgumentException('non-nullable action_resource_name cannot be null');
        }
        $this->container['action_resource_name'] = $action_resource_name;

        return $this;
    }

    /**
     * Gets getter_resource_name
     *
     * @return string
     */
    public function getGetterResourceName()
    {
        return $this->container['getter_resource_name'];
    }

    /**
     * Sets getter_resource_name
     *
     * @param string $getter_resource_name 
     *
     * @return self
     */
    public function setGetterResourceName($getter_resource_name)
    {
        if (is_null($getter_resource_name)) {
            throw new \InvalidArgumentException('non-nullable getter_resource_name cannot be null');
        }
        $this->container['getter_resource_name'] = $getter_resource_name;

        return $this;
    }

    /**
     * Gets setter_resource_attr
     *
     * @return string
     */
    public function getSetterResourceAttr()
    {
        return $this->container['setter_resource_attr'];
    }

    /**
     * Sets setter_resource_attr
     *
     * @param string $setter_resource_attr 
     *
     * @return self
     */
    public function setSetterResourceAttr($setter_resource_attr)
    {
        if (is_null($setter_resource_attr)) {
            throw new \InvalidArgumentException('non-nullable setter_resource_attr cannot be null');
        }
        $this->container['setter_resource_attr'] = $setter_resource_attr;

        return $this;
    }

    /**
     * Gets action_resource_kind
     *
     * @return string
     */
    public function getActionResourceKind()
    {
        return $this->container['action_resource_kind'];
    }

    /**
     * Sets action_resource_kind
     *
     * @param string $action_resource_kind 
     *
     * @return self
     */
    public function setActionResourceKind($action_resource_kind)
    {
        if (is_null($action_resource_kind)) {
            throw new \InvalidArgumentException('non-nullable action_resource_kind cannot be null');
        }
        $this->container['action_resource_kind'] = $action_resource_kind;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


