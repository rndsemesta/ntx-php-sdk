<?php
/**
 * WidgetConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WidgetConfig Class Doc Comment
 *
 * @category Class
 * @description Configuration of the widget.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WidgetConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'widget_config';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'widget_field_list' => '\OpenAPI\Client\Model\WidgetFieldDescriptor[]',
        'entity_type' => 'string',
        'repetition_criteria' => '\OpenAPI\Client\Model\RepetitionCriteria',
        'widget_data_projection' => '\OpenAPI\Client\Model\WidgetDataProjection',
        'widget_description' => 'string',
        'widget_type' => 'string',
        'widget_size' => 'string',
        'widget_heading' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'widget_field_list' => null,
        'entity_type' => null,
        'repetition_criteria' => null,
        'widget_data_projection' => null,
        'widget_description' => null,
        'widget_type' => null,
        'widget_size' => null,
        'widget_heading' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'widget_field_list' => false,
        'entity_type' => false,
        'repetition_criteria' => false,
        'widget_data_projection' => false,
        'widget_description' => false,
        'widget_type' => false,
        'widget_size' => false,
        'widget_heading' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'widget_field_list' => 'widget_field_list',
        'entity_type' => 'entity_type',
        'repetition_criteria' => 'repetition_criteria',
        'widget_data_projection' => 'widget_data_projection',
        'widget_description' => 'widget_description',
        'widget_type' => 'widget_type',
        'widget_size' => 'widget_size',
        'widget_heading' => 'widget_heading'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'widget_field_list' => 'setWidgetFieldList',
        'entity_type' => 'setEntityType',
        'repetition_criteria' => 'setRepetitionCriteria',
        'widget_data_projection' => 'setWidgetDataProjection',
        'widget_description' => 'setWidgetDescription',
        'widget_type' => 'setWidgetType',
        'widget_size' => 'setWidgetSize',
        'widget_heading' => 'setWidgetHeading'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'widget_field_list' => 'getWidgetFieldList',
        'entity_type' => 'getEntityType',
        'repetition_criteria' => 'getRepetitionCriteria',
        'widget_data_projection' => 'getWidgetDataProjection',
        'widget_description' => 'getWidgetDescription',
        'widget_type' => 'getWidgetType',
        'widget_size' => 'getWidgetSize',
        'widget_heading' => 'getWidgetHeading'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('widget_field_list', $data ?? [], null);
        $this->setIfExists('entity_type', $data ?? [], null);
        $this->setIfExists('repetition_criteria', $data ?? [], null);
        $this->setIfExists('widget_data_projection', $data ?? [], null);
        $this->setIfExists('widget_description', $data ?? [], null);
        $this->setIfExists('widget_type', $data ?? [], null);
        $this->setIfExists('widget_size', $data ?? [], null);
        $this->setIfExists('widget_heading', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['widget_description']) && (mb_strlen($this->container['widget_description']) > 1000)) {
            $invalidProperties[] = "invalid value for 'widget_description', the character length must be smaller than or equal to 1000.";
        }

        if ($this->container['widget_type'] === null) {
            $invalidProperties[] = "'widget_type' can't be null";
        }
        if (!is_null($this->container['widget_heading']) && (mb_strlen($this->container['widget_heading']) > 64)) {
            $invalidProperties[] = "invalid value for 'widget_heading', the character length must be smaller than or equal to 64.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets widget_field_list
     *
     * @return \OpenAPI\Client\Model\WidgetFieldDescriptor[]|null
     */
    public function getWidgetFieldList()
    {
        return $this->container['widget_field_list'];
    }

    /**
     * Sets widget_field_list
     *
     * @param \OpenAPI\Client\Model\WidgetFieldDescriptor[]|null $widget_field_list List of selected fields for the widget.
     *
     * @return self
     */
    public function setWidgetFieldList($widget_field_list)
    {
        if (is_null($widget_field_list)) {
            throw new \InvalidArgumentException('non-nullable widget_field_list cannot be null');
        }
        $this->container['widget_field_list'] = $widget_field_list;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return string|null
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string|null $entity_type Type of the entity.
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        if (is_null($entity_type)) {
            throw new \InvalidArgumentException('non-nullable entity_type cannot be null');
        }
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets repetition_criteria
     *
     * @return \OpenAPI\Client\Model\RepetitionCriteria|null
     */
    public function getRepetitionCriteria()
    {
        return $this->container['repetition_criteria'];
    }

    /**
     * Sets repetition_criteria
     *
     * @param \OpenAPI\Client\Model\RepetitionCriteria|null $repetition_criteria repetition_criteria
     *
     * @return self
     */
    public function setRepetitionCriteria($repetition_criteria)
    {
        if (is_null($repetition_criteria)) {
            throw new \InvalidArgumentException('non-nullable repetition_criteria cannot be null');
        }
        $this->container['repetition_criteria'] = $repetition_criteria;

        return $this;
    }

    /**
     * Gets widget_data_projection
     *
     * @return \OpenAPI\Client\Model\WidgetDataProjection|null
     */
    public function getWidgetDataProjection()
    {
        return $this->container['widget_data_projection'];
    }

    /**
     * Sets widget_data_projection
     *
     * @param \OpenAPI\Client\Model\WidgetDataProjection|null $widget_data_projection widget_data_projection
     *
     * @return self
     */
    public function setWidgetDataProjection($widget_data_projection)
    {
        if (is_null($widget_data_projection)) {
            throw new \InvalidArgumentException('non-nullable widget_data_projection cannot be null');
        }
        $this->container['widget_data_projection'] = $widget_data_projection;

        return $this;
    }

    /**
     * Gets widget_description
     *
     * @return string|null
     */
    public function getWidgetDescription()
    {
        return $this->container['widget_description'];
    }

    /**
     * Sets widget_description
     *
     * @param string|null $widget_description Description of the entity.
     *
     * @return self
     */
    public function setWidgetDescription($widget_description)
    {
        if (is_null($widget_description)) {
            throw new \InvalidArgumentException('non-nullable widget_description cannot be null');
        }
        if ((mb_strlen($widget_description) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $widget_description when calling WidgetConfig., must be smaller than or equal to 1000.');
        }

        $this->container['widget_description'] = $widget_description;

        return $this;
    }

    /**
     * Gets widget_type
     *
     * @return string
     */
    public function getWidgetType()
    {
        return $this->container['widget_type'];
    }

    /**
     * Sets widget_type
     *
     * @param string $widget_type Type of widget. Widget type can be one of these.   - bar_chart   - config_summary   - count_summary   - line_chart   - metric_summary_chart   - metric_summary_text   - table   - text
     *
     * @return self
     */
    public function setWidgetType($widget_type)
    {
        if (is_null($widget_type)) {
            throw new \InvalidArgumentException('non-nullable widget_type cannot be null');
        }
        $this->container['widget_type'] = $widget_type;

        return $this;
    }

    /**
     * Gets widget_size
     *
     * @return string|null
     */
    public function getWidgetSize()
    {
        return $this->container['widget_size'];
    }

    /**
     * Sets widget_size
     *
     * @param string|null $widget_size Size of the widget.
     *
     * @return self
     */
    public function setWidgetSize($widget_size)
    {
        if (is_null($widget_size)) {
            throw new \InvalidArgumentException('non-nullable widget_size cannot be null');
        }
        $this->container['widget_size'] = $widget_size;

        return $this;
    }

    /**
     * Gets widget_heading
     *
     * @return string|null
     */
    public function getWidgetHeading()
    {
        return $this->container['widget_heading'];
    }

    /**
     * Sets widget_heading
     *
     * @param string|null $widget_heading Heading for a widget.
     *
     * @return self
     */
    public function setWidgetHeading($widget_heading)
    {
        if (is_null($widget_heading)) {
            throw new \InvalidArgumentException('non-nullable widget_heading cannot be null');
        }
        if ((mb_strlen($widget_heading) > 64)) {
            throw new \InvalidArgumentException('invalid length for $widget_heading when calling WidgetConfig., must be smaller than or equal to 64.');
        }

        $this->container['widget_heading'] = $widget_heading;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


