<?php
/**
 * RecoveryPlanJobDefStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RecoveryPlanJobDefStatus Class Doc Comment
 *
 * @category Class
 * @description Recovery Plan Job status.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecoveryPlanJobDefStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'recovery_plan_job_def_status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'validation_information' => '\OpenAPI\Client\Model\RecoveryPlanJobDefStatusValidationInformation',
        'name' => 'string',
        'cleanup_status' => '\OpenAPI\Client\Model\RecoveryPlanJobExecutionPhasesStatus',
        'start_time' => '\DateTime',
        'execution_status' => '\OpenAPI\Client\Model\RecoveryPlanJobExecutionPhasesStatus',
        'recovery_plan_specification' => '\OpenAPI\Client\Model\RecoveryPlanJobDefStatusRecoveryPlanSpecification',
        'parent_recovery_plan_job_reference' => '\OpenAPI\Client\Model\RecoveryPlanJobReference',
        'end_time' => '\DateTime',
        'root_recovery_plan_job_reference' => '\OpenAPI\Client\Model\RecoveryPlanJobReference',
        'witness_address' => 'string',
        'resources' => '\OpenAPI\Client\Model\RecoveryPlanJobResources'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'validation_information' => null,
        'name' => null,
        'cleanup_status' => null,
        'start_time' => 'date-time',
        'execution_status' => null,
        'recovery_plan_specification' => null,
        'parent_recovery_plan_job_reference' => null,
        'end_time' => 'date-time',
        'root_recovery_plan_job_reference' => null,
        'witness_address' => null,
        'resources' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'validation_information' => false,
        'name' => false,
        'cleanup_status' => false,
        'start_time' => false,
        'execution_status' => false,
        'recovery_plan_specification' => false,
        'parent_recovery_plan_job_reference' => false,
        'end_time' => false,
        'root_recovery_plan_job_reference' => false,
        'witness_address' => false,
        'resources' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'validation_information' => 'validation_information',
        'name' => 'name',
        'cleanup_status' => 'cleanup_status',
        'start_time' => 'start_time',
        'execution_status' => 'execution_status',
        'recovery_plan_specification' => 'recovery_plan_specification',
        'parent_recovery_plan_job_reference' => 'parent_recovery_plan_job_reference',
        'end_time' => 'end_time',
        'root_recovery_plan_job_reference' => 'root_recovery_plan_job_reference',
        'witness_address' => 'witness_address',
        'resources' => 'resources'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'validation_information' => 'setValidationInformation',
        'name' => 'setName',
        'cleanup_status' => 'setCleanupStatus',
        'start_time' => 'setStartTime',
        'execution_status' => 'setExecutionStatus',
        'recovery_plan_specification' => 'setRecoveryPlanSpecification',
        'parent_recovery_plan_job_reference' => 'setParentRecoveryPlanJobReference',
        'end_time' => 'setEndTime',
        'root_recovery_plan_job_reference' => 'setRootRecoveryPlanJobReference',
        'witness_address' => 'setWitnessAddress',
        'resources' => 'setResources'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'validation_information' => 'getValidationInformation',
        'name' => 'getName',
        'cleanup_status' => 'getCleanupStatus',
        'start_time' => 'getStartTime',
        'execution_status' => 'getExecutionStatus',
        'recovery_plan_specification' => 'getRecoveryPlanSpecification',
        'parent_recovery_plan_job_reference' => 'getParentRecoveryPlanJobReference',
        'end_time' => 'getEndTime',
        'root_recovery_plan_job_reference' => 'getRootRecoveryPlanJobReference',
        'witness_address' => 'getWitnessAddress',
        'resources' => 'getResources'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('validation_information', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('cleanup_status', $data ?? [], null);
        $this->setIfExists('start_time', $data ?? [], null);
        $this->setIfExists('execution_status', $data ?? [], null);
        $this->setIfExists('recovery_plan_specification', $data ?? [], null);
        $this->setIfExists('parent_recovery_plan_job_reference', $data ?? [], null);
        $this->setIfExists('end_time', $data ?? [], null);
        $this->setIfExists('root_recovery_plan_job_reference', $data ?? [], null);
        $this->setIfExists('witness_address', $data ?? [], null);
        $this->setIfExists('resources', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['resources'] === null) {
            $invalidProperties[] = "'resources' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets validation_information
     *
     * @return \OpenAPI\Client\Model\RecoveryPlanJobDefStatusValidationInformation|null
     */
    public function getValidationInformation()
    {
        return $this->container['validation_information'];
    }

    /**
     * Sets validation_information
     *
     * @param \OpenAPI\Client\Model\RecoveryPlanJobDefStatusValidationInformation|null $validation_information validation_information
     *
     * @return self
     */
    public function setValidationInformation($validation_information)
    {
        if (is_null($validation_information)) {
            throw new \InvalidArgumentException('non-nullable validation_information cannot be null');
        }
        $this->container['validation_information'] = $validation_information;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Recovery Plan Job name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets cleanup_status
     *
     * @return \OpenAPI\Client\Model\RecoveryPlanJobExecutionPhasesStatus|null
     */
    public function getCleanupStatus()
    {
        return $this->container['cleanup_status'];
    }

    /**
     * Sets cleanup_status
     *
     * @param \OpenAPI\Client\Model\RecoveryPlanJobExecutionPhasesStatus|null $cleanup_status cleanup_status
     *
     * @return self
     */
    public function setCleanupStatus($cleanup_status)
    {
        if (is_null($cleanup_status)) {
            throw new \InvalidArgumentException('non-nullable cleanup_status cannot be null');
        }
        $this->container['cleanup_status'] = $cleanup_status;

        return $this;
    }

    /**
     * Gets start_time
     *
     * @return \DateTime|null
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     *
     * @param \DateTime|null $start_time Time when the Recovery Plan Job was created.
     *
     * @return self
     */
    public function setStartTime($start_time)
    {
        if (is_null($start_time)) {
            throw new \InvalidArgumentException('non-nullable start_time cannot be null');
        }
        $this->container['start_time'] = $start_time;

        return $this;
    }

    /**
     * Gets execution_status
     *
     * @return \OpenAPI\Client\Model\RecoveryPlanJobExecutionPhasesStatus|null
     */
    public function getExecutionStatus()
    {
        return $this->container['execution_status'];
    }

    /**
     * Sets execution_status
     *
     * @param \OpenAPI\Client\Model\RecoveryPlanJobExecutionPhasesStatus|null $execution_status execution_status
     *
     * @return self
     */
    public function setExecutionStatus($execution_status)
    {
        if (is_null($execution_status)) {
            throw new \InvalidArgumentException('non-nullable execution_status cannot be null');
        }
        $this->container['execution_status'] = $execution_status;

        return $this;
    }

    /**
     * Gets recovery_plan_specification
     *
     * @return \OpenAPI\Client\Model\RecoveryPlanJobDefStatusRecoveryPlanSpecification|null
     */
    public function getRecoveryPlanSpecification()
    {
        return $this->container['recovery_plan_specification'];
    }

    /**
     * Sets recovery_plan_specification
     *
     * @param \OpenAPI\Client\Model\RecoveryPlanJobDefStatusRecoveryPlanSpecification|null $recovery_plan_specification recovery_plan_specification
     *
     * @return self
     */
    public function setRecoveryPlanSpecification($recovery_plan_specification)
    {
        if (is_null($recovery_plan_specification)) {
            throw new \InvalidArgumentException('non-nullable recovery_plan_specification cannot be null');
        }
        $this->container['recovery_plan_specification'] = $recovery_plan_specification;

        return $this;
    }

    /**
     * Gets parent_recovery_plan_job_reference
     *
     * @return \OpenAPI\Client\Model\RecoveryPlanJobReference|null
     */
    public function getParentRecoveryPlanJobReference()
    {
        return $this->container['parent_recovery_plan_job_reference'];
    }

    /**
     * Sets parent_recovery_plan_job_reference
     *
     * @param \OpenAPI\Client\Model\RecoveryPlanJobReference|null $parent_recovery_plan_job_reference parent_recovery_plan_job_reference
     *
     * @return self
     */
    public function setParentRecoveryPlanJobReference($parent_recovery_plan_job_reference)
    {
        if (is_null($parent_recovery_plan_job_reference)) {
            throw new \InvalidArgumentException('non-nullable parent_recovery_plan_job_reference cannot be null');
        }
        $this->container['parent_recovery_plan_job_reference'] = $parent_recovery_plan_job_reference;

        return $this;
    }

    /**
     * Gets end_time
     *
     * @return \DateTime|null
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     *
     * @param \DateTime|null $end_time Time when the Recovery Plan Job execution ended.
     *
     * @return self
     */
    public function setEndTime($end_time)
    {
        if (is_null($end_time)) {
            throw new \InvalidArgumentException('non-nullable end_time cannot be null');
        }
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets root_recovery_plan_job_reference
     *
     * @return \OpenAPI\Client\Model\RecoveryPlanJobReference|null
     */
    public function getRootRecoveryPlanJobReference()
    {
        return $this->container['root_recovery_plan_job_reference'];
    }

    /**
     * Sets root_recovery_plan_job_reference
     *
     * @param \OpenAPI\Client\Model\RecoveryPlanJobReference|null $root_recovery_plan_job_reference root_recovery_plan_job_reference
     *
     * @return self
     */
    public function setRootRecoveryPlanJobReference($root_recovery_plan_job_reference)
    {
        if (is_null($root_recovery_plan_job_reference)) {
            throw new \InvalidArgumentException('non-nullable root_recovery_plan_job_reference cannot be null');
        }
        $this->container['root_recovery_plan_job_reference'] = $root_recovery_plan_job_reference;

        return $this;
    }

    /**
     * Gets witness_address
     *
     * @return string|null
     */
    public function getWitnessAddress()
    {
        return $this->container['witness_address'];
    }

    /**
     * Sets witness_address
     *
     * @param string|null $witness_address Address of the witness, which has triggered this Recovery Plan Job. This will be same as Availability Zone URL, on which witness is deployed.
     *
     * @return self
     */
    public function setWitnessAddress($witness_address)
    {
        if (is_null($witness_address)) {
            throw new \InvalidArgumentException('non-nullable witness_address cannot be null');
        }
        $this->container['witness_address'] = $witness_address;

        return $this;
    }

    /**
     * Gets resources
     *
     * @return \OpenAPI\Client\Model\RecoveryPlanJobResources
     */
    public function getResources()
    {
        return $this->container['resources'];
    }

    /**
     * Sets resources
     *
     * @param \OpenAPI\Client\Model\RecoveryPlanJobResources $resources resources
     *
     * @return self
     */
    public function setResources($resources)
    {
        if (is_null($resources)) {
            throw new \InvalidArgumentException('non-nullable resources cannot be null');
        }
        $this->container['resources'] = $resources;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


