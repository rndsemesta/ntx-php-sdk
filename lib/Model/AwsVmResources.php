<?php
/**
 * AwsVmResources
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AwsVmResources Class Doc Comment
 *
 * @category Class
 * @description AWS VM Resources Definition.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AwsVmResources implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'aws_vm_resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'instance_type' => 'string',
        'instance_profile_name' => 'string',
        'availability_zone' => 'string',
        'subnet_id' => 'string',
        'key_name' => 'string',
        'region' => 'string',
        'user_data' => 'string',
        'instance_initiated_shutdown_behavior' => 'string',
        'image_id' => 'string',
        'state' => 'string',
        'security_group_list' => '\OpenAPI\Client\Model\AwsSecurityGroupListInner[]',
        'block_device_map' => '\OpenAPI\Client\Model\AwsBlockDeviceMap',
        'private_ip_address' => 'string',
        'vpc_id' => 'string',
        'tag_list' => '\OpenAPI\Client\Model\AwsTagListInner[]',
        'account_uuid' => 'string',
        'associate_public_ip_address' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'instance_type' => null,
        'instance_profile_name' => null,
        'availability_zone' => null,
        'subnet_id' => null,
        'key_name' => null,
        'region' => null,
        'user_data' => null,
        'instance_initiated_shutdown_behavior' => null,
        'image_id' => null,
        'state' => null,
        'security_group_list' => null,
        'block_device_map' => null,
        'private_ip_address' => null,
        'vpc_id' => null,
        'tag_list' => null,
        'account_uuid' => 'UUID',
        'associate_public_ip_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'instance_type' => false,
        'instance_profile_name' => false,
        'availability_zone' => false,
        'subnet_id' => false,
        'key_name' => false,
        'region' => false,
        'user_data' => false,
        'instance_initiated_shutdown_behavior' => false,
        'image_id' => false,
        'state' => false,
        'security_group_list' => false,
        'block_device_map' => false,
        'private_ip_address' => false,
        'vpc_id' => false,
        'tag_list' => false,
        'account_uuid' => false,
        'associate_public_ip_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'instance_type' => 'instance_type',
        'instance_profile_name' => 'instance_profile_name',
        'availability_zone' => 'availability_zone',
        'subnet_id' => 'subnet_id',
        'key_name' => 'key_name',
        'region' => 'region',
        'user_data' => 'user_data',
        'instance_initiated_shutdown_behavior' => 'instance_initiated_shutdown_behavior',
        'image_id' => 'image_id',
        'state' => 'state',
        'security_group_list' => 'security_group_list',
        'block_device_map' => 'block_device_map',
        'private_ip_address' => 'private_ip_address',
        'vpc_id' => 'vpc_id',
        'tag_list' => 'tag_list',
        'account_uuid' => 'account_uuid',
        'associate_public_ip_address' => 'associate_public_ip_address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'instance_type' => 'setInstanceType',
        'instance_profile_name' => 'setInstanceProfileName',
        'availability_zone' => 'setAvailabilityZone',
        'subnet_id' => 'setSubnetId',
        'key_name' => 'setKeyName',
        'region' => 'setRegion',
        'user_data' => 'setUserData',
        'instance_initiated_shutdown_behavior' => 'setInstanceInitiatedShutdownBehavior',
        'image_id' => 'setImageId',
        'state' => 'setState',
        'security_group_list' => 'setSecurityGroupList',
        'block_device_map' => 'setBlockDeviceMap',
        'private_ip_address' => 'setPrivateIpAddress',
        'vpc_id' => 'setVpcId',
        'tag_list' => 'setTagList',
        'account_uuid' => 'setAccountUuid',
        'associate_public_ip_address' => 'setAssociatePublicIpAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'instance_type' => 'getInstanceType',
        'instance_profile_name' => 'getInstanceProfileName',
        'availability_zone' => 'getAvailabilityZone',
        'subnet_id' => 'getSubnetId',
        'key_name' => 'getKeyName',
        'region' => 'getRegion',
        'user_data' => 'getUserData',
        'instance_initiated_shutdown_behavior' => 'getInstanceInitiatedShutdownBehavior',
        'image_id' => 'getImageId',
        'state' => 'getState',
        'security_group_list' => 'getSecurityGroupList',
        'block_device_map' => 'getBlockDeviceMap',
        'private_ip_address' => 'getPrivateIpAddress',
        'vpc_id' => 'getVpcId',
        'tag_list' => 'getTagList',
        'account_uuid' => 'getAccountUuid',
        'associate_public_ip_address' => 'getAssociatePublicIpAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('instance_type', $data ?? [], null);
        $this->setIfExists('instance_profile_name', $data ?? [], null);
        $this->setIfExists('availability_zone', $data ?? [], null);
        $this->setIfExists('subnet_id', $data ?? [], null);
        $this->setIfExists('key_name', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('user_data', $data ?? [], null);
        $this->setIfExists('instance_initiated_shutdown_behavior', $data ?? [], null);
        $this->setIfExists('image_id', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('security_group_list', $data ?? [], null);
        $this->setIfExists('block_device_map', $data ?? [], null);
        $this->setIfExists('private_ip_address', $data ?? [], null);
        $this->setIfExists('vpc_id', $data ?? [], null);
        $this->setIfExists('tag_list', $data ?? [], null);
        $this->setIfExists('account_uuid', $data ?? [], null);
        $this->setIfExists('associate_public_ip_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['instance_type']) && (mb_strlen($this->container['instance_type']) > 64)) {
            $invalidProperties[] = "invalid value for 'instance_type', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['subnet_id']) && !preg_match("/^subnet-[a-f0-9]{1,17}$/", $this->container['subnet_id'])) {
            $invalidProperties[] = "invalid value for 'subnet_id', must be conform to the pattern /^subnet-[a-f0-9]{1,17}$/.";
        }

        if (!is_null($this->container['region']) && !preg_match("/^[a-z]{2}-[a-z\\-]*-[1-9]{1}$/", $this->container['region'])) {
            $invalidProperties[] = "invalid value for 'region', must be conform to the pattern /^[a-z]{2}-[a-z\\-]*-[1-9]{1}$/.";
        }

        if (!is_null($this->container['user_data']) && (mb_strlen($this->container['user_data']) > 16000)) {
            $invalidProperties[] = "invalid value for 'user_data', the character length must be smaller than or equal to 16000.";
        }

        if (!is_null($this->container['image_id']) && !preg_match("/^ami-[a-f0-9]{1,17}$/", $this->container['image_id'])) {
            $invalidProperties[] = "invalid value for 'image_id', must be conform to the pattern /^ami-[a-f0-9]{1,17}$/.";
        }

        if (!is_null($this->container['private_ip_address']) && !preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/", $this->container['private_ip_address'])) {
            $invalidProperties[] = "invalid value for 'private_ip_address', must be conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.";
        }

        if (!is_null($this->container['vpc_id']) && !preg_match("/^vpc-[a-f0-9]{1,17}$/", $this->container['vpc_id'])) {
            $invalidProperties[] = "invalid value for 'vpc_id', must be conform to the pattern /^vpc-[a-f0-9]{1,17}$/.";
        }

        if (!is_null($this->container['account_uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['account_uuid'])) {
            $invalidProperties[] = "invalid value for 'account_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets instance_type
     *
     * @return string|null
     */
    public function getInstanceType()
    {
        return $this->container['instance_type'];
    }

    /**
     * Sets instance_type
     *
     * @param string|null $instance_type The type of instance e.g.'t1.micro', 'm1.small'
     *
     * @return self
     */
    public function setInstanceType($instance_type)
    {
        if (is_null($instance_type)) {
            throw new \InvalidArgumentException('non-nullable instance_type cannot be null');
        }
        if ((mb_strlen($instance_type) > 64)) {
            throw new \InvalidArgumentException('invalid length for $instance_type when calling AwsVmResources., must be smaller than or equal to 64.');
        }

        $this->container['instance_type'] = $instance_type;

        return $this;
    }

    /**
     * Gets instance_profile_name
     *
     * @return string|null
     */
    public function getInstanceProfileName()
    {
        return $this->container['instance_profile_name'];
    }

    /**
     * Sets instance_profile_name
     *
     * @param string|null $instance_profile_name The name of the IAM Instance Profile (IIP) associated with the instance
     *
     * @return self
     */
    public function setInstanceProfileName($instance_profile_name)
    {
        if (is_null($instance_profile_name)) {
            throw new \InvalidArgumentException('non-nullable instance_profile_name cannot be null');
        }
        $this->container['instance_profile_name'] = $instance_profile_name;

        return $this;
    }

    /**
     * Gets availability_zone
     *
     * @return string|null
     */
    public function getAvailabilityZone()
    {
        return $this->container['availability_zone'];
    }

    /**
     * Sets availability_zone
     *
     * @param string|null $availability_zone The zone on which the instance is to be created.
     *
     * @return self
     */
    public function setAvailabilityZone($availability_zone)
    {
        if (is_null($availability_zone)) {
            throw new \InvalidArgumentException('non-nullable availability_zone cannot be null');
        }
        $this->container['availability_zone'] = $availability_zone;

        return $this;
    }

    /**
     * Gets subnet_id
     *
     * @return string|null
     */
    public function getSubnetId()
    {
        return $this->container['subnet_id'];
    }

    /**
     * Sets subnet_id
     *
     * @param string|null $subnet_id The subnet within the VPC the instance belongs to.
     *
     * @return self
     */
    public function setSubnetId($subnet_id)
    {
        if (is_null($subnet_id)) {
            throw new \InvalidArgumentException('non-nullable subnet_id cannot be null');
        }

        if ((!preg_match("/^subnet-[a-f0-9]{1,17}$/", ObjectSerializer::toString($subnet_id)))) {
            throw new \InvalidArgumentException("invalid value for \$subnet_id when calling AwsVmResources., must conform to the pattern /^subnet-[a-f0-9]{1,17}$/.");
        }

        $this->container['subnet_id'] = $subnet_id;

        return $this;
    }

    /**
     * Gets key_name
     *
     * @return string|null
     */
    public function getKeyName()
    {
        return $this->container['key_name'];
    }

    /**
     * Sets key_name
     *
     * @param string|null $key_name The name of the key pair used to launch the instance
     *
     * @return self
     */
    public function setKeyName($key_name)
    {
        if (is_null($key_name)) {
            throw new \InvalidArgumentException('non-nullable key_name cannot be null');
        }
        $this->container['key_name'] = $key_name;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region The region to which the instance belongs.
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }

        if ((!preg_match("/^[a-z]{2}-[a-z\\-]*-[1-9]{1}$/", ObjectSerializer::toString($region)))) {
            throw new \InvalidArgumentException("invalid value for \$region when calling AwsVmResources., must conform to the pattern /^[a-z]{2}-[a-z\\-]*-[1-9]{1}$/.");
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets user_data
     *
     * @return string|null
     */
    public function getUserData()
    {
        return $this->container['user_data'];
    }

    /**
     * Sets user_data
     *
     * @param string|null $user_data User data passed to launch the instance
     *
     * @return self
     */
    public function setUserData($user_data)
    {
        if (is_null($user_data)) {
            throw new \InvalidArgumentException('non-nullable user_data cannot be null');
        }
        if ((mb_strlen($user_data) > 16000)) {
            throw new \InvalidArgumentException('invalid length for $user_data when calling AwsVmResources., must be smaller than or equal to 16000.');
        }

        $this->container['user_data'] = $user_data;

        return $this;
    }

    /**
     * Gets instance_initiated_shutdown_behavior
     *
     * @return string|null
     */
    public function getInstanceInitiatedShutdownBehavior()
    {
        return $this->container['instance_initiated_shutdown_behavior'];
    }

    /**
     * Sets instance_initiated_shutdown_behavior
     *
     * @param string|null $instance_initiated_shutdown_behavior Specifies whether the instance stops or terminates on instance-initiated shutdown.
     *
     * @return self
     */
    public function setInstanceInitiatedShutdownBehavior($instance_initiated_shutdown_behavior)
    {
        if (is_null($instance_initiated_shutdown_behavior)) {
            throw new \InvalidArgumentException('non-nullable instance_initiated_shutdown_behavior cannot be null');
        }
        $this->container['instance_initiated_shutdown_behavior'] = $instance_initiated_shutdown_behavior;

        return $this;
    }

    /**
     * Gets image_id
     *
     * @return string|null
     */
    public function getImageId()
    {
        return $this->container['image_id'];
    }

    /**
     * Sets image_id
     *
     * @param string|null $image_id The AWS ID of the AMI on the instance.
     *
     * @return self
     */
    public function setImageId($image_id)
    {
        if (is_null($image_id)) {
            throw new \InvalidArgumentException('non-nullable image_id cannot be null');
        }

        if ((!preg_match("/^ami-[a-f0-9]{1,17}$/", ObjectSerializer::toString($image_id)))) {
            throw new \InvalidArgumentException("invalid value for \$image_id when calling AwsVmResources., must conform to the pattern /^ami-[a-f0-9]{1,17}$/.");
        }

        $this->container['image_id'] = $image_id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state Instance's desired state.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets security_group_list
     *
     * @return \OpenAPI\Client\Model\AwsSecurityGroupListInner[]|null
     */
    public function getSecurityGroupList()
    {
        return $this->container['security_group_list'];
    }

    /**
     * Sets security_group_list
     *
     * @param \OpenAPI\Client\Model\AwsSecurityGroupListInner[]|null $security_group_list List of AWS security group IDs.
     *
     * @return self
     */
    public function setSecurityGroupList($security_group_list)
    {
        if (is_null($security_group_list)) {
            throw new \InvalidArgumentException('non-nullable security_group_list cannot be null');
        }
        $this->container['security_group_list'] = $security_group_list;

        return $this;
    }

    /**
     * Gets block_device_map
     *
     * @return \OpenAPI\Client\Model\AwsBlockDeviceMap|null
     */
    public function getBlockDeviceMap()
    {
        return $this->container['block_device_map'];
    }

    /**
     * Sets block_device_map
     *
     * @param \OpenAPI\Client\Model\AwsBlockDeviceMap|null $block_device_map block_device_map
     *
     * @return self
     */
    public function setBlockDeviceMap($block_device_map)
    {
        if (is_null($block_device_map)) {
            throw new \InvalidArgumentException('non-nullable block_device_map cannot be null');
        }
        $this->container['block_device_map'] = $block_device_map;

        return $this;
    }

    /**
     * Gets private_ip_address
     *
     * @return string|null
     */
    public function getPrivateIpAddress()
    {
        return $this->container['private_ip_address'];
    }

    /**
     * Sets private_ip_address
     *
     * @param string|null $private_ip_address The specific available IP from the subnet assigned to the instance.
     *
     * @return self
     */
    public function setPrivateIpAddress($private_ip_address)
    {
        if (is_null($private_ip_address)) {
            throw new \InvalidArgumentException('non-nullable private_ip_address cannot be null');
        }

        if ((!preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/", ObjectSerializer::toString($private_ip_address)))) {
            throw new \InvalidArgumentException("invalid value for \$private_ip_address when calling AwsVmResources., must conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.");
        }

        $this->container['private_ip_address'] = $private_ip_address;

        return $this;
    }

    /**
     * Gets vpc_id
     *
     * @return string|null
     */
    public function getVpcId()
    {
        return $this->container['vpc_id'];
    }

    /**
     * Sets vpc_id
     *
     * @param string|null $vpc_id The VPC AWS ID, if running in VPC.
     *
     * @return self
     */
    public function setVpcId($vpc_id)
    {
        if (is_null($vpc_id)) {
            throw new \InvalidArgumentException('non-nullable vpc_id cannot be null');
        }

        if ((!preg_match("/^vpc-[a-f0-9]{1,17}$/", ObjectSerializer::toString($vpc_id)))) {
            throw new \InvalidArgumentException("invalid value for \$vpc_id when calling AwsVmResources., must conform to the pattern /^vpc-[a-f0-9]{1,17}$/.");
        }

        $this->container['vpc_id'] = $vpc_id;

        return $this;
    }

    /**
     * Gets tag_list
     *
     * @return \OpenAPI\Client\Model\AwsTagListInner[]|null
     */
    public function getTagList()
    {
        return $this->container['tag_list'];
    }

    /**
     * Sets tag_list
     *
     * @param \OpenAPI\Client\Model\AwsTagListInner[]|null $tag_list The AWS Tags associated with any AWS resource
     *
     * @return self
     */
    public function setTagList($tag_list)
    {
        if (is_null($tag_list)) {
            throw new \InvalidArgumentException('non-nullable tag_list cannot be null');
        }
        $this->container['tag_list'] = $tag_list;

        return $this;
    }

    /**
     * Gets account_uuid
     *
     * @return string|null
     */
    public function getAccountUuid()
    {
        return $this->container['account_uuid'];
    }

    /**
     * Sets account_uuid
     *
     * @param string|null $account_uuid The AWS account to which the instance belongs.
     *
     * @return self
     */
    public function setAccountUuid($account_uuid)
    {
        if (is_null($account_uuid)) {
            throw new \InvalidArgumentException('non-nullable account_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($account_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$account_uuid when calling AwsVmResources., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['account_uuid'] = $account_uuid;

        return $this;
    }

    /**
     * Gets associate_public_ip_address
     *
     * @return bool|null
     */
    public function getAssociatePublicIpAddress()
    {
        return $this->container['associate_public_ip_address'];
    }

    /**
     * Sets associate_public_ip_address
     *
     * @param bool|null $associate_public_ip_address Indicates whether the network interface receives a public IP address.Can associate a public IP address with a network interface only if it has a device index of eth0 and if it is a new network interface (not an existing one).
     *
     * @return self
     */
    public function setAssociatePublicIpAddress($associate_public_ip_address)
    {
        if (is_null($associate_public_ip_address)) {
            throw new \InvalidArgumentException('non-nullable associate_public_ip_address cannot be null');
        }
        $this->container['associate_public_ip_address'] = $associate_public_ip_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


