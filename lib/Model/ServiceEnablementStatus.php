<?php
/**
 * ServiceEnablementStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ServiceEnablementStatus Class Doc Comment
 *
 * @category Class
 * @description The status of the service - whether it is disabled by default, if an  enablement is in progress, what is the current status.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServiceEnablementStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'service_enablement_status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'task_uuid' => 'string',
        'service_capabilities' => 'array<string,\OpenAPI\Client\Model\ServiceCapability>',
        'service_enablement_timestamp' => '\DateTime',
        'service_enablement_status' => 'string',
        'is_trial_period_expired' => 'bool',
        'service_running_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'task_uuid' => 'UUID',
        'service_capabilities' => null,
        'service_enablement_timestamp' => 'date-time',
        'service_enablement_status' => null,
        'is_trial_period_expired' => null,
        'service_running_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'task_uuid' => false,
        'service_capabilities' => false,
        'service_enablement_timestamp' => false,
        'service_enablement_status' => false,
        'is_trial_period_expired' => false,
        'service_running_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'task_uuid' => 'task_uuid',
        'service_capabilities' => 'service_capabilities',
        'service_enablement_timestamp' => 'service_enablement_timestamp',
        'service_enablement_status' => 'service_enablement_status',
        'is_trial_period_expired' => 'is_trial_period_expired',
        'service_running_status' => 'service_running_status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'task_uuid' => 'setTaskUuid',
        'service_capabilities' => 'setServiceCapabilities',
        'service_enablement_timestamp' => 'setServiceEnablementTimestamp',
        'service_enablement_status' => 'setServiceEnablementStatus',
        'is_trial_period_expired' => 'setIsTrialPeriodExpired',
        'service_running_status' => 'setServiceRunningStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'task_uuid' => 'getTaskUuid',
        'service_capabilities' => 'getServiceCapabilities',
        'service_enablement_timestamp' => 'getServiceEnablementTimestamp',
        'service_enablement_status' => 'getServiceEnablementStatus',
        'is_trial_period_expired' => 'getIsTrialPeriodExpired',
        'service_running_status' => 'getServiceRunningStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('task_uuid', $data ?? [], null);
        $this->setIfExists('service_capabilities', $data ?? [], null);
        $this->setIfExists('service_enablement_timestamp', $data ?? [], null);
        $this->setIfExists('service_enablement_status', $data ?? [], null);
        $this->setIfExists('is_trial_period_expired', $data ?? [], null);
        $this->setIfExists('service_running_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['task_uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['task_uuid'])) {
            $invalidProperties[] = "invalid value for 'task_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets task_uuid
     *
     * @return string|null
     */
    public function getTaskUuid()
    {
        return $this->container['task_uuid'];
    }

    /**
     * Sets task_uuid
     *
     * @param string|null $task_uuid UUID of the task created for handling the request.
     *
     * @return self
     */
    public function setTaskUuid($task_uuid)
    {
        if (is_null($task_uuid)) {
            throw new \InvalidArgumentException('non-nullable task_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($task_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$task_uuid when calling ServiceEnablementStatus., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['task_uuid'] = $task_uuid;

        return $this;
    }

    /**
     * Gets service_capabilities
     *
     * @return array<string,\OpenAPI\Client\Model\ServiceCapability>|null
     */
    public function getServiceCapabilities()
    {
        return $this->container['service_capabilities'];
    }

    /**
     * Sets service_capabilities
     *
     * @param array<string,\OpenAPI\Client\Model\ServiceCapability>|null $service_capabilities Capabilities of this service. For example if the service can be enabled/disabled.
     *
     * @return self
     */
    public function setServiceCapabilities($service_capabilities)
    {
        if (is_null($service_capabilities)) {
            throw new \InvalidArgumentException('non-nullable service_capabilities cannot be null');
        }
        $this->container['service_capabilities'] = $service_capabilities;

        return $this;
    }

    /**
     * Gets service_enablement_timestamp
     *
     * @return \DateTime|null
     */
    public function getServiceEnablementTimestamp()
    {
        return $this->container['service_enablement_timestamp'];
    }

    /**
     * Sets service_enablement_timestamp
     *
     * @param \DateTime|null $service_enablement_timestamp Date and time at which the service was enabled.  Currently this is used only for Microsegmentation.
     *
     * @return self
     */
    public function setServiceEnablementTimestamp($service_enablement_timestamp)
    {
        if (is_null($service_enablement_timestamp)) {
            throw new \InvalidArgumentException('non-nullable service_enablement_timestamp cannot be null');
        }
        $this->container['service_enablement_timestamp'] = $service_enablement_timestamp;

        return $this;
    }

    /**
     * Gets service_enablement_status
     *
     * @return string|null
     */
    public function getServiceEnablementStatus()
    {
        return $this->container['service_enablement_status'];
    }

    /**
     * Sets service_enablement_status
     *
     * @param string|null $service_enablement_status service_enablement_status
     *
     * @return self
     */
    public function setServiceEnablementStatus($service_enablement_status)
    {
        if (is_null($service_enablement_status)) {
            throw new \InvalidArgumentException('non-nullable service_enablement_status cannot be null');
        }
        $this->container['service_enablement_status'] = $service_enablement_status;

        return $this;
    }

    /**
     * Gets is_trial_period_expired
     *
     * @return bool|null
     */
    public function getIsTrialPeriodExpired()
    {
        return $this->container['is_trial_period_expired'];
    }

    /**
     * Sets is_trial_period_expired
     *
     * @param bool|null $is_trial_period_expired Flag indicating if the service trial period has expired. Currently this is used only for Microsegmentation.
     *
     * @return self
     */
    public function setIsTrialPeriodExpired($is_trial_period_expired)
    {
        if (is_null($is_trial_period_expired)) {
            throw new \InvalidArgumentException('non-nullable is_trial_period_expired cannot be null');
        }
        $this->container['is_trial_period_expired'] = $is_trial_period_expired;

        return $this;
    }

    /**
     * Gets service_running_status
     *
     * @return string|null
     */
    public function getServiceRunningStatus()
    {
        return $this->container['service_running_status'];
    }

    /**
     * Sets service_running_status
     *
     * @param string|null $service_running_status service_running_status
     *
     * @return self
     */
    public function setServiceRunningStatus($service_running_status)
    {
        if (is_null($service_running_status)) {
            throw new \InvalidArgumentException('non-nullable service_running_status cannot be null');
        }
        $this->container['service_running_status'] = $service_running_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


