<?php
/**
 * IpsecConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IpsecConfig Class Doc Comment
 *
 * @category Class
 * @description IPSEC related configuration spec for the VPN connections.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IpsecConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ipsec_config';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'remote_vti_ip' => 'string',
        'remote_authentication_id' => 'string',
        'local_vti_ip' => 'string',
        'ike_lifetime_secs' => 'int',
        'esp_pfs_dh_group_number' => 'int',
        'local_authentication_id' => 'string',
        'ipsec_lifetime_secs' => 'int',
        'vti_ip_prefix_length' => 'int',
        'pre_shared_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'remote_vti_ip' => null,
        'remote_authentication_id' => null,
        'local_vti_ip' => null,
        'ike_lifetime_secs' => 'uint64',
        'esp_pfs_dh_group_number' => 'uint64',
        'local_authentication_id' => null,
        'ipsec_lifetime_secs' => 'uint64',
        'vti_ip_prefix_length' => 'uint16',
        'pre_shared_key' => 'password'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'remote_vti_ip' => false,
        'remote_authentication_id' => false,
        'local_vti_ip' => false,
        'ike_lifetime_secs' => false,
        'esp_pfs_dh_group_number' => false,
        'local_authentication_id' => false,
        'ipsec_lifetime_secs' => false,
        'vti_ip_prefix_length' => false,
        'pre_shared_key' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'remote_vti_ip' => 'remote_vti_ip',
        'remote_authentication_id' => 'remote_authentication_id',
        'local_vti_ip' => 'local_vti_ip',
        'ike_lifetime_secs' => 'ike_lifetime_secs',
        'esp_pfs_dh_group_number' => 'esp_pfs_dh_group_number',
        'local_authentication_id' => 'local_authentication_id',
        'ipsec_lifetime_secs' => 'ipsec_lifetime_secs',
        'vti_ip_prefix_length' => 'vti_ip_prefix_length',
        'pre_shared_key' => 'pre_shared_key'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'remote_vti_ip' => 'setRemoteVtiIp',
        'remote_authentication_id' => 'setRemoteAuthenticationId',
        'local_vti_ip' => 'setLocalVtiIp',
        'ike_lifetime_secs' => 'setIkeLifetimeSecs',
        'esp_pfs_dh_group_number' => 'setEspPfsDhGroupNumber',
        'local_authentication_id' => 'setLocalAuthenticationId',
        'ipsec_lifetime_secs' => 'setIpsecLifetimeSecs',
        'vti_ip_prefix_length' => 'setVtiIpPrefixLength',
        'pre_shared_key' => 'setPreSharedKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'remote_vti_ip' => 'getRemoteVtiIp',
        'remote_authentication_id' => 'getRemoteAuthenticationId',
        'local_vti_ip' => 'getLocalVtiIp',
        'ike_lifetime_secs' => 'getIkeLifetimeSecs',
        'esp_pfs_dh_group_number' => 'getEspPfsDhGroupNumber',
        'local_authentication_id' => 'getLocalAuthenticationId',
        'ipsec_lifetime_secs' => 'getIpsecLifetimeSecs',
        'vti_ip_prefix_length' => 'getVtiIpPrefixLength',
        'pre_shared_key' => 'getPreSharedKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('remote_vti_ip', $data ?? [], null);
        $this->setIfExists('remote_authentication_id', $data ?? [], null);
        $this->setIfExists('local_vti_ip', $data ?? [], null);
        $this->setIfExists('ike_lifetime_secs', $data ?? [], null);
        $this->setIfExists('esp_pfs_dh_group_number', $data ?? [], null);
        $this->setIfExists('local_authentication_id', $data ?? [], null);
        $this->setIfExists('ipsec_lifetime_secs', $data ?? [], null);
        $this->setIfExists('vti_ip_prefix_length', $data ?? [], null);
        $this->setIfExists('pre_shared_key', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['remote_vti_ip']) && !preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/", $this->container['remote_vti_ip'])) {
            $invalidProperties[] = "invalid value for 'remote_vti_ip', must be conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.";
        }

        if (!is_null($this->container['local_vti_ip']) && !preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/", $this->container['local_vti_ip'])) {
            $invalidProperties[] = "invalid value for 'local_vti_ip', must be conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.";
        }

        if (!is_null($this->container['vti_ip_prefix_length']) && ($this->container['vti_ip_prefix_length'] > 32)) {
            $invalidProperties[] = "invalid value for 'vti_ip_prefix_length', must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['vti_ip_prefix_length']) && ($this->container['vti_ip_prefix_length'] < 0)) {
            $invalidProperties[] = "invalid value for 'vti_ip_prefix_length', must be bigger than or equal to 0.";
        }

        if ($this->container['pre_shared_key'] === null) {
            $invalidProperties[] = "'pre_shared_key' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets remote_vti_ip
     *
     * @return string|null
     */
    public function getRemoteVtiIp()
    {
        return $this->container['remote_vti_ip'];
    }

    /**
     * Sets remote_vti_ip
     *
     * @param string|null $remote_vti_ip Virtual tunnel interface IP of the remote VPN gateway.
     *
     * @return self
     */
    public function setRemoteVtiIp($remote_vti_ip)
    {
        if (is_null($remote_vti_ip)) {
            throw new \InvalidArgumentException('non-nullable remote_vti_ip cannot be null');
        }

        if ((!preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/", ObjectSerializer::toString($remote_vti_ip)))) {
            throw new \InvalidArgumentException("invalid value for \$remote_vti_ip when calling IpsecConfig., must conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.");
        }

        $this->container['remote_vti_ip'] = $remote_vti_ip;

        return $this;
    }

    /**
     * Gets remote_authentication_id
     *
     * @return string|null
     */
    public function getRemoteAuthenticationId()
    {
        return $this->container['remote_authentication_id'];
    }

    /**
     * Sets remote_authentication_id
     *
     * @param string|null $remote_authentication_id IKE Authentication ID of the remote peer.
     *
     * @return self
     */
    public function setRemoteAuthenticationId($remote_authentication_id)
    {
        if (is_null($remote_authentication_id)) {
            throw new \InvalidArgumentException('non-nullable remote_authentication_id cannot be null');
        }
        $this->container['remote_authentication_id'] = $remote_authentication_id;

        return $this;
    }

    /**
     * Gets local_vti_ip
     *
     * @return string|null
     */
    public function getLocalVtiIp()
    {
        return $this->container['local_vti_ip'];
    }

    /**
     * Sets local_vti_ip
     *
     * @param string|null $local_vti_ip Virtual tunnel interface IP of the local VPN gateway.
     *
     * @return self
     */
    public function setLocalVtiIp($local_vti_ip)
    {
        if (is_null($local_vti_ip)) {
            throw new \InvalidArgumentException('non-nullable local_vti_ip cannot be null');
        }

        if ((!preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/", ObjectSerializer::toString($local_vti_ip)))) {
            throw new \InvalidArgumentException("invalid value for \$local_vti_ip when calling IpsecConfig., must conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.");
        }

        $this->container['local_vti_ip'] = $local_vti_ip;

        return $this;
    }

    /**
     * Gets ike_lifetime_secs
     *
     * @return int|null
     */
    public function getIkeLifetimeSecs()
    {
        return $this->container['ike_lifetime_secs'];
    }

    /**
     * Sets ike_lifetime_secs
     *
     * @param int|null $ike_lifetime_secs IKE lifetime (in seconds)
     *
     * @return self
     */
    public function setIkeLifetimeSecs($ike_lifetime_secs)
    {
        if (is_null($ike_lifetime_secs)) {
            throw new \InvalidArgumentException('non-nullable ike_lifetime_secs cannot be null');
        }
        $this->container['ike_lifetime_secs'] = $ike_lifetime_secs;

        return $this;
    }

    /**
     * Gets esp_pfs_dh_group_number
     *
     * @return int|null
     */
    public function getEspPfsDhGroupNumber()
    {
        return $this->container['esp_pfs_dh_group_number'];
    }

    /**
     * Sets esp_pfs_dh_group_number
     *
     * @param int|null $esp_pfs_dh_group_number Diffie-Hellman group to be used for Perfect Forward Secrecy (PFS). Supported DH groups are 14, 19 and 20.
     *
     * @return self
     */
    public function setEspPfsDhGroupNumber($esp_pfs_dh_group_number)
    {
        if (is_null($esp_pfs_dh_group_number)) {
            throw new \InvalidArgumentException('non-nullable esp_pfs_dh_group_number cannot be null');
        }
        $this->container['esp_pfs_dh_group_number'] = $esp_pfs_dh_group_number;

        return $this;
    }

    /**
     * Gets local_authentication_id
     *
     * @return string|null
     */
    public function getLocalAuthenticationId()
    {
        return $this->container['local_authentication_id'];
    }

    /**
     * Sets local_authentication_id
     *
     * @param string|null $local_authentication_id Local IKE authentication ID used for this connection.
     *
     * @return self
     */
    public function setLocalAuthenticationId($local_authentication_id)
    {
        if (is_null($local_authentication_id)) {
            throw new \InvalidArgumentException('non-nullable local_authentication_id cannot be null');
        }
        $this->container['local_authentication_id'] = $local_authentication_id;

        return $this;
    }

    /**
     * Gets ipsec_lifetime_secs
     *
     * @return int|null
     */
    public function getIpsecLifetimeSecs()
    {
        return $this->container['ipsec_lifetime_secs'];
    }

    /**
     * Sets ipsec_lifetime_secs
     *
     * @param int|null $ipsec_lifetime_secs IPSec lifetime (in seconds)
     *
     * @return self
     */
    public function setIpsecLifetimeSecs($ipsec_lifetime_secs)
    {
        if (is_null($ipsec_lifetime_secs)) {
            throw new \InvalidArgumentException('non-nullable ipsec_lifetime_secs cannot be null');
        }
        $this->container['ipsec_lifetime_secs'] = $ipsec_lifetime_secs;

        return $this;
    }

    /**
     * Gets vti_ip_prefix_length
     *
     * @return int|null
     */
    public function getVtiIpPrefixLength()
    {
        return $this->container['vti_ip_prefix_length'];
    }

    /**
     * Sets vti_ip_prefix_length
     *
     * @param int|null $vti_ip_prefix_length IP prefix length of the virtual tunnel interface.
     *
     * @return self
     */
    public function setVtiIpPrefixLength($vti_ip_prefix_length)
    {
        if (is_null($vti_ip_prefix_length)) {
            throw new \InvalidArgumentException('non-nullable vti_ip_prefix_length cannot be null');
        }

        if (($vti_ip_prefix_length > 32)) {
            throw new \InvalidArgumentException('invalid value for $vti_ip_prefix_length when calling IpsecConfig., must be smaller than or equal to 32.');
        }
        if (($vti_ip_prefix_length < 0)) {
            throw new \InvalidArgumentException('invalid value for $vti_ip_prefix_length when calling IpsecConfig., must be bigger than or equal to 0.');
        }

        $this->container['vti_ip_prefix_length'] = $vti_ip_prefix_length;

        return $this;
    }

    /**
     * Gets pre_shared_key
     *
     * @return string
     */
    public function getPreSharedKey()
    {
        return $this->container['pre_shared_key'];
    }

    /**
     * Sets pre_shared_key
     *
     * @param string $pre_shared_key Shared secret for authentication between gateway peers.
     *
     * @return self
     */
    public function setPreSharedKey($pre_shared_key)
    {
        if (is_null($pre_shared_key)) {
            throw new \InvalidArgumentException('non-nullable pre_shared_key cannot be null');
        }
        $this->container['pre_shared_key'] = $pre_shared_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


