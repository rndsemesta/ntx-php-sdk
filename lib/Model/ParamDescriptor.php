<?php
/**
 * ParamDescriptor
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ParamDescriptor Class Doc Comment
 *
 * @category Class
 * @description The metadata describes what a parameter is.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ParamDescriptor implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'param_descriptor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'default_value' => '\OpenAPI\Client\Model\ActionServiceParamValue',
        'entity_types' => 'string[]',
        'display_name' => 'string',
        'name' => 'string',
        'is_parameterized' => 'bool',
        'choice_list' => '\OpenAPI\Client\Model\ParamDescriptorChoiceListInner[]',
        'is_array' => 'bool',
        'entity_type' => 'string',
        'value_info' => '\OpenAPI\Client\Model\ValueInfo',
        'element_data_type' => 'string',
        'is_deprecated' => 'bool',
        'is_secret' => 'bool',
        'parent_params' => '\OpenAPI\Client\Model\ParamDescriptorParentParamsInner[]',
        'is_hidden' => 'bool',
        'is_required' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'default_value' => null,
        'entity_types' => null,
        'display_name' => null,
        'name' => null,
        'is_parameterized' => null,
        'choice_list' => null,
        'is_array' => null,
        'entity_type' => null,
        'value_info' => null,
        'element_data_type' => null,
        'is_deprecated' => null,
        'is_secret' => null,
        'parent_params' => null,
        'is_hidden' => null,
        'is_required' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'default_value' => false,
        'entity_types' => false,
        'display_name' => false,
        'name' => false,
        'is_parameterized' => false,
        'choice_list' => false,
        'is_array' => false,
        'entity_type' => false,
        'value_info' => false,
        'element_data_type' => false,
        'is_deprecated' => false,
        'is_secret' => false,
        'parent_params' => false,
        'is_hidden' => false,
        'is_required' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_value' => 'default_value',
        'entity_types' => 'entity_types',
        'display_name' => 'display_name',
        'name' => 'name',
        'is_parameterized' => 'is_parameterized',
        'choice_list' => 'choice_list',
        'is_array' => 'is_array',
        'entity_type' => 'entity_type',
        'value_info' => 'value_info',
        'element_data_type' => 'element_data_type',
        'is_deprecated' => 'is_deprecated',
        'is_secret' => 'is_secret',
        'parent_params' => 'parent_params',
        'is_hidden' => 'is_hidden',
        'is_required' => 'is_required'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_value' => 'setDefaultValue',
        'entity_types' => 'setEntityTypes',
        'display_name' => 'setDisplayName',
        'name' => 'setName',
        'is_parameterized' => 'setIsParameterized',
        'choice_list' => 'setChoiceList',
        'is_array' => 'setIsArray',
        'entity_type' => 'setEntityType',
        'value_info' => 'setValueInfo',
        'element_data_type' => 'setElementDataType',
        'is_deprecated' => 'setIsDeprecated',
        'is_secret' => 'setIsSecret',
        'parent_params' => 'setParentParams',
        'is_hidden' => 'setIsHidden',
        'is_required' => 'setIsRequired'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_value' => 'getDefaultValue',
        'entity_types' => 'getEntityTypes',
        'display_name' => 'getDisplayName',
        'name' => 'getName',
        'is_parameterized' => 'getIsParameterized',
        'choice_list' => 'getChoiceList',
        'is_array' => 'getIsArray',
        'entity_type' => 'getEntityType',
        'value_info' => 'getValueInfo',
        'element_data_type' => 'getElementDataType',
        'is_deprecated' => 'getIsDeprecated',
        'is_secret' => 'getIsSecret',
        'parent_params' => 'getParentParams',
        'is_hidden' => 'getIsHidden',
        'is_required' => 'getIsRequired'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('default_value', $data ?? [], null);
        $this->setIfExists('entity_types', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('is_parameterized', $data ?? [], null);
        $this->setIfExists('choice_list', $data ?? [], null);
        $this->setIfExists('is_array', $data ?? [], null);
        $this->setIfExists('entity_type', $data ?? [], null);
        $this->setIfExists('value_info', $data ?? [], null);
        $this->setIfExists('element_data_type', $data ?? [], null);
        $this->setIfExists('is_deprecated', $data ?? [], null);
        $this->setIfExists('is_secret', $data ?? [], null);
        $this->setIfExists('parent_params', $data ?? [], null);
        $this->setIfExists('is_hidden', $data ?? [], null);
        $this->setIfExists('is_required', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ((mb_strlen($this->container['display_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be smaller than or equal to 64.";
        }

        if (!preg_match("/^[^&<>'\/\"]*$/", $this->container['display_name'])) {
            $invalidProperties[] = "invalid value for 'display_name', must be conform to the pattern /^[^&<>'\/\"]*$/.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 64)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 64.";
        }

        if (!preg_match("/^[^&<>'\/\"]*$/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /^[^&<>'\/\"]*$/.";
        }

        if (!is_null($this->container['entity_type']) && (mb_strlen($this->container['entity_type']) > 64)) {
            $invalidProperties[] = "invalid value for 'entity_type', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['entity_type']) && !preg_match("/^[^&<>'\/\"]*$/", $this->container['entity_type'])) {
            $invalidProperties[] = "invalid value for 'entity_type', must be conform to the pattern /^[^&<>'\/\"]*$/.";
        }

        if ($this->container['element_data_type'] === null) {
            $invalidProperties[] = "'element_data_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_value
     *
     * @return \OpenAPI\Client\Model\ActionServiceParamValue|null
     */
    public function getDefaultValue()
    {
        return $this->container['default_value'];
    }

    /**
     * Sets default_value
     *
     * @param \OpenAPI\Client\Model\ActionServiceParamValue|null $default_value default_value
     *
     * @return self
     */
    public function setDefaultValue($default_value)
    {
        if (is_null($default_value)) {
            throw new \InvalidArgumentException('non-nullable default_value cannot be null');
        }
        $this->container['default_value'] = $default_value;

        return $this;
    }

    /**
     * Gets entity_types
     *
     * @return string[]|null
     */
    public function getEntityTypes()
    {
        return $this->container['entity_types'];
    }

    /**
     * Sets entity_types
     *
     * @param string[]|null $entity_types The possible entity types the param value be holding like vm, etc.
     *
     * @return self
     */
    public function setEntityTypes($entity_types)
    {
        if (is_null($entity_types)) {
            throw new \InvalidArgumentException('non-nullable entity_types cannot be null');
        }
        $this->container['entity_types'] = $entity_types;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name parameter display name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        if ((mb_strlen($display_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling ParamDescriptor., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[^&<>'\/\"]*$/", ObjectSerializer::toString($display_name)))) {
            throw new \InvalidArgumentException("invalid value for \$display_name when calling ParamDescriptor., must conform to the pattern /^[^&<>'\/\"]*$/.");
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name parameter name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ParamDescriptor., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[^&<>'\/\"]*$/", ObjectSerializer::toString($name)))) {
            throw new \InvalidArgumentException("invalid value for \$name when calling ParamDescriptor., must conform to the pattern /^[^&<>'\/\"]*$/.");
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets is_parameterized
     *
     * @return bool|null
     */
    public function getIsParameterized()
    {
        return $this->container['is_parameterized'];
    }

    /**
     * Sets is_parameterized
     *
     * @param bool|null $is_parameterized The field can take parameter or not.
     *
     * @return self
     */
    public function setIsParameterized($is_parameterized)
    {
        if (is_null($is_parameterized)) {
            throw new \InvalidArgumentException('non-nullable is_parameterized cannot be null');
        }
        $this->container['is_parameterized'] = $is_parameterized;

        return $this;
    }

    /**
     * Gets choice_list
     *
     * @return \OpenAPI\Client\Model\ParamDescriptorChoiceListInner[]|null
     */
    public function getChoiceList()
    {
        return $this->container['choice_list'];
    }

    /**
     * Sets choice_list
     *
     * @param \OpenAPI\Client\Model\ParamDescriptorChoiceListInner[]|null $choice_list The parameter can only be one of the choices in this ordered list. We do not support choice list of elements with complex type.
     *
     * @return self
     */
    public function setChoiceList($choice_list)
    {
        if (is_null($choice_list)) {
            throw new \InvalidArgumentException('non-nullable choice_list cannot be null');
        }
        $this->container['choice_list'] = $choice_list;

        return $this;
    }

    /**
     * Gets is_array
     *
     * @return bool|null
     */
    public function getIsArray()
    {
        return $this->container['is_array'];
    }

    /**
     * Sets is_array
     *
     * @param bool|null $is_array Is this parameter a list or a scalar value
     *
     * @return self
     */
    public function setIsArray($is_array)
    {
        if (is_null($is_array)) {
            throw new \InvalidArgumentException('non-nullable is_array cannot be null');
        }
        $this->container['is_array'] = $is_array;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return string|null
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string|null $entity_type Deprecated. Please use entity_types instead. The entity type the param value be holding like vm, etc.
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        if (is_null($entity_type)) {
            throw new \InvalidArgumentException('non-nullable entity_type cannot be null');
        }
        if ((mb_strlen($entity_type) > 64)) {
            throw new \InvalidArgumentException('invalid length for $entity_type when calling ParamDescriptor., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[^&<>'\/\"]*$/", ObjectSerializer::toString($entity_type)))) {
            throw new \InvalidArgumentException("invalid value for \$entity_type when calling ParamDescriptor., must conform to the pattern /^[^&<>'\/\"]*$/.");
        }

        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets value_info
     *
     * @return \OpenAPI\Client\Model\ValueInfo|null
     */
    public function getValueInfo()
    {
        return $this->container['value_info'];
    }

    /**
     * Sets value_info
     *
     * @param \OpenAPI\Client\Model\ValueInfo|null $value_info value_info
     *
     * @return self
     */
    public function setValueInfo($value_info)
    {
        if (is_null($value_info)) {
            throw new \InvalidArgumentException('non-nullable value_info cannot be null');
        }
        $this->container['value_info'] = $value_info;

        return $this;
    }

    /**
     * Gets element_data_type
     *
     * @return string
     */
    public function getElementDataType()
    {
        return $this->container['element_data_type'];
    }

    /**
     * Sets element_data_type
     *
     * @param string $element_data_type The parameter's data type.  If the parameter is a list, it is the element data type.
     *
     * @return self
     */
    public function setElementDataType($element_data_type)
    {
        if (is_null($element_data_type)) {
            throw new \InvalidArgumentException('non-nullable element_data_type cannot be null');
        }
        $this->container['element_data_type'] = $element_data_type;

        return $this;
    }

    /**
     * Gets is_deprecated
     *
     * @return bool|null
     */
    public function getIsDeprecated()
    {
        return $this->container['is_deprecated'];
    }

    /**
     * Sets is_deprecated
     *
     * @param bool|null $is_deprecated Flag to indicate if this parameter is deprecated.
     *
     * @return self
     */
    public function setIsDeprecated($is_deprecated)
    {
        if (is_null($is_deprecated)) {
            throw new \InvalidArgumentException('non-nullable is_deprecated cannot be null');
        }
        $this->container['is_deprecated'] = $is_deprecated;

        return $this;
    }

    /**
     * Gets is_secret
     *
     * @return bool|null
     */
    public function getIsSecret()
    {
        return $this->container['is_secret'];
    }

    /**
     * Sets is_secret
     *
     * @param bool|null $is_secret Is this parameter a secret like password, security token?
     *
     * @return self
     */
    public function setIsSecret($is_secret)
    {
        if (is_null($is_secret)) {
            throw new \InvalidArgumentException('non-nullable is_secret cannot be null');
        }
        $this->container['is_secret'] = $is_secret;

        return $this;
    }

    /**
     * Gets parent_params
     *
     * @return \OpenAPI\Client\Model\ParamDescriptorParentParamsInner[]|null
     */
    public function getParentParams()
    {
        return $this->container['parent_params'];
    }

    /**
     * Sets parent_params
     *
     * @param \OpenAPI\Client\Model\ParamDescriptorParentParamsInner[]|null $parent_params A list of parent params with their expected values. Any one of these params must have the provided value in order for this field to be valid.
     *
     * @return self
     */
    public function setParentParams($parent_params)
    {
        if (is_null($parent_params)) {
            throw new \InvalidArgumentException('non-nullable parent_params cannot be null');
        }
        $this->container['parent_params'] = $parent_params;

        return $this;
    }

    /**
     * Gets is_hidden
     *
     * @return bool|null
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     *
     * @param bool|null $is_hidden The field is hidden from other actions or triggers.  For example, not showing in the UI.
     *
     * @return self
     */
    public function setIsHidden($is_hidden)
    {
        if (is_null($is_hidden)) {
            throw new \InvalidArgumentException('non-nullable is_hidden cannot be null');
        }
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets is_required
     *
     * @return bool|null
     */
    public function getIsRequired()
    {
        return $this->container['is_required'];
    }

    /**
     * Sets is_required
     *
     * @param bool|null $is_required Is this parameter optional.
     *
     * @return self
     */
    public function setIsRequired($is_required)
    {
        if (is_null($is_required)) {
            throw new \InvalidArgumentException('non-nullable is_required cannot be null');
        }
        $this->container['is_required'] = $is_required;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


