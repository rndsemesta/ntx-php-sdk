<?php
/**
 * AwsInstanceDiskOutputStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AwsInstanceDiskOutputStatus Class Doc Comment
 *
 * @category Class
 * @description AWS Instance Disk Status
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AwsInstanceDiskOutputStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'aws_instance_disk_output_status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'size_gb' => 'int',
        'availability_zone' => 'string',
        'volume_type' => 'string',
        'device_name' => 'string',
        'iops' => 'int',
        'snapshot_id' => 'string',
        'id' => 'string',
        'tag_list' => '\OpenAPI\Client\Model\AwsTagListInner[]',
        'delete_on_termination' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'size_gb' => 'int64',
        'availability_zone' => null,
        'volume_type' => null,
        'device_name' => null,
        'iops' => 'int64',
        'snapshot_id' => null,
        'id' => null,
        'tag_list' => null,
        'delete_on_termination' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'status' => false,
        'size_gb' => false,
        'availability_zone' => false,
        'volume_type' => false,
        'device_name' => false,
        'iops' => false,
        'snapshot_id' => false,
        'id' => false,
        'tag_list' => false,
        'delete_on_termination' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'size_gb' => 'size_gb',
        'availability_zone' => 'availability_zone',
        'volume_type' => 'volume_type',
        'device_name' => 'device_name',
        'iops' => 'iops',
        'snapshot_id' => 'snapshot_id',
        'id' => 'id',
        'tag_list' => 'tag_list',
        'delete_on_termination' => 'delete_on_termination'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'size_gb' => 'setSizeGb',
        'availability_zone' => 'setAvailabilityZone',
        'volume_type' => 'setVolumeType',
        'device_name' => 'setDeviceName',
        'iops' => 'setIops',
        'snapshot_id' => 'setSnapshotId',
        'id' => 'setId',
        'tag_list' => 'setTagList',
        'delete_on_termination' => 'setDeleteOnTermination'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'size_gb' => 'getSizeGb',
        'availability_zone' => 'getAvailabilityZone',
        'volume_type' => 'getVolumeType',
        'device_name' => 'getDeviceName',
        'iops' => 'getIops',
        'snapshot_id' => 'getSnapshotId',
        'id' => 'getId',
        'tag_list' => 'getTagList',
        'delete_on_termination' => 'getDeleteOnTermination'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('size_gb', $data ?? [], null);
        $this->setIfExists('availability_zone', $data ?? [], null);
        $this->setIfExists('volume_type', $data ?? [], null);
        $this->setIfExists('device_name', $data ?? [], null);
        $this->setIfExists('iops', $data ?? [], null);
        $this->setIfExists('snapshot_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('tag_list', $data ?? [], null);
        $this->setIfExists('delete_on_termination', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the Volume.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets size_gb
     *
     * @return int|null
     */
    public function getSizeGb()
    {
        return $this->container['size_gb'];
    }

    /**
     * Sets size_gb
     *
     * @param int|null $size_gb Size of volumes in GB.
     *
     * @return self
     */
    public function setSizeGb($size_gb)
    {
        if (is_null($size_gb)) {
            throw new \InvalidArgumentException('non-nullable size_gb cannot be null');
        }
        $this->container['size_gb'] = $size_gb;

        return $this;
    }

    /**
     * Gets availability_zone
     *
     * @return string|null
     */
    public function getAvailabilityZone()
    {
        return $this->container['availability_zone'];
    }

    /**
     * Sets availability_zone
     *
     * @param string|null $availability_zone The zone on which the EBS volume is created
     *
     * @return self
     */
    public function setAvailabilityZone($availability_zone)
    {
        if (is_null($availability_zone)) {
            throw new \InvalidArgumentException('non-nullable availability_zone cannot be null');
        }
        $this->container['availability_zone'] = $availability_zone;

        return $this;
    }

    /**
     * Gets volume_type
     *
     * @return string|null
     */
    public function getVolumeType()
    {
        return $this->container['volume_type'];
    }

    /**
     * Sets volume_type
     *
     * @param string|null $volume_type Type of the Volume.
     *
     * @return self
     */
    public function setVolumeType($volume_type)
    {
        if (is_null($volume_type)) {
            throw new \InvalidArgumentException('non-nullable volume_type cannot be null');
        }
        $this->container['volume_type'] = $volume_type;

        return $this;
    }

    /**
     * Gets device_name
     *
     * @return string|null
     */
    public function getDeviceName()
    {
        return $this->container['device_name'];
    }

    /**
     * Sets device_name
     *
     * @param string|null $device_name Device name e.g. /dev/sdb
     *
     * @return self
     */
    public function setDeviceName($device_name)
    {
        if (is_null($device_name)) {
            throw new \InvalidArgumentException('non-nullable device_name cannot be null');
        }
        $this->container['device_name'] = $device_name;

        return $this;
    }

    /**
     * Gets iops
     *
     * @return int|null
     */
    public function getIops()
    {
        return $this->container['iops'];
    }

    /**
     * Sets iops
     *
     * @param int|null $iops The requested number of I/O operations per second that the volume can support for provisioned IOPS (SSD) volumes (io1). Minimum = 100 IOPS and Maximum = 20000 IOPS.
     *
     * @return self
     */
    public function setIops($iops)
    {
        if (is_null($iops)) {
            throw new \InvalidArgumentException('non-nullable iops cannot be null');
        }
        $this->container['iops'] = $iops;

        return $this;
    }

    /**
     * Gets snapshot_id
     *
     * @return string|null
     */
    public function getSnapshotId()
    {
        return $this->container['snapshot_id'];
    }

    /**
     * Sets snapshot_id
     *
     * @param string|null $snapshot_id AWS snapshot ID.
     *
     * @return self
     */
    public function setSnapshotId($snapshot_id)
    {
        if (is_null($snapshot_id)) {
            throw new \InvalidArgumentException('non-nullable snapshot_id cannot be null');
        }
        $this->container['snapshot_id'] = $snapshot_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id AWS ID of the volume.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets tag_list
     *
     * @return \OpenAPI\Client\Model\AwsTagListInner[]|null
     */
    public function getTagList()
    {
        return $this->container['tag_list'];
    }

    /**
     * Sets tag_list
     *
     * @param \OpenAPI\Client\Model\AwsTagListInner[]|null $tag_list The AWS Tags associated with any AWS resource
     *
     * @return self
     */
    public function setTagList($tag_list)
    {
        if (is_null($tag_list)) {
            throw new \InvalidArgumentException('non-nullable tag_list cannot be null');
        }
        $this->container['tag_list'] = $tag_list;

        return $this;
    }

    /**
     * Gets delete_on_termination
     *
     * @return bool|null
     */
    public function getDeleteOnTermination()
    {
        return $this->container['delete_on_termination'];
    }

    /**
     * Sets delete_on_termination
     *
     * @param bool|null $delete_on_termination Status of delete on termination.
     *
     * @return self
     */
    public function setDeleteOnTermination($delete_on_termination)
    {
        if (is_null($delete_on_termination)) {
            throw new \InvalidArgumentException('non-nullable delete_on_termination cannot be null');
        }
        $this->container['delete_on_termination'] = $delete_on_termination;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


