<?php
/**
 * RecoveryPlanResourcesParameters
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RecoveryPlanResourcesParameters Class Doc Comment
 *
 * @category Class
 * @description Parameters for the Recovery Plan.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecoveryPlanResourcesParameters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'recovery_plan_resources_parameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'floating_ip_assignment_list' => '\OpenAPI\Client\Model\RecoveryPlanResourcesParametersFloatingIpAssignmentListInner[]',
        'witness_configuration_list' => '\OpenAPI\Client\Model\WitnessConfiguration[]',
        'network_mapping_list' => '\OpenAPI\Client\Model\RecoveryPlanResourcesParametersNetworkMappingListInner[]',
        'data_service_ip_mapping_list' => '\OpenAPI\Client\Model\RecoveryPlanResourcesParametersDataServiceIpMappingListInner[]',
        'availability_zone_list' => '\OpenAPI\Client\Model\AvailabilityZoneInformation[]',
        'primary_location_index' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'floating_ip_assignment_list' => null,
        'witness_configuration_list' => null,
        'network_mapping_list' => null,
        'data_service_ip_mapping_list' => null,
        'availability_zone_list' => null,
        'primary_location_index' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'floating_ip_assignment_list' => false,
        'witness_configuration_list' => false,
        'network_mapping_list' => false,
        'data_service_ip_mapping_list' => false,
        'availability_zone_list' => false,
        'primary_location_index' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'floating_ip_assignment_list' => 'floating_ip_assignment_list',
        'witness_configuration_list' => 'witness_configuration_list',
        'network_mapping_list' => 'network_mapping_list',
        'data_service_ip_mapping_list' => 'data_service_ip_mapping_list',
        'availability_zone_list' => 'availability_zone_list',
        'primary_location_index' => 'primary_location_index'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'floating_ip_assignment_list' => 'setFloatingIpAssignmentList',
        'witness_configuration_list' => 'setWitnessConfigurationList',
        'network_mapping_list' => 'setNetworkMappingList',
        'data_service_ip_mapping_list' => 'setDataServiceIpMappingList',
        'availability_zone_list' => 'setAvailabilityZoneList',
        'primary_location_index' => 'setPrimaryLocationIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'floating_ip_assignment_list' => 'getFloatingIpAssignmentList',
        'witness_configuration_list' => 'getWitnessConfigurationList',
        'network_mapping_list' => 'getNetworkMappingList',
        'data_service_ip_mapping_list' => 'getDataServiceIpMappingList',
        'availability_zone_list' => 'getAvailabilityZoneList',
        'primary_location_index' => 'getPrimaryLocationIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('floating_ip_assignment_list', $data ?? [], null);
        $this->setIfExists('witness_configuration_list', $data ?? [], null);
        $this->setIfExists('network_mapping_list', $data ?? [], null);
        $this->setIfExists('data_service_ip_mapping_list', $data ?? [], null);
        $this->setIfExists('availability_zone_list', $data ?? [], null);
        $this->setIfExists('primary_location_index', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['witness_configuration_list']) && (count($this->container['witness_configuration_list']) > 1)) {
            $invalidProperties[] = "invalid value for 'witness_configuration_list', number of items must be less than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets floating_ip_assignment_list
     *
     * @return \OpenAPI\Client\Model\RecoveryPlanResourcesParametersFloatingIpAssignmentListInner[]|null
     */
    public function getFloatingIpAssignmentList()
    {
        return $this->container['floating_ip_assignment_list'];
    }

    /**
     * Sets floating_ip_assignment_list
     *
     * @param \OpenAPI\Client\Model\RecoveryPlanResourcesParametersFloatingIpAssignmentListInner[]|null $floating_ip_assignment_list Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.
     *
     * @return self
     */
    public function setFloatingIpAssignmentList($floating_ip_assignment_list)
    {
        if (is_null($floating_ip_assignment_list)) {
            throw new \InvalidArgumentException('non-nullable floating_ip_assignment_list cannot be null');
        }
        $this->container['floating_ip_assignment_list'] = $floating_ip_assignment_list;

        return $this;
    }

    /**
     * Gets witness_configuration_list
     *
     * @return \OpenAPI\Client\Model\WitnessConfiguration[]|null
     */
    public function getWitnessConfigurationList()
    {
        return $this->container['witness_configuration_list'];
    }

    /**
     * Sets witness_configuration_list
     *
     * @param \OpenAPI\Client\Model\WitnessConfiguration[]|null $witness_configuration_list A list containing witness configuration.
     *
     * @return self
     */
    public function setWitnessConfigurationList($witness_configuration_list)
    {
        if (is_null($witness_configuration_list)) {
            throw new \InvalidArgumentException('non-nullable witness_configuration_list cannot be null');
        }

        if ((count($witness_configuration_list) > 1)) {
            throw new \InvalidArgumentException('invalid value for $witness_configuration_list when calling RecoveryPlanResourcesParameters., number of items must be less than or equal to 1.');
        }
        $this->container['witness_configuration_list'] = $witness_configuration_list;

        return $this;
    }

    /**
     * Gets network_mapping_list
     *
     * @return \OpenAPI\Client\Model\RecoveryPlanResourcesParametersNetworkMappingListInner[]|null
     */
    public function getNetworkMappingList()
    {
        return $this->container['network_mapping_list'];
    }

    /**
     * Sets network_mapping_list
     *
     * @param \OpenAPI\Client\Model\RecoveryPlanResourcesParametersNetworkMappingListInner[]|null $network_mapping_list Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones. Each entry of network mapping will have Availability Zone URL, recovery and test network information, static IP assignment for the VMs for the recovery and test networks. For example, Let RNx, TNx denote the recovery and test network information and RIPMx, TIPMx denote the static IP assignment for the VMs. As per below matrix, while performing failover action from Availability Zone AZ1 to AZ2, RN1 will be mapped to RN4 and static IP \"a.b.c.d\" of the VM with reference VMx will be mapped to \"i.j.k.l\". On performing test failover from AZ1 to AZ2, RN1 will be mapped to TN4 and static IP \"a.b.c.d\" of the VM with reference VMx will be mapped to \"I.J.K.L\". [[(AZ1 URL, RN1, TN1, [{VMx, \"a.b.c.d\"}, {VMy, \"e.f.g.h\"}],    [{VMx, \"A.B.C.D\"}, {VMy, \"E.F.G.H\"}]),   (AZ2 URL, RN4, TN4, [{VMx, \"i.j.k.l\"}, {VMy, \"m.n.p.q\"}],    [{VMx, \"I.J.K.L\"}, {VMy, \"M.N.P.Q\"}]),   (AZ3 URL, RN7, TN7)],  [(AZ1 URL, RN2, TN2), (AZ2 URL, RN5, TN5),   (AZ3 URL, RN8, TN8)],  [(AZ1 URL, RN3, TN3), (AZ2 URL, RN6, TN6)]] The order of the static IP assignment for the VMs should remain same across all the networks provided in a network mapping. It forms a matrix containing IP mapping for the VMs across the Availability Zones. If a VM has multiple static IP addresses, static IP mapping will happen on the array indices. For example, Let IPrxy denote an IP address in subnet RNz and IPtxy denote an IP address in the subnet TNz. Lets VMx has two static IP address and VMy, VMz has one static IP associated with a vNIC created in network RN1. The IP mapping for the VMs will be as below.     AZ1, RN1        AZ1, TN1        AZ2, RN3        AZ2, TN2 [(VMx, [IPr11]), (VMx, [IPt11]), (VMx, [IPr12]), (VMx,  [IPt12])] [(VMy, [IPr21]), (VMy, [IPt21]), (VMy, [IPr22]), (VMy,  [IPt22])] [(VMz, [IPr31]), (VMz, [IPt31]), (VMz, [IPr32]), (VMz,  [IPt32])] In case of recovery of VMs from one Prism Element to the other within the same Availability Zone, a list of cluster references where the network exists can be specified. The network mapping to be used for a vNIC is decided as follows - 1. If a VM that has a vNIC in a network N1 on cluster C1, then    the network mapping of N1 that has C1 in the cluster    references list will be used.  2. In case there is no network mapping for N1 with cluster C1,    the default mapping of N1 for the Availability Zone (in which    cluster is not specified), will be used if present.
     *
     * @return self
     */
    public function setNetworkMappingList($network_mapping_list)
    {
        if (is_null($network_mapping_list)) {
            throw new \InvalidArgumentException('non-nullable network_mapping_list cannot be null');
        }
        $this->container['network_mapping_list'] = $network_mapping_list;

        return $this;
    }

    /**
     * Gets data_service_ip_mapping_list
     *
     * @return \OpenAPI\Client\Model\RecoveryPlanResourcesParametersDataServiceIpMappingListInner[]|null
     */
    public function getDataServiceIpMappingList()
    {
        return $this->container['data_service_ip_mapping_list'];
    }

    /**
     * Sets data_service_ip_mapping_list
     *
     * @param \OpenAPI\Client\Model\RecoveryPlanResourcesParametersDataServiceIpMappingListInner[]|null $data_service_ip_mapping_list IP address mappings for attaching Volume Groups to VMs upon failover.
     *
     * @return self
     */
    public function setDataServiceIpMappingList($data_service_ip_mapping_list)
    {
        if (is_null($data_service_ip_mapping_list)) {
            throw new \InvalidArgumentException('non-nullable data_service_ip_mapping_list cannot be null');
        }
        $this->container['data_service_ip_mapping_list'] = $data_service_ip_mapping_list;

        return $this;
    }

    /**
     * Gets availability_zone_list
     *
     * @return \OpenAPI\Client\Model\AvailabilityZoneInformation[]|null
     */
    public function getAvailabilityZoneList()
    {
        return $this->container['availability_zone_list'];
    }

    /**
     * Sets availability_zone_list
     *
     * @param \OpenAPI\Client\Model\AvailabilityZoneInformation[]|null $availability_zone_list A list containing information about primary and secondary Availability zones.
     *
     * @return self
     */
    public function setAvailabilityZoneList($availability_zone_list)
    {
        if (is_null($availability_zone_list)) {
            throw new \InvalidArgumentException('non-nullable availability_zone_list cannot be null');
        }
        $this->container['availability_zone_list'] = $availability_zone_list;

        return $this;
    }

    /**
     * Gets primary_location_index
     *
     * @return int|null
     */
    public function getPrimaryLocationIndex()
    {
        return $this->container['primary_location_index'];
    }

    /**
     * Sets primary_location_index
     *
     * @param int|null $primary_location_index This field should be set to the index of the Availability Zone in the availability_zone_list which should be considered as a protected Availability Zone.
     *
     * @return self
     */
    public function setPrimaryLocationIndex($primary_location_index)
    {
        if (is_null($primary_location_index)) {
            throw new \InvalidArgumentException('non-nullable primary_location_index cannot be null');
        }
        $this->container['primary_location_index'] = $primary_location_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


