<?php
/**
 * GetInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetInfo Class Doc Comment
 *
 * @category Class
 * @description Indicates the storage configuration attributes being effective on the entity type specified. This state is resultant of storage attributes configured on the entity and storage policies associated with the entity.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inline_compression' => 'bool',
        'compliance_state' => 'string',
        'throttled_iops' => 'int',
        'active_storage_policy_reference_list' => '\OpenAPI\Client\Model\Reference[]',
        'compression_enabled' => 'bool',
        'encryption_enabled' => 'bool',
        'non_compliant_error_codes' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inline_compression' => null,
        'compliance_state' => null,
        'throttled_iops' => 'int32',
        'active_storage_policy_reference_list' => null,
        'compression_enabled' => null,
        'encryption_enabled' => null,
        'non_compliant_error_codes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'inline_compression' => false,
        'compliance_state' => false,
        'throttled_iops' => false,
        'active_storage_policy_reference_list' => false,
        'compression_enabled' => false,
        'encryption_enabled' => false,
        'non_compliant_error_codes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inline_compression' => 'inline_compression',
        'compliance_state' => 'compliance_state',
        'throttled_iops' => 'throttled_iops',
        'active_storage_policy_reference_list' => 'active_storage_policy_reference_list',
        'compression_enabled' => 'compression_enabled',
        'encryption_enabled' => 'encryption_enabled',
        'non_compliant_error_codes' => 'non_compliant_error_codes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inline_compression' => 'setInlineCompression',
        'compliance_state' => 'setComplianceState',
        'throttled_iops' => 'setThrottledIops',
        'active_storage_policy_reference_list' => 'setActiveStoragePolicyReferenceList',
        'compression_enabled' => 'setCompressionEnabled',
        'encryption_enabled' => 'setEncryptionEnabled',
        'non_compliant_error_codes' => 'setNonCompliantErrorCodes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inline_compression' => 'getInlineCompression',
        'compliance_state' => 'getComplianceState',
        'throttled_iops' => 'getThrottledIops',
        'active_storage_policy_reference_list' => 'getActiveStoragePolicyReferenceList',
        'compression_enabled' => 'getCompressionEnabled',
        'encryption_enabled' => 'getEncryptionEnabled',
        'non_compliant_error_codes' => 'getNonCompliantErrorCodes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('inline_compression', $data ?? [], null);
        $this->setIfExists('compliance_state', $data ?? [], 'IN_PROGRESS');
        $this->setIfExists('throttled_iops', $data ?? [], null);
        $this->setIfExists('active_storage_policy_reference_list', $data ?? [], null);
        $this->setIfExists('compression_enabled', $data ?? [], null);
        $this->setIfExists('encryption_enabled', $data ?? [], null);
        $this->setIfExists('non_compliant_error_codes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inline_compression
     *
     * @return bool|null
     */
    public function getInlineCompression()
    {
        return $this->container['inline_compression'];
    }

    /**
     * Sets inline_compression
     *
     * @param bool|null $inline_compression Indicates whether compression is inline or post-process on the entity.
     *
     * @return self
     */
    public function setInlineCompression($inline_compression)
    {
        if (is_null($inline_compression)) {
            throw new \InvalidArgumentException('non-nullable inline_compression cannot be null');
        }
        $this->container['inline_compression'] = $inline_compression;

        return $this;
    }

    /**
     * Gets compliance_state
     *
     * @return string|null
     */
    public function getComplianceState()
    {
        return $this->container['compliance_state'];
    }

    /**
     * Sets compliance_state
     *
     * @param string|null $compliance_state Compliance state of the entity with the storage policy.
     *
     * @return self
     */
    public function setComplianceState($compliance_state)
    {
        if (is_null($compliance_state)) {
            throw new \InvalidArgumentException('non-nullable compliance_state cannot be null');
        }
        $this->container['compliance_state'] = $compliance_state;

        return $this;
    }

    /**
     * Gets throttled_iops
     *
     * @return int|null
     */
    public function getThrottledIops()
    {
        return $this->container['throttled_iops'];
    }

    /**
     * Sets throttled_iops
     *
     * @param int|null $throttled_iops Max IOs the entity is allowed to do in a second.
     *
     * @return self
     */
    public function setThrottledIops($throttled_iops)
    {
        if (is_null($throttled_iops)) {
            throw new \InvalidArgumentException('non-nullable throttled_iops cannot be null');
        }
        $this->container['throttled_iops'] = $throttled_iops;

        return $this;
    }

    /**
     * Gets active_storage_policy_reference_list
     *
     * @return \OpenAPI\Client\Model\Reference[]|null
     */
    public function getActiveStoragePolicyReferenceList()
    {
        return $this->container['active_storage_policy_reference_list'];
    }

    /**
     * Sets active_storage_policy_reference_list
     *
     * @param \OpenAPI\Client\Model\Reference[]|null $active_storage_policy_reference_list List of storage policies active on the entity.
     *
     * @return self
     */
    public function setActiveStoragePolicyReferenceList($active_storage_policy_reference_list)
    {
        if (is_null($active_storage_policy_reference_list)) {
            throw new \InvalidArgumentException('non-nullable active_storage_policy_reference_list cannot be null');
        }
        $this->container['active_storage_policy_reference_list'] = $active_storage_policy_reference_list;

        return $this;
    }

    /**
     * Gets compression_enabled
     *
     * @return bool|null
     */
    public function getCompressionEnabled()
    {
        return $this->container['compression_enabled'];
    }

    /**
     * Sets compression_enabled
     *
     * @param bool|null $compression_enabled Indicates whether compression is enabled or not on the entity.
     *
     * @return self
     */
    public function setCompressionEnabled($compression_enabled)
    {
        if (is_null($compression_enabled)) {
            throw new \InvalidArgumentException('non-nullable compression_enabled cannot be null');
        }
        $this->container['compression_enabled'] = $compression_enabled;

        return $this;
    }

    /**
     * Gets encryption_enabled
     *
     * @return bool|null
     */
    public function getEncryptionEnabled()
    {
        return $this->container['encryption_enabled'];
    }

    /**
     * Sets encryption_enabled
     *
     * @param bool|null $encryption_enabled encryption_enabled
     *
     * @return self
     */
    public function setEncryptionEnabled($encryption_enabled)
    {
        if (is_null($encryption_enabled)) {
            throw new \InvalidArgumentException('non-nullable encryption_enabled cannot be null');
        }
        $this->container['encryption_enabled'] = $encryption_enabled;

        return $this;
    }

    /**
     * Gets non_compliant_error_codes
     *
     * @return string[]|null
     */
    public function getNonCompliantErrorCodes()
    {
        return $this->container['non_compliant_error_codes'];
    }

    /**
     * Sets non_compliant_error_codes
     *
     * @param string[]|null $non_compliant_error_codes Indicates the reasons of non-compliance with the applied policy.
     *
     * @return self
     */
    public function setNonCompliantErrorCodes($non_compliant_error_codes)
    {
        if (is_null($non_compliant_error_codes)) {
            throw new \InvalidArgumentException('non-nullable non_compliant_error_codes cannot be null');
        }
        $this->container['non_compliant_error_codes'] = $non_compliant_error_codes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


