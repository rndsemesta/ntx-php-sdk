<?php
/**
 * PhysicalAvailabilityZoneResources
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PhysicalAvailabilityZoneResources Class Doc Comment
 *
 * @category Class
 * @description Physical Availability Zone Configuration resources.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PhysicalAvailabilityZoneResources implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'physical_availability_zone_resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cell_fqdn_list' => 'string[]',
        'olb_virtual_address' => '\OpenAPI\Client\Model\Address',
        'xlb_virtual_address' => '\OpenAPI\Client\Model\Address',
        'billing_domain' => 'string',
        'is_multi_tenant' => 'bool',
        'idp_service_provider_name' => 'string',
        'pulse_configuration' => '\OpenAPI\Client\Model\PulseConfiguration',
        'ntp_server_list' => 'string[]',
        'cloud_uuid' => 'string',
        'my_nutanix_domain' => 'string',
        'external_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cell_fqdn_list' => null,
        'olb_virtual_address' => null,
        'xlb_virtual_address' => null,
        'billing_domain' => null,
        'is_multi_tenant' => null,
        'idp_service_provider_name' => null,
        'pulse_configuration' => null,
        'ntp_server_list' => null,
        'cloud_uuid' => 'UUID',
        'my_nutanix_domain' => null,
        'external_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cell_fqdn_list' => false,
        'olb_virtual_address' => false,
        'xlb_virtual_address' => false,
        'billing_domain' => false,
        'is_multi_tenant' => false,
        'idp_service_provider_name' => false,
        'pulse_configuration' => false,
        'ntp_server_list' => false,
        'cloud_uuid' => false,
        'my_nutanix_domain' => false,
        'external_url' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cell_fqdn_list' => 'cell_fqdn_list',
        'olb_virtual_address' => 'olb_virtual_address',
        'xlb_virtual_address' => 'xlb_virtual_address',
        'billing_domain' => 'billing_domain',
        'is_multi_tenant' => 'is_multi_tenant',
        'idp_service_provider_name' => 'idp_service_provider_name',
        'pulse_configuration' => 'pulse_configuration',
        'ntp_server_list' => 'ntp_server_list',
        'cloud_uuid' => 'cloud_uuid',
        'my_nutanix_domain' => 'my_nutanix_domain',
        'external_url' => 'external_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cell_fqdn_list' => 'setCellFqdnList',
        'olb_virtual_address' => 'setOlbVirtualAddress',
        'xlb_virtual_address' => 'setXlbVirtualAddress',
        'billing_domain' => 'setBillingDomain',
        'is_multi_tenant' => 'setIsMultiTenant',
        'idp_service_provider_name' => 'setIdpServiceProviderName',
        'pulse_configuration' => 'setPulseConfiguration',
        'ntp_server_list' => 'setNtpServerList',
        'cloud_uuid' => 'setCloudUuid',
        'my_nutanix_domain' => 'setMyNutanixDomain',
        'external_url' => 'setExternalUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cell_fqdn_list' => 'getCellFqdnList',
        'olb_virtual_address' => 'getOlbVirtualAddress',
        'xlb_virtual_address' => 'getXlbVirtualAddress',
        'billing_domain' => 'getBillingDomain',
        'is_multi_tenant' => 'getIsMultiTenant',
        'idp_service_provider_name' => 'getIdpServiceProviderName',
        'pulse_configuration' => 'getPulseConfiguration',
        'ntp_server_list' => 'getNtpServerList',
        'cloud_uuid' => 'getCloudUuid',
        'my_nutanix_domain' => 'getMyNutanixDomain',
        'external_url' => 'getExternalUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cell_fqdn_list', $data ?? [], null);
        $this->setIfExists('olb_virtual_address', $data ?? [], null);
        $this->setIfExists('xlb_virtual_address', $data ?? [], null);
        $this->setIfExists('billing_domain', $data ?? [], null);
        $this->setIfExists('is_multi_tenant', $data ?? [], false);
        $this->setIfExists('idp_service_provider_name', $data ?? [], null);
        $this->setIfExists('pulse_configuration', $data ?? [], null);
        $this->setIfExists('ntp_server_list', $data ?? [], null);
        $this->setIfExists('cloud_uuid', $data ?? [], null);
        $this->setIfExists('my_nutanix_domain', $data ?? [], null);
        $this->setIfExists('external_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['cloud_uuid']) && !preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", $this->container['cloud_uuid'])) {
            $invalidProperties[] = "invalid value for 'cloud_uuid', must be conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cell_fqdn_list
     *
     * @return string[]|null
     */
    public function getCellFqdnList()
    {
        return $this->container['cell_fqdn_list'];
    }

    /**
     * Sets cell_fqdn_list
     *
     * @param string[]|null $cell_fqdn_list List of cell FQDN mapped to the cluster.
     *
     * @return self
     */
    public function setCellFqdnList($cell_fqdn_list)
    {
        if (is_null($cell_fqdn_list)) {
            throw new \InvalidArgumentException('non-nullable cell_fqdn_list cannot be null');
        }
        $this->container['cell_fqdn_list'] = $cell_fqdn_list;

        return $this;
    }

    /**
     * Gets olb_virtual_address
     *
     * @return \OpenAPI\Client\Model\Address|null
     */
    public function getOlbVirtualAddress()
    {
        return $this->container['olb_virtual_address'];
    }

    /**
     * Sets olb_virtual_address
     *
     * @param \OpenAPI\Client\Model\Address|null $olb_virtual_address olb_virtual_address
     *
     * @return self
     */
    public function setOlbVirtualAddress($olb_virtual_address)
    {
        if (is_null($olb_virtual_address)) {
            throw new \InvalidArgumentException('non-nullable olb_virtual_address cannot be null');
        }
        $this->container['olb_virtual_address'] = $olb_virtual_address;

        return $this;
    }

    /**
     * Gets xlb_virtual_address
     *
     * @return \OpenAPI\Client\Model\Address|null
     */
    public function getXlbVirtualAddress()
    {
        return $this->container['xlb_virtual_address'];
    }

    /**
     * Sets xlb_virtual_address
     *
     * @param \OpenAPI\Client\Model\Address|null $xlb_virtual_address xlb_virtual_address
     *
     * @return self
     */
    public function setXlbVirtualAddress($xlb_virtual_address)
    {
        if (is_null($xlb_virtual_address)) {
            throw new \InvalidArgumentException('non-nullable xlb_virtual_address cannot be null');
        }
        $this->container['xlb_virtual_address'] = $xlb_virtual_address;

        return $this;
    }

    /**
     * Gets billing_domain
     *
     * @return string|null
     */
    public function getBillingDomain()
    {
        return $this->container['billing_domain'];
    }

    /**
     * Sets billing_domain
     *
     * @param string|null $billing_domain Billing Domain Address.
     *
     * @return self
     */
    public function setBillingDomain($billing_domain)
    {
        if (is_null($billing_domain)) {
            throw new \InvalidArgumentException('non-nullable billing_domain cannot be null');
        }
        $this->container['billing_domain'] = $billing_domain;

        return $this;
    }

    /**
     * Gets is_multi_tenant
     *
     * @return bool|null
     */
    public function getIsMultiTenant()
    {
        return $this->container['is_multi_tenant'];
    }

    /**
     * Sets is_multi_tenant
     *
     * @param bool|null $is_multi_tenant Flag indicates if the Prism Central can be shared by multiple tenants. Default is False, this must be set to True for XI multitenant PC.
     *
     * @return self
     */
    public function setIsMultiTenant($is_multi_tenant)
    {
        if (is_null($is_multi_tenant)) {
            throw new \InvalidArgumentException('non-nullable is_multi_tenant cannot be null');
        }
        $this->container['is_multi_tenant'] = $is_multi_tenant;

        return $this;
    }

    /**
     * Gets idp_service_provider_name
     *
     * @return string|null
     */
    public function getIdpServiceProviderName()
    {
        return $this->container['idp_service_provider_name'];
    }

    /**
     * Sets idp_service_provider_name
     *
     * @param string|null $idp_service_provider_name IDP Service Provider name.
     *
     * @return self
     */
    public function setIdpServiceProviderName($idp_service_provider_name)
    {
        if (is_null($idp_service_provider_name)) {
            throw new \InvalidArgumentException('non-nullable idp_service_provider_name cannot be null');
        }
        $this->container['idp_service_provider_name'] = $idp_service_provider_name;

        return $this;
    }

    /**
     * Gets pulse_configuration
     *
     * @return \OpenAPI\Client\Model\PulseConfiguration|null
     */
    public function getPulseConfiguration()
    {
        return $this->container['pulse_configuration'];
    }

    /**
     * Sets pulse_configuration
     *
     * @param \OpenAPI\Client\Model\PulseConfiguration|null $pulse_configuration pulse_configuration
     *
     * @return self
     */
    public function setPulseConfiguration($pulse_configuration)
    {
        if (is_null($pulse_configuration)) {
            throw new \InvalidArgumentException('non-nullable pulse_configuration cannot be null');
        }
        $this->container['pulse_configuration'] = $pulse_configuration;

        return $this;
    }

    /**
     * Gets ntp_server_list
     *
     * @return string[]|null
     */
    public function getNtpServerList()
    {
        return $this->container['ntp_server_list'];
    }

    /**
     * Sets ntp_server_list
     *
     * @param string[]|null $ntp_server_list List of NTP Server addresses.
     *
     * @return self
     */
    public function setNtpServerList($ntp_server_list)
    {
        if (is_null($ntp_server_list)) {
            throw new \InvalidArgumentException('non-nullable ntp_server_list cannot be null');
        }
        $this->container['ntp_server_list'] = $ntp_server_list;

        return $this;
    }

    /**
     * Gets cloud_uuid
     *
     * @return string|null
     */
    public function getCloudUuid()
    {
        return $this->container['cloud_uuid'];
    }

    /**
     * Sets cloud_uuid
     *
     * @param string|null $cloud_uuid Reference to the Infra Cloud this physical AZ belongs.
     *
     * @return self
     */
    public function setCloudUuid($cloud_uuid)
    {
        if (is_null($cloud_uuid)) {
            throw new \InvalidArgumentException('non-nullable cloud_uuid cannot be null');
        }

        if ((!preg_match("/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/", ObjectSerializer::toString($cloud_uuid)))) {
            throw new \InvalidArgumentException("invalid value for \$cloud_uuid when calling PhysicalAvailabilityZoneResources., must conform to the pattern /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.");
        }

        $this->container['cloud_uuid'] = $cloud_uuid;

        return $this;
    }

    /**
     * Gets my_nutanix_domain
     *
     * @return string|null
     */
    public function getMyNutanixDomain()
    {
        return $this->container['my_nutanix_domain'];
    }

    /**
     * Sets my_nutanix_domain
     *
     * @param string|null $my_nutanix_domain My Nutanix Domain Address used for IDP Registration.
     *
     * @return self
     */
    public function setMyNutanixDomain($my_nutanix_domain)
    {
        if (is_null($my_nutanix_domain)) {
            throw new \InvalidArgumentException('non-nullable my_nutanix_domain cannot be null');
        }
        $this->container['my_nutanix_domain'] = $my_nutanix_domain;

        return $this;
    }

    /**
     * Gets external_url
     *
     * @return string|null
     */
    public function getExternalUrl()
    {
        return $this->container['external_url'];
    }

    /**
     * Sets external_url
     *
     * @param string|null $external_url External URL for the Physical Availability Zone, required when is_mutlti_tenant set to False.
     *
     * @return self
     */
    public function setExternalUrl($external_url)
    {
        if (is_null($external_url)) {
            throw new \InvalidArgumentException('non-nullable external_url cannot be null');
        }
        $this->container['external_url'] = $external_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


