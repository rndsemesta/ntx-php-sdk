<?php
/**
 * VmCloneOverrideSpec
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VmCloneOverrideSpec Class Doc Comment
 *
 * @category Class
 * @description Properties of the VM that can be overriden during clone.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VmCloneOverrideSpec implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'vm_clone_override_spec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'num_threads_per_core' => 'int',
        'nic_list' => '\OpenAPI\Client\Model\VmNic[]',
        'name' => 'string',
        'num_vcpus_per_socket' => 'int',
        'num_sockets' => 'int',
        'memory_size_mib' => 'int',
        'boot_config' => '\OpenAPI\Client\Model\VmBootConfig',
        'guest_customization' => '\OpenAPI\Client\Model\GuestCustomization'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'num_threads_per_core' => 'int32',
        'nic_list' => null,
        'name' => null,
        'num_vcpus_per_socket' => 'int32',
        'num_sockets' => 'int32',
        'memory_size_mib' => 'int32',
        'boot_config' => null,
        'guest_customization' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'num_threads_per_core' => false,
        'nic_list' => false,
        'name' => false,
        'num_vcpus_per_socket' => false,
        'num_sockets' => false,
        'memory_size_mib' => false,
        'boot_config' => false,
        'guest_customization' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'num_threads_per_core' => 'num_threads_per_core',
        'nic_list' => 'nic_list',
        'name' => 'name',
        'num_vcpus_per_socket' => 'num_vcpus_per_socket',
        'num_sockets' => 'num_sockets',
        'memory_size_mib' => 'memory_size_mib',
        'boot_config' => 'boot_config',
        'guest_customization' => 'guest_customization'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'num_threads_per_core' => 'setNumThreadsPerCore',
        'nic_list' => 'setNicList',
        'name' => 'setName',
        'num_vcpus_per_socket' => 'setNumVcpusPerSocket',
        'num_sockets' => 'setNumSockets',
        'memory_size_mib' => 'setMemorySizeMib',
        'boot_config' => 'setBootConfig',
        'guest_customization' => 'setGuestCustomization'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'num_threads_per_core' => 'getNumThreadsPerCore',
        'nic_list' => 'getNicList',
        'name' => 'getName',
        'num_vcpus_per_socket' => 'getNumVcpusPerSocket',
        'num_sockets' => 'getNumSockets',
        'memory_size_mib' => 'getMemorySizeMib',
        'boot_config' => 'getBootConfig',
        'guest_customization' => 'getGuestCustomization'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('num_threads_per_core', $data ?? [], null);
        $this->setIfExists('nic_list', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('num_vcpus_per_socket', $data ?? [], null);
        $this->setIfExists('num_sockets', $data ?? [], null);
        $this->setIfExists('memory_size_mib', $data ?? [], null);
        $this->setIfExists('boot_config', $data ?? [], null);
        $this->setIfExists('guest_customization', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['num_threads_per_core']) && ($this->container['num_threads_per_core'] < 1)) {
            $invalidProperties[] = "invalid value for 'num_threads_per_core', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 80)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['num_vcpus_per_socket']) && ($this->container['num_vcpus_per_socket'] < 1)) {
            $invalidProperties[] = "invalid value for 'num_vcpus_per_socket', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['num_sockets']) && ($this->container['num_sockets'] < 1)) {
            $invalidProperties[] = "invalid value for 'num_sockets', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['memory_size_mib']) && ($this->container['memory_size_mib'] < 1)) {
            $invalidProperties[] = "invalid value for 'memory_size_mib', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets num_threads_per_core
     *
     * @return int|null
     */
    public function getNumThreadsPerCore()
    {
        return $this->container['num_threads_per_core'];
    }

    /**
     * Sets num_threads_per_core
     *
     * @param int|null $num_threads_per_core Number of logical threads per core.
     *
     * @return self
     */
    public function setNumThreadsPerCore($num_threads_per_core)
    {
        if (is_null($num_threads_per_core)) {
            throw new \InvalidArgumentException('non-nullable num_threads_per_core cannot be null');
        }

        if (($num_threads_per_core < 1)) {
            throw new \InvalidArgumentException('invalid value for $num_threads_per_core when calling VmCloneOverrideSpec., must be bigger than or equal to 1.');
        }

        $this->container['num_threads_per_core'] = $num_threads_per_core;

        return $this;
    }

    /**
     * Gets nic_list
     *
     * @return \OpenAPI\Client\Model\VmNic[]|null
     */
    public function getNicList()
    {
        return $this->container['nic_list'];
    }

    /**
     * Sets nic_list
     *
     * @param \OpenAPI\Client\Model\VmNic[]|null $nic_list If specified, the complete list of NICs attached to the cloned VM.
     *
     * @return self
     */
    public function setNicList($nic_list)
    {
        if (is_null($nic_list)) {
            throw new \InvalidArgumentException('non-nullable nic_list cannot be null');
        }
        $this->container['nic_list'] = $nic_list;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name VM Name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 80)) {
            throw new \InvalidArgumentException('invalid length for $name when calling VmCloneOverrideSpec., must be smaller than or equal to 80.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets num_vcpus_per_socket
     *
     * @return int|null
     */
    public function getNumVcpusPerSocket()
    {
        return $this->container['num_vcpus_per_socket'];
    }

    /**
     * Sets num_vcpus_per_socket
     *
     * @param int|null $num_vcpus_per_socket Number of vCPUs per socket.
     *
     * @return self
     */
    public function setNumVcpusPerSocket($num_vcpus_per_socket)
    {
        if (is_null($num_vcpus_per_socket)) {
            throw new \InvalidArgumentException('non-nullable num_vcpus_per_socket cannot be null');
        }

        if (($num_vcpus_per_socket < 1)) {
            throw new \InvalidArgumentException('invalid value for $num_vcpus_per_socket when calling VmCloneOverrideSpec., must be bigger than or equal to 1.');
        }

        $this->container['num_vcpus_per_socket'] = $num_vcpus_per_socket;

        return $this;
    }

    /**
     * Gets num_sockets
     *
     * @return int|null
     */
    public function getNumSockets()
    {
        return $this->container['num_sockets'];
    }

    /**
     * Sets num_sockets
     *
     * @param int|null $num_sockets Number of vCPU sockets.
     *
     * @return self
     */
    public function setNumSockets($num_sockets)
    {
        if (is_null($num_sockets)) {
            throw new \InvalidArgumentException('non-nullable num_sockets cannot be null');
        }

        if (($num_sockets < 1)) {
            throw new \InvalidArgumentException('invalid value for $num_sockets when calling VmCloneOverrideSpec., must be bigger than or equal to 1.');
        }

        $this->container['num_sockets'] = $num_sockets;

        return $this;
    }

    /**
     * Gets memory_size_mib
     *
     * @return int|null
     */
    public function getMemorySizeMib()
    {
        return $this->container['memory_size_mib'];
    }

    /**
     * Sets memory_size_mib
     *
     * @param int|null $memory_size_mib Memory size in MiB.
     *
     * @return self
     */
    public function setMemorySizeMib($memory_size_mib)
    {
        if (is_null($memory_size_mib)) {
            throw new \InvalidArgumentException('non-nullable memory_size_mib cannot be null');
        }

        if (($memory_size_mib < 1)) {
            throw new \InvalidArgumentException('invalid value for $memory_size_mib when calling VmCloneOverrideSpec., must be bigger than or equal to 1.');
        }

        $this->container['memory_size_mib'] = $memory_size_mib;

        return $this;
    }

    /**
     * Gets boot_config
     *
     * @return \OpenAPI\Client\Model\VmBootConfig|null
     */
    public function getBootConfig()
    {
        return $this->container['boot_config'];
    }

    /**
     * Sets boot_config
     *
     * @param \OpenAPI\Client\Model\VmBootConfig|null $boot_config boot_config
     *
     * @return self
     */
    public function setBootConfig($boot_config)
    {
        if (is_null($boot_config)) {
            throw new \InvalidArgumentException('non-nullable boot_config cannot be null');
        }
        $this->container['boot_config'] = $boot_config;

        return $this;
    }

    /**
     * Gets guest_customization
     *
     * @return \OpenAPI\Client\Model\GuestCustomization|null
     */
    public function getGuestCustomization()
    {
        return $this->container['guest_customization'];
    }

    /**
     * Sets guest_customization
     *
     * @param \OpenAPI\Client\Model\GuestCustomization|null $guest_customization guest_customization
     *
     * @return self
     */
    public function setGuestCustomization($guest_customization)
    {
        if (is_null($guest_customization)) {
            throw new \InvalidArgumentException('non-nullable guest_customization cannot be null');
        }
        $this->container['guest_customization'] = $guest_customization;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


