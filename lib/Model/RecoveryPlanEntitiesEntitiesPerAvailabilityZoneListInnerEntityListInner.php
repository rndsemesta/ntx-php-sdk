<?php
/**
 * RecoveryPlanEntitiesEntitiesPerAvailabilityZoneListInnerEntityListInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RecoveryPlanEntitiesEntitiesPerAvailabilityZoneListInnerEntityListInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecoveryPlanEntitiesEntitiesPerAvailabilityZoneListInnerEntityListInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'recovery_plan_entities_entities_per_availability_zone_list_inner_entity_list_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'protection_status' => 'string',
        'recoverability' => '\OpenAPI\Client\Model\RecoveryPlanEntitiesEntitiesPerAvailabilityZoneListInnerEntityListInnerRecoverability',
        'recovery_availability_zone_order_index' => 'int',
        'is_recovery_point' => 'bool',
        'replication_status' => 'string',
        'any_entity_reference' => '\OpenAPI\Client\Model\Reference'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'protection_status' => null,
        'recoverability' => null,
        'recovery_availability_zone_order_index' => 'int32',
        'is_recovery_point' => null,
        'replication_status' => null,
        'any_entity_reference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'protection_status' => false,
        'recoverability' => false,
        'recovery_availability_zone_order_index' => false,
        'is_recovery_point' => false,
        'replication_status' => false,
        'any_entity_reference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'protection_status' => 'protection_status',
        'recoverability' => 'recoverability',
        'recovery_availability_zone_order_index' => 'recovery_availability_zone_order_index',
        'is_recovery_point' => 'is_recovery_point',
        'replication_status' => 'replication_status',
        'any_entity_reference' => 'any_entity_reference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'protection_status' => 'setProtectionStatus',
        'recoverability' => 'setRecoverability',
        'recovery_availability_zone_order_index' => 'setRecoveryAvailabilityZoneOrderIndex',
        'is_recovery_point' => 'setIsRecoveryPoint',
        'replication_status' => 'setReplicationStatus',
        'any_entity_reference' => 'setAnyEntityReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'protection_status' => 'getProtectionStatus',
        'recoverability' => 'getRecoverability',
        'recovery_availability_zone_order_index' => 'getRecoveryAvailabilityZoneOrderIndex',
        'is_recovery_point' => 'getIsRecoveryPoint',
        'replication_status' => 'getReplicationStatus',
        'any_entity_reference' => 'getAnyEntityReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('protection_status', $data ?? [], null);
        $this->setIfExists('recoverability', $data ?? [], null);
        $this->setIfExists('recovery_availability_zone_order_index', $data ?? [], null);
        $this->setIfExists('is_recovery_point', $data ?? [], null);
        $this->setIfExists('replication_status', $data ?? [], null);
        $this->setIfExists('any_entity_reference', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['is_recovery_point'] === null) {
            $invalidProperties[] = "'is_recovery_point' can't be null";
        }
        if ($this->container['any_entity_reference'] === null) {
            $invalidProperties[] = "'any_entity_reference' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets protection_status
     *
     * @return string|null
     */
    public function getProtectionStatus()
    {
        return $this->container['protection_status'];
    }

    /**
     * Sets protection_status
     *
     * @param string|null $protection_status Protection status of the entity.
     *
     * @return self
     */
    public function setProtectionStatus($protection_status)
    {
        if (is_null($protection_status)) {
            throw new \InvalidArgumentException('non-nullable protection_status cannot be null');
        }
        $this->container['protection_status'] = $protection_status;

        return $this;
    }

    /**
     * Gets recoverability
     *
     * @return \OpenAPI\Client\Model\RecoveryPlanEntitiesEntitiesPerAvailabilityZoneListInnerEntityListInnerRecoverability|null
     */
    public function getRecoverability()
    {
        return $this->container['recoverability'];
    }

    /**
     * Sets recoverability
     *
     * @param \OpenAPI\Client\Model\RecoveryPlanEntitiesEntitiesPerAvailabilityZoneListInnerEntityListInnerRecoverability|null $recoverability recoverability
     *
     * @return self
     */
    public function setRecoverability($recoverability)
    {
        if (is_null($recoverability)) {
            throw new \InvalidArgumentException('non-nullable recoverability cannot be null');
        }
        $this->container['recoverability'] = $recoverability;

        return $this;
    }

    /**
     * Gets recovery_availability_zone_order_index
     *
     * @return int|null
     */
    public function getRecoveryAvailabilityZoneOrderIndex()
    {
        return $this->container['recovery_availability_zone_order_index'];
    }

    /**
     * Sets recovery_availability_zone_order_index
     *
     * @param int|null $recovery_availability_zone_order_index Index of recovery Availability Zone order for this entity in availability_zone_order_list. Index starts at 0.
     *
     * @return self
     */
    public function setRecoveryAvailabilityZoneOrderIndex($recovery_availability_zone_order_index)
    {
        if (is_null($recovery_availability_zone_order_index)) {
            throw new \InvalidArgumentException('non-nullable recovery_availability_zone_order_index cannot be null');
        }
        $this->container['recovery_availability_zone_order_index'] = $recovery_availability_zone_order_index;

        return $this;
    }

    /**
     * Gets is_recovery_point
     *
     * @return bool
     */
    public function getIsRecoveryPoint()
    {
        return $this->container['is_recovery_point'];
    }

    /**
     * Sets is_recovery_point
     *
     * @param bool $is_recovery_point On the Availability Zone, whether the live entity is present or the Recovery Points for the entity are present. This will be set to true, only if the Recovery Points for the entity are present on the Availability Zone and not the live entity.
     *
     * @return self
     */
    public function setIsRecoveryPoint($is_recovery_point)
    {
        if (is_null($is_recovery_point)) {
            throw new \InvalidArgumentException('non-nullable is_recovery_point cannot be null');
        }
        $this->container['is_recovery_point'] = $is_recovery_point;

        return $this;
    }

    /**
     * Gets replication_status
     *
     * @return string|null
     */
    public function getReplicationStatus()
    {
        return $this->container['replication_status'];
    }

    /**
     * Sets replication_status
     *
     * @param string|null $replication_status Replication status of the entity for which synchronous replication is enabled.
     *
     * @return self
     */
    public function setReplicationStatus($replication_status)
    {
        if (is_null($replication_status)) {
            throw new \InvalidArgumentException('non-nullable replication_status cannot be null');
        }
        $this->container['replication_status'] = $replication_status;

        return $this;
    }

    /**
     * Gets any_entity_reference
     *
     * @return \OpenAPI\Client\Model\Reference
     */
    public function getAnyEntityReference()
    {
        return $this->container['any_entity_reference'];
    }

    /**
     * Sets any_entity_reference
     *
     * @param \OpenAPI\Client\Model\Reference $any_entity_reference any_entity_reference
     *
     * @return self
     */
    public function setAnyEntityReference($any_entity_reference)
    {
        if (is_null($any_entity_reference)) {
            throw new \InvalidArgumentException('non-nullable any_entity_reference cannot be null');
        }
        $this->container['any_entity_reference'] = $any_entity_reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


