<?php
/**
 * NetworkDeviceResources
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NetworkDeviceResources Class Doc Comment
 *
 * @category Class
 * @description Network device entity definition
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NetworkDeviceResources implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'network_device_resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'current_firmware_version' => 'string',
        'device_class' => 'string',
        'component' => '\OpenAPI\Client\Model\DatacenterComponent',
        'ip_address' => 'string',
        'upgrade_status' => 'string',
        'rack_reference' => '\OpenAPI\Client\Model\RackReference',
        'model' => 'string',
        'device_serial' => 'string',
        'target_firmware_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'current_firmware_version' => null,
        'device_class' => null,
        'component' => null,
        'ip_address' => null,
        'upgrade_status' => null,
        'rack_reference' => null,
        'model' => null,
        'device_serial' => null,
        'target_firmware_version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'current_firmware_version' => false,
        'device_class' => false,
        'component' => false,
        'ip_address' => false,
        'upgrade_status' => false,
        'rack_reference' => false,
        'model' => false,
        'device_serial' => false,
        'target_firmware_version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'current_firmware_version' => 'current_firmware_version',
        'device_class' => 'device_class',
        'component' => 'component',
        'ip_address' => 'ip_address',
        'upgrade_status' => 'upgrade_status',
        'rack_reference' => 'rack_reference',
        'model' => 'model',
        'device_serial' => 'device_serial',
        'target_firmware_version' => 'target_firmware_version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'current_firmware_version' => 'setCurrentFirmwareVersion',
        'device_class' => 'setDeviceClass',
        'component' => 'setComponent',
        'ip_address' => 'setIpAddress',
        'upgrade_status' => 'setUpgradeStatus',
        'rack_reference' => 'setRackReference',
        'model' => 'setModel',
        'device_serial' => 'setDeviceSerial',
        'target_firmware_version' => 'setTargetFirmwareVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'current_firmware_version' => 'getCurrentFirmwareVersion',
        'device_class' => 'getDeviceClass',
        'component' => 'getComponent',
        'ip_address' => 'getIpAddress',
        'upgrade_status' => 'getUpgradeStatus',
        'rack_reference' => 'getRackReference',
        'model' => 'getModel',
        'device_serial' => 'getDeviceSerial',
        'target_firmware_version' => 'getTargetFirmwareVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('current_firmware_version', $data ?? [], null);
        $this->setIfExists('device_class', $data ?? [], null);
        $this->setIfExists('component', $data ?? [], null);
        $this->setIfExists('ip_address', $data ?? [], null);
        $this->setIfExists('upgrade_status', $data ?? [], null);
        $this->setIfExists('rack_reference', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], null);
        $this->setIfExists('device_serial', $data ?? [], null);
        $this->setIfExists('target_firmware_version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 500)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['current_firmware_version']) && (mb_strlen($this->container['current_firmware_version']) > 50)) {
            $invalidProperties[] = "invalid value for 'current_firmware_version', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['device_class']) && (mb_strlen($this->container['device_class']) > 100)) {
            $invalidProperties[] = "invalid value for 'device_class', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['ip_address']) && !preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/", $this->container['ip_address'])) {
            $invalidProperties[] = "invalid value for 'ip_address', must be conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.";
        }

        if (!is_null($this->container['upgrade_status']) && (mb_strlen($this->container['upgrade_status']) > 25)) {
            $invalidProperties[] = "invalid value for 'upgrade_status', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['model']) && (mb_strlen($this->container['model']) > 50)) {
            $invalidProperties[] = "invalid value for 'model', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['device_serial']) && (mb_strlen($this->container['device_serial']) > 100)) {
            $invalidProperties[] = "invalid value for 'device_serial', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['target_firmware_version']) && (mb_strlen($this->container['target_firmware_version']) > 50)) {
            $invalidProperties[] = "invalid value for 'target_firmware_version', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 500)) {
            throw new \InvalidArgumentException('invalid length for $description when calling NetworkDeviceResources., must be smaller than or equal to 500.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets current_firmware_version
     *
     * @return string|null
     */
    public function getCurrentFirmwareVersion()
    {
        return $this->container['current_firmware_version'];
    }

    /**
     * Sets current_firmware_version
     *
     * @param string|null $current_firmware_version The current firmware version
     *
     * @return self
     */
    public function setCurrentFirmwareVersion($current_firmware_version)
    {
        if (is_null($current_firmware_version)) {
            throw new \InvalidArgumentException('non-nullable current_firmware_version cannot be null');
        }
        if ((mb_strlen($current_firmware_version) > 50)) {
            throw new \InvalidArgumentException('invalid length for $current_firmware_version when calling NetworkDeviceResources., must be smaller than or equal to 50.');
        }

        $this->container['current_firmware_version'] = $current_firmware_version;

        return $this;
    }

    /**
     * Gets device_class
     *
     * @return string|null
     */
    public function getDeviceClass()
    {
        return $this->container['device_class'];
    }

    /**
     * Sets device_class
     *
     * @param string|null $device_class A well known string for network device class information
     *
     * @return self
     */
    public function setDeviceClass($device_class)
    {
        if (is_null($device_class)) {
            throw new \InvalidArgumentException('non-nullable device_class cannot be null');
        }
        if ((mb_strlen($device_class) > 100)) {
            throw new \InvalidArgumentException('invalid length for $device_class when calling NetworkDeviceResources., must be smaller than or equal to 100.');
        }

        $this->container['device_class'] = $device_class;

        return $this;
    }

    /**
     * Gets component
     *
     * @return \OpenAPI\Client\Model\DatacenterComponent|null
     */
    public function getComponent()
    {
        return $this->container['component'];
    }

    /**
     * Sets component
     *
     * @param \OpenAPI\Client\Model\DatacenterComponent|null $component component
     *
     * @return self
     */
    public function setComponent($component)
    {
        if (is_null($component)) {
            throw new \InvalidArgumentException('non-nullable component cannot be null');
        }
        $this->container['component'] = $component;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address device IP address
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        if (is_null($ip_address)) {
            throw new \InvalidArgumentException('non-nullable ip_address cannot be null');
        }

        if ((!preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/", ObjectSerializer::toString($ip_address)))) {
            throw new \InvalidArgumentException("invalid value for \$ip_address when calling NetworkDeviceResources., must conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.");
        }

        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets upgrade_status
     *
     * @return string|null
     */
    public function getUpgradeStatus()
    {
        return $this->container['upgrade_status'];
    }

    /**
     * Sets upgrade_status
     *
     * @param string|null $upgrade_status upgrade status
     *
     * @return self
     */
    public function setUpgradeStatus($upgrade_status)
    {
        if (is_null($upgrade_status)) {
            throw new \InvalidArgumentException('non-nullable upgrade_status cannot be null');
        }
        if ((mb_strlen($upgrade_status) > 25)) {
            throw new \InvalidArgumentException('invalid length for $upgrade_status when calling NetworkDeviceResources., must be smaller than or equal to 25.');
        }

        $this->container['upgrade_status'] = $upgrade_status;

        return $this;
    }

    /**
     * Gets rack_reference
     *
     * @return \OpenAPI\Client\Model\RackReference|null
     */
    public function getRackReference()
    {
        return $this->container['rack_reference'];
    }

    /**
     * Sets rack_reference
     *
     * @param \OpenAPI\Client\Model\RackReference|null $rack_reference rack_reference
     *
     * @return self
     */
    public function setRackReference($rack_reference)
    {
        if (is_null($rack_reference)) {
            throw new \InvalidArgumentException('non-nullable rack_reference cannot be null');
        }
        $this->container['rack_reference'] = $rack_reference;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model device model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        if ((mb_strlen($model) > 50)) {
            throw new \InvalidArgumentException('invalid length for $model when calling NetworkDeviceResources., must be smaller than or equal to 50.');
        }

        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets device_serial
     *
     * @return string|null
     */
    public function getDeviceSerial()
    {
        return $this->container['device_serial'];
    }

    /**
     * Sets device_serial
     *
     * @param string|null $device_serial Device serial number
     *
     * @return self
     */
    public function setDeviceSerial($device_serial)
    {
        if (is_null($device_serial)) {
            throw new \InvalidArgumentException('non-nullable device_serial cannot be null');
        }
        if ((mb_strlen($device_serial) > 100)) {
            throw new \InvalidArgumentException('invalid length for $device_serial when calling NetworkDeviceResources., must be smaller than or equal to 100.');
        }

        $this->container['device_serial'] = $device_serial;

        return $this;
    }

    /**
     * Gets target_firmware_version
     *
     * @return string|null
     */
    public function getTargetFirmwareVersion()
    {
        return $this->container['target_firmware_version'];
    }

    /**
     * Sets target_firmware_version
     *
     * @param string|null $target_firmware_version The target firmware version
     *
     * @return self
     */
    public function setTargetFirmwareVersion($target_firmware_version)
    {
        if (is_null($target_firmware_version)) {
            throw new \InvalidArgumentException('non-nullable target_firmware_version cannot be null');
        }
        if ((mb_strlen($target_firmware_version) > 50)) {
            throw new \InvalidArgumentException('invalid length for $target_firmware_version when calling NetworkDeviceResources., must be smaller than or equal to 50.');
        }

        $this->container['target_firmware_version'] = $target_firmware_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


