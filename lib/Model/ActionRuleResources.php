<?php
/**
 * ActionRuleResources
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ActionRuleResources Class Doc Comment
 *
 * @category Class
 * @description Action rule entity definition
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ActionRuleResources implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'action_rule_resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_enabled' => 'bool',
        'should_validate' => 'bool',
        'trigger_list' => '\OpenAPI\Client\Model\TriggerInstanceObject[]',
        'name' => 'string',
        'execution_user_reference' => '\OpenAPI\Client\Model\UserReference',
        'rule_type' => 'string',
        'action_list' => '\OpenAPI\Client\Model\ActionInstanceObject[]',
        'check_trigger_validity' => 'bool',
        'global_parameters' => 'object',
        'x_pilot_params' => '\OpenAPI\Client\Model\ActionRuleXPilotParams',
        'error_list' => '\OpenAPI\Client\Model\ComponentError[]',
        'validated' => 'bool',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_enabled' => null,
        'should_validate' => null,
        'trigger_list' => null,
        'name' => null,
        'execution_user_reference' => null,
        'rule_type' => null,
        'action_list' => null,
        'check_trigger_validity' => null,
        'global_parameters' => null,
        'x_pilot_params' => null,
        'error_list' => null,
        'validated' => null,
        'description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_enabled' => false,
        'should_validate' => false,
        'trigger_list' => false,
        'name' => false,
        'execution_user_reference' => false,
        'rule_type' => false,
        'action_list' => false,
        'check_trigger_validity' => false,
        'global_parameters' => false,
        'x_pilot_params' => false,
        'error_list' => false,
        'validated' => false,
        'description' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_enabled' => 'is_enabled',
        'should_validate' => 'should_validate',
        'trigger_list' => 'trigger_list',
        'name' => 'name',
        'execution_user_reference' => 'execution_user_reference',
        'rule_type' => 'rule_type',
        'action_list' => 'action_list',
        'check_trigger_validity' => 'check_trigger_validity',
        'global_parameters' => 'global_parameters',
        'x_pilot_params' => 'x_pilot_params',
        'error_list' => 'error_list',
        'validated' => 'validated',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_enabled' => 'setIsEnabled',
        'should_validate' => 'setShouldValidate',
        'trigger_list' => 'setTriggerList',
        'name' => 'setName',
        'execution_user_reference' => 'setExecutionUserReference',
        'rule_type' => 'setRuleType',
        'action_list' => 'setActionList',
        'check_trigger_validity' => 'setCheckTriggerValidity',
        'global_parameters' => 'setGlobalParameters',
        'x_pilot_params' => 'setXPilotParams',
        'error_list' => 'setErrorList',
        'validated' => 'setValidated',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_enabled' => 'getIsEnabled',
        'should_validate' => 'getShouldValidate',
        'trigger_list' => 'getTriggerList',
        'name' => 'getName',
        'execution_user_reference' => 'getExecutionUserReference',
        'rule_type' => 'getRuleType',
        'action_list' => 'getActionList',
        'check_trigger_validity' => 'getCheckTriggerValidity',
        'global_parameters' => 'getGlobalParameters',
        'x_pilot_params' => 'getXPilotParams',
        'error_list' => 'getErrorList',
        'validated' => 'getValidated',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('is_enabled', $data ?? [], null);
        $this->setIfExists('should_validate', $data ?? [], null);
        $this->setIfExists('trigger_list', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('execution_user_reference', $data ?? [], null);
        $this->setIfExists('rule_type', $data ?? [], null);
        $this->setIfExists('action_list', $data ?? [], null);
        $this->setIfExists('check_trigger_validity', $data ?? [], null);
        $this->setIfExists('global_parameters', $data ?? [], null);
        $this->setIfExists('x_pilot_params', $data ?? [], null);
        $this->setIfExists('error_list', $data ?? [], null);
        $this->setIfExists('validated', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['trigger_list'] === null) {
            $invalidProperties[] = "'trigger_list' can't be null";
        }
        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 64)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['name']) && !preg_match("/^[^&<>'\/\"]*$/", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /^[^&<>'\/\"]*$/.";
        }

        if ($this->container['action_list'] === null) {
            $invalidProperties[] = "'action_list' can't be null";
        }
        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 256)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['description']) && !preg_match("/^[^&<>'\/\"]*$/", $this->container['description'])) {
            $invalidProperties[] = "invalid value for 'description', must be conform to the pattern /^[^&<>'\/\"]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_enabled
     *
     * @return bool|null
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool|null $is_enabled is the rule enabled or disabled.
     *
     * @return self
     */
    public function setIsEnabled($is_enabled)
    {
        if (is_null($is_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_enabled cannot be null');
        }
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets should_validate
     *
     * @return bool|null
     */
    public function getShouldValidate()
    {
        return $this->container['should_validate'];
    }

    /**
     * Sets should_validate
     *
     * @param bool|null $should_validate The rule should be validated or not.  If True, then, the rule will be validated before saving.  If the validation failed, the spec status message list will have errors.
     *
     * @return self
     */
    public function setShouldValidate($should_validate)
    {
        if (is_null($should_validate)) {
            throw new \InvalidArgumentException('non-nullable should_validate cannot be null');
        }
        $this->container['should_validate'] = $should_validate;

        return $this;
    }

    /**
     * Gets trigger_list
     *
     * @return \OpenAPI\Client\Model\TriggerInstanceObject[]
     */
    public function getTriggerList()
    {
        return $this->container['trigger_list'];
    }

    /**
     * Sets trigger_list
     *
     * @param \OpenAPI\Client\Model\TriggerInstanceObject[] $trigger_list The only trigger that the rule has.
     *
     * @return self
     */
    public function setTriggerList($trigger_list)
    {
        if (is_null($trigger_list)) {
            throw new \InvalidArgumentException('non-nullable trigger_list cannot be null');
        }
        $this->container['trigger_list'] = $trigger_list;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The action rule name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ActionRuleResources., must be smaller than or equal to 64.');
        }
        if ((!preg_match("/^[^&<>'\/\"]*$/", ObjectSerializer::toString($name)))) {
            throw new \InvalidArgumentException("invalid value for \$name when calling ActionRuleResources., must conform to the pattern /^[^&<>'\/\"]*$/.");
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets execution_user_reference
     *
     * @return \OpenAPI\Client\Model\UserReference|null
     */
    public function getExecutionUserReference()
    {
        return $this->container['execution_user_reference'];
    }

    /**
     * Sets execution_user_reference
     *
     * @param \OpenAPI\Client\Model\UserReference|null $execution_user_reference execution_user_reference
     *
     * @return self
     */
    public function setExecutionUserReference($execution_user_reference)
    {
        if (is_null($execution_user_reference)) {
            throw new \InvalidArgumentException('non-nullable execution_user_reference cannot be null');
        }
        $this->container['execution_user_reference'] = $execution_user_reference;

        return $this;
    }

    /**
     * Gets rule_type
     *
     * @return string|null
     */
    public function getRuleType()
    {
        return $this->container['rule_type'];
    }

    /**
     * Sets rule_type
     *
     * @param string|null $rule_type Action rule types associated with this rule.
     *
     * @return self
     */
    public function setRuleType($rule_type)
    {
        if (is_null($rule_type)) {
            throw new \InvalidArgumentException('non-nullable rule_type cannot be null');
        }
        $this->container['rule_type'] = $rule_type;

        return $this;
    }

    /**
     * Gets action_list
     *
     * @return \OpenAPI\Client\Model\ActionInstanceObject[]
     */
    public function getActionList()
    {
        return $this->container['action_list'];
    }

    /**
     * Sets action_list
     *
     * @param \OpenAPI\Client\Model\ActionInstanceObject[] $action_list Ordered list of the actions to execute in this rule.
     *
     * @return self
     */
    public function setActionList($action_list)
    {
        if (is_null($action_list)) {
            throw new \InvalidArgumentException('non-nullable action_list cannot be null');
        }
        $this->container['action_list'] = $action_list;

        return $this;
    }

    /**
     * Gets check_trigger_validity
     *
     * @return bool|null
     */
    public function getCheckTriggerValidity()
    {
        return $this->container['check_trigger_validity'];
    }

    /**
     * Sets check_trigger_validity
     *
     * @param bool|null $check_trigger_validity If it is true, the rule action execution at the schedueled time will check if the original trigger is still valid.  If not set, default to True.
     *
     * @return self
     */
    public function setCheckTriggerValidity($check_trigger_validity)
    {
        if (is_null($check_trigger_validity)) {
            throw new \InvalidArgumentException('non-nullable check_trigger_validity cannot be null');
        }
        $this->container['check_trigger_validity'] = $check_trigger_validity;

        return $this;
    }

    /**
     * Gets global_parameters
     *
     * @return object|null
     */
    public function getGlobalParameters()
    {
        return $this->container['global_parameters'];
    }

    /**
     * Sets global_parameters
     *
     * @param object|null $global_parameters The rule level global parameter descriptors. This is provided by the system.
     *
     * @return self
     */
    public function setGlobalParameters($global_parameters)
    {
        if (is_null($global_parameters)) {
            throw new \InvalidArgumentException('non-nullable global_parameters cannot be null');
        }
        $this->container['global_parameters'] = $global_parameters;

        return $this;
    }

    /**
     * Gets x_pilot_params
     *
     * @return \OpenAPI\Client\Model\ActionRuleXPilotParams|null
     */
    public function getXPilotParams()
    {
        return $this->container['x_pilot_params'];
    }

    /**
     * Sets x_pilot_params
     *
     * @param \OpenAPI\Client\Model\ActionRuleXPilotParams|null $x_pilot_params x_pilot_params
     *
     * @return self
     */
    public function setXPilotParams($x_pilot_params)
    {
        if (is_null($x_pilot_params)) {
            throw new \InvalidArgumentException('non-nullable x_pilot_params cannot be null');
        }
        $this->container['x_pilot_params'] = $x_pilot_params;

        return $this;
    }

    /**
     * Gets error_list
     *
     * @return \OpenAPI\Client\Model\ComponentError[]|null
     */
    public function getErrorList()
    {
        return $this->container['error_list'];
    }

    /**
     * Sets error_list
     *
     * @param \OpenAPI\Client\Model\ComponentError[]|null $error_list Errors identified in this rule.
     *
     * @return self
     */
    public function setErrorList($error_list)
    {
        if (is_null($error_list)) {
            throw new \InvalidArgumentException('non-nullable error_list cannot be null');
        }
        $this->container['error_list'] = $error_list;

        return $this;
    }

    /**
     * Gets validated
     *
     * @return bool|null
     */
    public function getValidated()
    {
        return $this->container['validated'];
    }

    /**
     * Sets validated
     *
     * @param bool|null $validated Is this been validated to trur or not.
     *
     * @return self
     */
    public function setValidated($validated)
    {
        if (is_null($validated)) {
            throw new \InvalidArgumentException('non-nullable validated cannot be null');
        }
        $this->container['validated'] = $validated;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The rule description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 256)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ActionRuleResources., must be smaller than or equal to 256.');
        }
        if ((!preg_match("/^[^&<>'\/\"]*$/", ObjectSerializer::toString($description)))) {
            throw new \InvalidArgumentException("invalid value for \$description when calling ActionRuleResources., must conform to the pattern /^[^&<>'\/\"]*$/.");
        }

        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


