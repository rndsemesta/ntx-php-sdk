<?php
/**
 * DirectConnectVirtualInterfaceResources
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DirectConnectVirtualInterfaceResources Class Doc Comment
 *
 * @category Class
 * @description Direct connect virtual interface spec.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DirectConnectVirtualInterfaceResources implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'direct_connect_virtual_interface_resources';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vpc_reference' => '\OpenAPI\Client\Model\VpcReference',
        'virtual_network_reference' => '\OpenAPI\Client\Model\VirtualNetworkReference',
        'direct_connect_reference' => '\OpenAPI\Client\Model\DirectConnectReference',
        'dynamic_route_priority' => 'int',
        'peer_asn' => 'int',
        'peer_ip_prefix' => 'string',
        'md5' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vpc_reference' => null,
        'virtual_network_reference' => null,
        'direct_connect_reference' => null,
        'dynamic_route_priority' => 'uint16',
        'peer_asn' => 'uint32',
        'peer_ip_prefix' => null,
        'md5' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'vpc_reference' => false,
        'virtual_network_reference' => false,
        'direct_connect_reference' => false,
        'dynamic_route_priority' => false,
        'peer_asn' => false,
        'peer_ip_prefix' => false,
        'md5' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vpc_reference' => 'vpc_reference',
        'virtual_network_reference' => 'virtual_network_reference',
        'direct_connect_reference' => 'direct_connect_reference',
        'dynamic_route_priority' => 'dynamic_route_priority',
        'peer_asn' => 'peer_asn',
        'peer_ip_prefix' => 'peer_ip_prefix',
        'md5' => 'md5'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vpc_reference' => 'setVpcReference',
        'virtual_network_reference' => 'setVirtualNetworkReference',
        'direct_connect_reference' => 'setDirectConnectReference',
        'dynamic_route_priority' => 'setDynamicRoutePriority',
        'peer_asn' => 'setPeerAsn',
        'peer_ip_prefix' => 'setPeerIpPrefix',
        'md5' => 'setMd5'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vpc_reference' => 'getVpcReference',
        'virtual_network_reference' => 'getVirtualNetworkReference',
        'direct_connect_reference' => 'getDirectConnectReference',
        'dynamic_route_priority' => 'getDynamicRoutePriority',
        'peer_asn' => 'getPeerAsn',
        'peer_ip_prefix' => 'getPeerIpPrefix',
        'md5' => 'getMd5'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('vpc_reference', $data ?? [], null);
        $this->setIfExists('virtual_network_reference', $data ?? [], null);
        $this->setIfExists('direct_connect_reference', $data ?? [], null);
        $this->setIfExists('dynamic_route_priority', $data ?? [], null);
        $this->setIfExists('peer_asn', $data ?? [], null);
        $this->setIfExists('peer_ip_prefix', $data ?? [], null);
        $this->setIfExists('md5', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['direct_connect_reference'] === null) {
            $invalidProperties[] = "'direct_connect_reference' can't be null";
        }
        if (!is_null($this->container['dynamic_route_priority']) && ($this->container['dynamic_route_priority'] > 1000)) {
            $invalidProperties[] = "invalid value for 'dynamic_route_priority', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['dynamic_route_priority']) && ($this->container['dynamic_route_priority'] < 10)) {
            $invalidProperties[] = "invalid value for 'dynamic_route_priority', must be bigger than or equal to 10.";
        }

        if ($this->container['peer_asn'] === null) {
            $invalidProperties[] = "'peer_asn' can't be null";
        }
        if (($this->container['peer_asn'] > 4294967294)) {
            $invalidProperties[] = "invalid value for 'peer_asn', must be smaller than or equal to 4294967294.";
        }

        if (($this->container['peer_asn'] < 0)) {
            $invalidProperties[] = "invalid value for 'peer_asn', must be bigger than or equal to 0.";
        }

        if ($this->container['peer_ip_prefix'] === null) {
            $invalidProperties[] = "'peer_ip_prefix' can't be null";
        }
        if (!preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\/(\\d|[1-2]\\d|3[0-2]))$/", $this->container['peer_ip_prefix'])) {
            $invalidProperties[] = "invalid value for 'peer_ip_prefix', must be conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\/(\\d|[1-2]\\d|3[0-2]))$/.";
        }

        if (!is_null($this->container['md5']) && (mb_strlen($this->container['md5']) > 32)) {
            $invalidProperties[] = "invalid value for 'md5', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['md5']) && (mb_strlen($this->container['md5']) < 1)) {
            $invalidProperties[] = "invalid value for 'md5', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vpc_reference
     *
     * @return \OpenAPI\Client\Model\VpcReference|null
     */
    public function getVpcReference()
    {
        return $this->container['vpc_reference'];
    }

    /**
     * Sets vpc_reference
     *
     * @param \OpenAPI\Client\Model\VpcReference|null $vpc_reference vpc_reference
     *
     * @return self
     */
    public function setVpcReference($vpc_reference)
    {
        if (is_null($vpc_reference)) {
            throw new \InvalidArgumentException('non-nullable vpc_reference cannot be null');
        }
        $this->container['vpc_reference'] = $vpc_reference;

        return $this;
    }

    /**
     * Gets virtual_network_reference
     *
     * @return \OpenAPI\Client\Model\VirtualNetworkReference|null
     */
    public function getVirtualNetworkReference()
    {
        return $this->container['virtual_network_reference'];
    }

    /**
     * Sets virtual_network_reference
     *
     * @param \OpenAPI\Client\Model\VirtualNetworkReference|null $virtual_network_reference virtual_network_reference
     *
     * @return self
     */
    public function setVirtualNetworkReference($virtual_network_reference)
    {
        if (is_null($virtual_network_reference)) {
            throw new \InvalidArgumentException('non-nullable virtual_network_reference cannot be null');
        }
        $this->container['virtual_network_reference'] = $virtual_network_reference;

        return $this;
    }

    /**
     * Gets direct_connect_reference
     *
     * @return \OpenAPI\Client\Model\DirectConnectReference
     */
    public function getDirectConnectReference()
    {
        return $this->container['direct_connect_reference'];
    }

    /**
     * Sets direct_connect_reference
     *
     * @param \OpenAPI\Client\Model\DirectConnectReference $direct_connect_reference direct_connect_reference
     *
     * @return self
     */
    public function setDirectConnectReference($direct_connect_reference)
    {
        if (is_null($direct_connect_reference)) {
            throw new \InvalidArgumentException('non-nullable direct_connect_reference cannot be null');
        }
        $this->container['direct_connect_reference'] = $direct_connect_reference;

        return $this;
    }

    /**
     * Gets dynamic_route_priority
     *
     * @return int|null
     */
    public function getDynamicRoutePriority()
    {
        return $this->container['dynamic_route_priority'];
    }

    /**
     * Sets dynamic_route_priority
     *
     * @param int|null $dynamic_route_priority Priority assigned to routes received on this connection over eBGP. A higher priority value indicates that the routes are more preferred.
     *
     * @return self
     */
    public function setDynamicRoutePriority($dynamic_route_priority)
    {
        if (is_null($dynamic_route_priority)) {
            throw new \InvalidArgumentException('non-nullable dynamic_route_priority cannot be null');
        }

        if (($dynamic_route_priority > 1000)) {
            throw new \InvalidArgumentException('invalid value for $dynamic_route_priority when calling DirectConnectVirtualInterfaceResources., must be smaller than or equal to 1000.');
        }
        if (($dynamic_route_priority < 10)) {
            throw new \InvalidArgumentException('invalid value for $dynamic_route_priority when calling DirectConnectVirtualInterfaceResources., must be bigger than or equal to 10.');
        }

        $this->container['dynamic_route_priority'] = $dynamic_route_priority;

        return $this;
    }

    /**
     * Gets peer_asn
     *
     * @return int
     */
    public function getPeerAsn()
    {
        return $this->container['peer_asn'];
    }

    /**
     * Sets peer_asn
     *
     * @param int $peer_asn Autonomous system number
     *
     * @return self
     */
    public function setPeerAsn($peer_asn)
    {
        if (is_null($peer_asn)) {
            throw new \InvalidArgumentException('non-nullable peer_asn cannot be null');
        }

        if (($peer_asn > 4294967294)) {
            throw new \InvalidArgumentException('invalid value for $peer_asn when calling DirectConnectVirtualInterfaceResources., must be smaller than or equal to 4294967294.');
        }
        if (($peer_asn < 0)) {
            throw new \InvalidArgumentException('invalid value for $peer_asn when calling DirectConnectVirtualInterfaceResources., must be bigger than or equal to 0.');
        }

        $this->container['peer_asn'] = $peer_asn;

        return $this;
    }

    /**
     * Gets peer_ip_prefix
     *
     * @return string
     */
    public function getPeerIpPrefix()
    {
        return $this->container['peer_ip_prefix'];
    }

    /**
     * Sets peer_ip_prefix
     *
     * @param string $peer_ip_prefix Customer peering IPv4 /30 or /31 prefix.
     *
     * @return self
     */
    public function setPeerIpPrefix($peer_ip_prefix)
    {
        if (is_null($peer_ip_prefix)) {
            throw new \InvalidArgumentException('non-nullable peer_ip_prefix cannot be null');
        }

        if ((!preg_match("/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\/(\\d|[1-2]\\d|3[0-2]))$/", ObjectSerializer::toString($peer_ip_prefix)))) {
            throw new \InvalidArgumentException("invalid value for \$peer_ip_prefix when calling DirectConnectVirtualInterfaceResources., must conform to the pattern /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\/(\\d|[1-2]\\d|3[0-2]))$/.");
        }

        $this->container['peer_ip_prefix'] = $peer_ip_prefix;

        return $this;
    }

    /**
     * Gets md5
     *
     * @return string|null
     */
    public function getMd5()
    {
        return $this->container['md5'];
    }

    /**
     * Sets md5
     *
     * @param string|null $md5 md5 hash for bgp peering.
     *
     * @return self
     */
    public function setMd5($md5)
    {
        if (is_null($md5)) {
            throw new \InvalidArgumentException('non-nullable md5 cannot be null');
        }
        if ((mb_strlen($md5) > 32)) {
            throw new \InvalidArgumentException('invalid length for $md5 when calling DirectConnectVirtualInterfaceResources., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($md5) < 1)) {
            throw new \InvalidArgumentException('invalid length for $md5 when calling DirectConnectVirtualInterfaceResources., must be bigger than or equal to 1.');
        }

        $this->container['md5'] = $md5;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


