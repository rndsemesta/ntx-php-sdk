<?php
/**
 * ClustersApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nutanix Intentful API
 *
 * Move programming from the user to the machine.
 *
 * The version of the OpenAPI document: 3.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ClustersApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ClustersApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for clustersEntityReplicationTargetDetailsPost
     *
     * Get the placement information for an entity. This will be used to identify the replication target for an entity snapshot or placement of the entity..
     *
     */
    public function testClustersEntityReplicationTargetDetailsPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersListPost
     *
     * Get a list of existing clusters.
     *
     */
    public function testClustersListPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersMulticlusterConfigClusterUuidMigrateSspConfigPost
     *
     * Migrate SSP config from a Prism Element..
     *
     */
    public function testClustersMulticlusterConfigClusterUuidMigrateSspConfigPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersMulticlusterConfigPost
     *
     * Apply multicluster configuration from Prism Central..
     *
     */
    public function testClustersMulticlusterConfigPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersMulticlusterConfigUuidCancelPost
     *
     * Cancel a multicluster configuration request from Prism Central..
     *
     */
    public function testClustersMulticlusterConfigUuidCancelPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersMulticlusterConfigUuidDelete
     *
     * Delete a scheduled and unprocessed multicluster configuration request..
     *
     */
    public function testClustersMulticlusterConfigUuidDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersMulticlusterConfigUuidPausePost
     *
     * Pause a multicluster configuration request from Prism Central..
     *
     */
    public function testClustersMulticlusterConfigUuidPausePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersMulticlusterConfigUuidPut
     *
     * Update a scheduled and unprocessed multicluster configuration request..
     *
     */
    public function testClustersMulticlusterConfigUuidPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersMulticlusterConfigUuidResumePost
     *
     * Resume a paused multicluster configuration request..
     *
     */
    public function testClustersMulticlusterConfigUuidResumePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersRecoveryPointResourceReservationPost
     *
     * Update the Lazan resource reservation lease for the given recovery point replication..
     *
     */
    public function testClustersRecoveryPointResourceReservationPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersSynchronousReplicationCapablePost
     *
     * Get a list of existing clusters.
     *
     */
    public function testClustersSynchronousReplicationCapablePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCertificatesCaCertsCaNameDelete
     *
     * Delete the CA certificate.
     *
     */
    public function testClustersUuidCertificatesCaCertsCaNameDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCertificatesCaCertsPost
     *
     * Add a new CA certificate.
     *
     */
    public function testClustersUuidCertificatesCaCertsPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCertificatesClientAuthDelete
     *
     * Remove the CA chain for client authentication.
     *
     */
    public function testClustersUuidCertificatesClientAuthDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCertificatesClientAuthPost
     *
     * Import CA chain for client authentication.
     *
     */
    public function testClustersUuidCertificatesClientAuthPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCertificatesClientAuthPut
     *
     * Replace the CA chain for client authentication.
     *
     */
    public function testClustersUuidCertificatesClientAuthPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCertificatesCsrsGet
     *
     * Download CSRs from cluster.
     *
     */
    public function testClustersUuidCertificatesCsrsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCertificatesCsrsNodeIpGet
     *
     * Download CSR from a discovered node.
     *
     */
    public function testClustersUuidCertificatesCsrsNodeIpGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCertificatesPemkeyImportPost
     *
     * Import a new key.
     *
     */
    public function testClustersUuidCertificatesPemkeyImportPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCertificatesPemkeyPost
     *
     * Generate a 2048 bits cipher length RSA key.
     *
     */
    public function testClustersUuidCertificatesPemkeyPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCertificatesRootDelete
     *
     * Remove PC root certificates.
     *
     */
    public function testClustersUuidCertificatesRootDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCertificatesRootGet
     *
     * Retrieve PC root certificates.
     *
     */
    public function testClustersUuidCertificatesRootGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCertificatesRootPost
     *
     * Save a PC root certificate on a PC or a PE.
     *
     */
    public function testClustersUuidCertificatesRootPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCertificatesSvmCertsKmsUuidPost
     *
     * Add one or more certificates to a service VM.
     *
     */
    public function testClustersUuidCertificatesSvmCertsKmsUuidPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCertificatesSvmCertsNodeUuidKmsUuidDelete
     *
     * Delete the certificate on a service VM.
     *
     */
    public function testClustersUuidCertificatesSvmCertsNodeUuidKmsUuidDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCertificatesSvmCertsNodeUuidKmsUuidPut
     *
     * Replace the certificate on a service VM.
     *
     */
    public function testClustersUuidCertificatesSvmCertsNodeUuidKmsUuidPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCloudCredentialsCloudTypeCloudCredentialsIdDelete
     *
     * Delete a existing cloud credentials.
     *
     */
    public function testClustersUuidCloudCredentialsCloudTypeCloudCredentialsIdDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCloudCredentialsCloudTypeCloudCredentialsIdGet
     *
     * Get a existing cloud credentials.
     *
     */
    public function testClustersUuidCloudCredentialsCloudTypeCloudCredentialsIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCloudCredentialsCloudTypeCloudCredentialsIdPut
     *
     * Update a existing cloud credentials.
     *
     */
    public function testClustersUuidCloudCredentialsCloudTypeCloudCredentialsIdPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCloudCredentialsCloudTypeDelete
     *
     * Delete all cloud credentials.
     *
     */
    public function testClustersUuidCloudCredentialsCloudTypeDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCloudCredentialsCloudTypeListPost
     *
     * Get a list of existing cloud credentials.
     *
     */
    public function testClustersUuidCloudCredentialsCloudTypeListPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidCloudCredentialsCloudTypePost
     *
     * Add a cloud credential for accessing cloud sites.
     *
     */
    public function testClustersUuidCloudCredentialsCloudTypePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidGet
     *
     * Get a existing cluster.
     *
     */
    public function testClustersUuidGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for clustersUuidPut
     *
     * Update a existing cluster.
     *
     */
    public function testClustersUuidPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
